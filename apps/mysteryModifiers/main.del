import './settings.del';
// import './settings.prod.del';
import './settings.dev.del';
import './debug.del';

import './variables.del';
import './modifiers/index.del';
import '../../libs/utils/vector.del';
import '../../libs/utils/player.del';
import '../../libs/utils/log.del';
import '../../libs/utils/diagnostics.del';
import '../../libs/utils/hud.del';
import './hud.del';
import './controlledBy/index.del';

globalvar String stopReason = '';

globalvar Number modifierDurationLeft = 0;
globalvar Number modifierDurationTotal = 0;
globalvar Number modifierDurationModifier = WorkshopSettingReal("Modifier", "Global modifier duration scalar", 1, 0.2, 5);
globalvar String[] modifierHistory = [];
globalvar Number modifierHistorySize = 3;

rule: 'Initialize modifier list'
{
  enabledModifiers = allModifiers.FilteredArray((mod) => mod.enabled).Map((mod) => mod.name);
  
  if(enabledModifiers.Length <= modifierHistorySize)
    modifierHistorySize = 0;
}

void DisableModifiersLogic(in String reason) {
  // Log($"Stopped because {reason}");
  StopModifier();
  stopReason = reason;
  state = State.NOT_STARTED;
}

void EnableModifiersLogic() {
  // Log("Started");
  stopReason = '';
  state = State.WAITING;
}

void SetModifier(in String modifier) {
  currentModifier = allModifiers[allModifiers.Map((i) => i.name).IndexOf(modifier)];
  // Log($'Setting modifier {currentModifier.name}');
}

void PreloadModifier() "Preload Modifier" {
  // Log($'Preloading modifier {currentModifier.name}');
  currentModifier.Preload();
}

void StartModifier() "Start Modifier" {
  // Log($'Starting modifier {currentModifier.name}');
  currentModifier.Enable();

  if(currentModifier.notification) 
    BigMessage(AllPlayers(), currentModifier.name);

  modifierDurationLeft = currentModifier.duration;

  if(currentModifier.canDurationBeExtended || modifierDurationModifier < 1) {
    modifierDurationLeft *= modifierDurationModifier;
  }

  modifierDurationTotal = modifierDurationLeft;
  state = State.MODIFIER_STARTED;
}

void StopModifier(Boolean addToHistory = true) "Stop Modifier" {
  if(addToHistory) {
    modifierHistory = modifierHistory.Append(currentModifier.name);
    
    if(modifierHistory.Length > modifierHistorySize)
      modifierHistory = modifierHistory.Slice(modifierHistory.Length - modifierHistorySize, modifierHistorySize);
  }

  // Log($'Disabling modifier {currentModifier.name}');

  currentModifier.Disable();
  modifierDurationLeft = 0;
  DestroyAllPlayersEffects();
  state = State.WAITING;
}

rule: 'Wait for modifier to end'
if(state == State.MODIFIER_STARTED)
{
  ChaseVariableOverTime(modifierDurationLeft, 0, modifierDurationLeft * currentModifier.slowMotionSpeed / 100, TimeChaseReevaluation.None);
  WaitForeverUntil(modifierDurationLeft <= 0);

  AbortIfConditionIsFalse();

  StopModifier();
}

rule: 'Start modifier logic if game is in progress'
if(IsGameInProgress() || CurrentGameMode() == GameMode.Skirmish)
{
  EnableModifiersLogic();
}

rule: 'Stop modifier logic if In Between Rounds'
if(IsBetweenRounds() && !IsMatchComplete())
{
  DisableModifiersLogic("Match in between rounds");
}

rule: 'Stop modifier logic if In Between Rounds or game is over'
if(IsMatchComplete())
{
  DisableModifiersLogic("Match ended");
}

rule: 'Status'
if(diagnosticsEnabled)
{
  CreateDiagnosticText($"Server Load: {ServerLoad()}%", ServerLoad() > 80, ServerLoad() > 100);
  CreateDiagnosticText($"Server Load Peak: {ServerLoadPeak()}%", ServerLoadPeak() > 80, ServerLoadPeak() > 100);
  CreateDiagnosticText($"Text count: {TextCount()}/128", TextCount() > 96, TextCount() > 112);
  CreateDiagnosticText($"Entity count: {EntityCount()}/128", EntityCount() > 96, EntityCount() > 112);
  // CreateDiagnosticText($"Entity count: {EntityCount()}/256", EntityCount() > 192, EntityCount() > 224);
}
