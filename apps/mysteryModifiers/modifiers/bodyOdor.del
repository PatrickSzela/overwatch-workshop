import '../modifier.del';
import '../effects.del';

String BODY_ODOR_NAME: 'Body Odor';
Number BODY_ODOR_RADIUS: 5;

playervar Boolean bodyOdorEnabled = false;
playervar Any bodyOdorDotId;

Modifier bodyOdor: {
  name: BODY_ODOR_NAME,
  notification: BODY_ODOR_NAME,
  icon: AbilityIconString(Hero.Reaper, Button.Ability1),
  duration: 10, 
  enabled: SettingToggle(BODY_ODOR_NAME),
  preload: () => {
    foreach(Player player in AllPlayers()) {
      CreatePlayerEffect(player, Effect.Cloud, 1, CustomColor(78, 168, 9, 127), false);
      CreatePlayerEffect(player, Effect.Ring, BODY_ODOR_RADIUS, CustomColor(78, 168, 9, 127));
      CreatePlayerEffect(player, Effect.BadAuraSound, 100);

      Wait();
    }
  },
  enable: () => {
    foreach(Player player in AllPlayers()) {
      player.bodyOdorEnabled = true;
    }
  },
  disable: () => {
    foreach(Player player in AllPlayers()) {
      DestroyPlayerEffects(player);
      player.bodyOdorEnabled = false;
    }
  },
  ..MODIFIER_BASE
};

rule: '[Body Odor] Deal damage to nearby players'
Event.OngoingPlayer
if(bodyOdorEnabled && IsAlive(EventPlayer()))
{
  Player[] _playersNearby: PlayersWithinRadius(EventPlayer().Position(), BODY_ODOR_RADIUS, Team.All, RadiusLOS.SurfacesAndAllBarriers).FilteredArray((player) => player != EventPlayer());
  Player[] playersNearby = _playersNearby;

  bodyOdorDotId = StartDamageOverTime(playersNearby, EventPlayer(), 999, 20);

  WaitUntil(_playersNearby != playersNearby || !bodyOdorEnabled || !IsAlive(EventPlayer()), 999);
  
  StopDamageOverTime(bodyOdorDotId);
  LoopIfConditionIsTrue();
}
