import '../modifier.del';
import '../variables.del';
import '../duplicate.del';
import '../cooldownResourceCharge.del';

playervar Boolean randomHeroEnabled = false;
globalvar Hero randomHeroCache;

String RANDOM_HERO_NAME: 'Random Hero';

Modifier randomHero: {
  name: RANDOM_HERO_NAME,
  // we create a custom message in `enable()`
  notification: "",
  icon: AbilityIconString(Hero.Echo, Button.Ultimate),
  duration: 15,
  enabled: SettingToggle(RANDOM_HERO_NAME),
  preload: () => {    
    randomHeroCache = RandomValueInArray(AllHeroes() - AllPlayers().Map((i) => i.Hero()));
    foreach(Player player in AllPlayers()) {
      PreloadDuplicate(player, randomHeroCache, true, true);
    }
  },
  enable: () => {    
    BigMessage(AllPlayers(), $"{randomHero.icon}â€‹ Duplicating: {randomHeroCache}");

    foreach(Player player in AllPlayers()) {
      player.randomHeroEnabled = true;
      StartDuplicate(player);
    }
  },
  disable: () => {    
    foreach(Player player in AllPlayers()) {
      player.randomHeroEnabled = false;
      StopDuplicate(player);
    }
  },
};

rule: '[Random Hero] Speed up Ultimate Charge'
Event.OngoingPlayer
if(randomHeroEnabled && duplicationState == DuplicateState.ENABLED)
{
  SpeedUpUltimateCharge(EventPlayer(), randomHeroEnabled, 5);
}
