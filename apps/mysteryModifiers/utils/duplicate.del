import '../variables.del';
import '../utils/effects.del';
import '../../../libs/utils/button.disallowAll.del';
import '../../../libs/utils/button.allowAll.del';
import '../../../libs/utils/helpers.del';

// TODO: move to lib?

enum DuplicateState {
  DISABLED,
  LOADING,
  FROZEN,
  FROZEN_READY,
  ENABLED
}

single struct DuplicateData {
  public Boolean echoEffect;
  public Boolean freeze;
  public Boolean restoreHealth;
  public Boolean resetUltOnStart;
  public Hero hero;

  static public DuplicateData New(in Hero hero, in Boolean echoEffect, in Boolean freeze, in Boolean resetUltOnStart, in Boolean restoreHealth): {
    hero: hero, echoEffect: echoEffect, freeze: freeze, resetUltOnStart: resetUltOnStart, restoreHealth: restoreHealth
  };
}

playervar DuplicateData duplicationData;
playervar DuplicateState duplicationState = DuplicateState.DISABLED;

Boolean IsDuplicating(): duplicationState == DuplicateState.ENABLED;
Boolean IsDuplicatingFrozen(): duplicationState >= DuplicateState.FROZEN;
Boolean IsDuplicatingFrozenReady(): duplicationState >= DuplicateState.FROZEN_READY;

void PreloadDuplicate(in Player player = EventPlayer(), in Hero hero, in Boolean echoEffect = true, in Boolean freeze = true, in Boolean resetUltOnStart = true) {
  // PreloadHero(player, hero);
  
  player.duplicationData = DuplicateData.New(hero, echoEffect, freeze, resetUltOnStart, false);

  WaitBeforePreloading(2);

  if(echoEffect) {
    CreatePlayerEffect(player, Effect.EchoCloningEffect, 1);
    MinWait();
    CreatePlayerEffect(player, Effect.EchoCloningSound, 100);
  }
}

void StartDuplicate(in Player player = EventPlayer()) {
  player.playerSnapshot = PlayerSnapshot.New(player);

  FreezeInAir(player);

  // respawn hero in case we're swapping to the same hero
  if(player.duplicationData.hero == player.Hero())
    ForcePlayerHero(player, (AllHeroes() - player.Hero()).Random());

  ForcePlayerHero(player, player.duplicationData.hero);
  player.duplicationState = DuplicateState.LOADING;
}

void StopDuplicate(in Player player = EventPlayer(), in Boolean restoreHealth = true) {
  player.duplicationData.restoreHealth = restoreHealth;
  player.duplicationState = DuplicateState.DISABLED;
}

rule: '[Duplicate] Waiting until hero is switched'
Event.OngoingPlayer
if(duplicationState == DuplicateState.LOADING)
{
  WaitUntil(HeroOf() == duplicationData.hero, 0.25);

  // duplication failed - workaround for AI bots
  if(HeroOf() != duplicationData.hero) {
    duplicationState = DuplicateState.DISABLED;
    StopForcingHero();
    DestroyPlayerEffects();
    Unfreeze();
    return;
  }

  // some heroes spawn with some of their abilities being on cooldown, like Wrecking Ball and his Grappling Claw
  foreach(Button button in allButtons) {
    SetAbilityCooldown(EventPlayer(), button, 0);
  }

  // workaround for small portion of ult charge being preserved on hero swap
  if(duplicationData.resetUltOnStart)
    SetUltimateCharge(EventPlayer(), 0);

  if(duplicationData.freeze) {
    duplicationState = DuplicateState.FROZEN;
  } else {
    duplicationState = DuplicateState.ENABLED;
    Unfreeze();
  }
}

rule: '[Duplicate] Freeze in the air when switching'
Event.OngoingPlayer
if(duplicationState == DuplicateState.FROZEN)
{
  // FreezeInAir(EventPlayer());
  Wait(0.25);
  duplicationState = DuplicateState.FROZEN_READY;
  Wait(0.25);
  Unfreeze();

  duplicationState = DuplicateState.ENABLED;
}

void FreezeInAir(in Player player = EventPlayer()) {
  CancelPrimaryAction(player);
  SetGravity(player, 0);
  SetMoveSpeed(player, 0);
  SetAimSpeed(player, 0);
  ApplyImpulse(player, Vector.Zero, 0, Relative.ToPlayer, ContraryMotion.Cancel);
  DisallowAllButtons(player);
}

void Unfreeze(in Player player = EventPlayer()) {
  SetGravity(player, 100);
  SetMoveSpeed(player, 100);
  SetAimSpeed(player, 100);
  ApplyImpulse(player, Vector.Zero, 0, Relative.ToPlayer, ContraryMotion.Cancel);
  AllowAllButtons(player);
}

rule: '[Duplicate] Delay StopDuplicate until player respawns'
Event.OngoingPlayer
if(duplicationState > DuplicateState.LOADING)
{
  WaitForeverUntil(duplicationState == DuplicateState.DISABLED && IsAlive());

  FreezeInAir();

  // let other rules execute first
  if(duplicationData.freeze) 
    MinWait();

  playerSnapshot.RestoreHero(true);
  playerSnapshot.RestoreUltimateCharge();
  playerSnapshot.RestoreWeapon();

  if(duplicationData.restoreHealth) 
    playerSnapshot.RestoreHealth();

  DestroyPlayerEffects();

  Wait(0.1);
  Unfreeze();
}
