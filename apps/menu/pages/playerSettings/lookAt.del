import './_teleportLookAtHelper.del';
import '../../_variables.del';

String PAGE_LOOK_AT_ID: 'lookAt';
String PAGE_LOOK_AT_NAME: 'Look At';

rule: 'Player Settings/Look At' 50
Event.OngoingPlayer
if(menuState.pageId == PAGE_LOOK_AT_ID)
{
  pageLookAtProps = PageTeleportLookAtProps.BASE;

  menuState.CreatePage(
    title: PAGE_LOOK_AT_NAME, 
    items: PageTeleportLookAtItems(
      id: PAGE_LOOK_AT_ID, 
      name: PAGE_LOOK_AT_NAME, 
      isLookAt: true
    )
  );
}

rule: 'Player Settings/Teleport and Look At: Create Sphere' 50
Event.OngoingPlayer
if(menuState.isOpen)
if(menuState.pageId == PAGE_LOOK_AT_ID)
if(menuState.isFocused)
{
  foreach(Player p! in selectedPlayersWithoutSelf) {
    pickPosition.CreateAdditionalSphere(
      color: Color.Green,
      position: PageTeleportLookAtRayCast(EvaluateOnce(p)),
      text: $"{EvaluateOnce(p).playerName}'s look position:\n{PickPosition.RayCast(EvaluateOnce(p))}",
      lineEnd: EvaluateOnce(p).EyePosition()
    );

    Wait(0.05);
  }

  WaitForeverUntil(menuState.pageId != PAGE_LOOK_AT_ID || !menuState.isOpen || !menuState.isFocused);

  pickPosition.DestroyAdditionalSpheres();
}


rule: 'Player Settings/Look At: Start/Stop looking at'
Event.OngoingPlayer
{
  WaitForeverUntil(pageLookAtSettings != EvaluateOnce(pageLookAtSettings));

  pageLookAtSettings.forceRefresh = false;

  StopFacing(EventPlayer());

  Vector pos: TeleportLookAtPosition(pageLookAtSettings.choice, pageLookAtSettings.value, true);

  if(pageLookAtSettings.variant == PageTeleportLookAtVariant.ONCE) {
    SetFacing(EventPlayer(), GetDirectionFromPlayerEyes(EventPlayer(), pos), Relative.ToWorld);
  } else if(pageLookAtSettings.variant == PageTeleportLookAtVariant.OVER_TIME) {
    StartFacing(EventPlayer(), GetDirectionFromPlayerEyes(EventPlayer(), pos), 500, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
  }

  Loop();
}
