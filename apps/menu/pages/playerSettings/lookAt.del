import '../../../../libs/menu/components/carousel.del';
import '../../../../libs/utils/string.formatters.del';
import '../../../../libs/utils/player.sortedAllPlayers.del';
import '../../_variables.del';

String PAGE_LOOK_AT_ID: 'lookAt';
String PAGE_LOOK_AT_NAME: 'Look At';

String PAGE_LOOK_AT_POSITION_ID: PAGE_LOOK_AT_ID + 'position';
String PAGE_LOOK_AT_POSITION_NAME: 'Position';
String PAGE_LOOK_AT_OBJECTIVE_ID: PAGE_LOOK_AT_ID + 'objective';
String PAGE_LOOK_AT_OBJECTIVE_NAME: 'Objective';
String PAGE_LOOK_AT_PAYLOAD_ID: PAGE_LOOK_AT_ID + 'payload';
String PAGE_LOOK_AT_PAYLOAD_NAME: 'Payload';
String PAGE_LOOK_AT_PLAYER_ID: PAGE_LOOK_AT_ID + 'player';
String PAGE_LOOK_AT_PLAYER_NAME: 'Player';
String PAGE_LOOK_AT_APPLY_ID: PAGE_LOOK_AT_ID + 'apply';
String PAGE_LOOK_AT_APPLY_NAME: 'Apply';

// TODO: look at looking position of player

Vector GetDirectionFromPlayerEyes(Player player, Vector vector): 
  player.EyePosition().DirectionTowards(vector);

Component[] PageLookAtItems() {
  Component position = new Component(PAGE_LOOK_AT_POSITION_NAME);
  position.AddDescription(Description.New(PickPosition.CHANGE_DISTANCE_DESCRIPTION(BUTTON_INCREASE, BUTTON_DECREASE)));
  position.onEnter = (it) => {
    pickPosition.Enable(Color.Red);
  };
  position.onLeave = (it) => {
    pickPosition.Disable();
  };
  position.onButtonDown = (button, it) => {
    if(buttonsHeld == [BUTTON_INCREASE])
      pickPosition.StartChangingRaycaseDistance(0.1);
    else if(buttonsHeld == [BUTTON_DECREASE])
      pickPosition.StartChangingRaycaseDistance(-0.1);
  };
  position.onButtonUp = (button, it) => {
    pickPosition.StopChangingRaycaseDistance();
  };
  position.SetPrimaryAction('Apply once', (it) => {
    PageLookAtApplyHelper(false, pickPosition.position);
  });
  position.SetSecondaryAction('Apply continuously', (it) => {
    PageLookAtApplyHelper(true, EvaluateOnce(pickPosition.position));
  });

  Carousel objective = new Carousel(
    text: PAGE_LOOK_AT_OBJECTIVE_NAME,
    options: [-1, 0, 1, 2, 3, 4],
    defaultValue: -1
  );
  objective.valueFormatter = (it) => ObjectiveFormatter(it.value);
  objective.SetPrimaryAction('Apply once', (it) => {
    PageLookAtApplyHelper(false, ObjectivePosition((<Carousel>it).value == -1 ? ObjectiveIndex() : (<Carousel>it).value));
  });
  objective.SetSecondaryAction('Apply continuously', (it) => {
    PageLookAtApplyHelper(true, ObjectivePosition(EvaluateOnce((<Carousel>it).value) == -1 ? ObjectiveIndex() : EvaluateOnce((<Carousel>it).value)));
  });

  Component payload = new Component(PAGE_LOOK_AT_PAYLOAD_NAME);
  payload.SetPrimaryAction('Apply once', (it) => {
    PageLookAtApplyHelper(false, PayloadPosition());
  });
  payload.SetSecondaryAction('Apply continuously', (it) => {
    PageLookAtApplyHelper(true, PayloadPosition());
  });

  Carousel player = new Carousel(
    text: PAGE_LOOK_AT_PLAYER_NAME,
    options: sortedPlayers
  );
  player.valueFormatter = (it) => PlayerWithHeroIconTeamSlotFormatter(it.value);
  player.SetPrimaryAction('Apply once', (it) => {
    PageLookAtApplyHelper(false, EyePosition((<Carousel>it).value));
  });
  player.SetSecondaryAction('Apply continuously', (it) => {
    PageLookAtApplyHelper(true, EyePosition(EvaluateOnce((<Carousel>it).value)));
  });

  return [position, objective, payload, player];
}

rule: 'Player Settings/Look At'
Event.OngoingPlayer
if(menuState.pageId == PAGE_LOOK_AT_ID)
{
  menuState.CreatePage(
    title: PAGE_LOOK_AT_NAME, 
    items: PageLookAtItems()
  );
}

rule: 'Player Settings/Look At: Create Sphere'
Event.OngoingPlayer
if(menuState.isOpen)
if(menuState.pageId == PAGE_LOOK_AT_ID)
{
  foreach(Player p! in AllPlayers()) {
    if(p == EventPlayer()) continue;

    pickPosition.CreateAdditionalSphere(
      color: Color.Green,
      position: PickPosition.RayCast(EvaluateOnce(p)),
      text: $"{EvaluateOnce(p)}'s look position:\n{PickPosition.RayCast(EvaluateOnce(p))}",
      lineEnd: EvaluateOnce(p).EyePosition()
    );

    Wait(0.05);
  }

  WaitUntil(menuState.pageId != PAGE_LOOK_AT_ID || !menuState.isOpen, 99999);

  pickPosition.DestroyAdditionalSpheres();
}

void PageLookAtApplyHelper(in Boolean continuously!, in Vector position!) {
  foreach(Player p! in selectedPlayers) {
    StopFacing(p);

    if(!continuously) {
      SetFacing(p, GetDirectionFromPlayerEyes(p, position), Relative.ToWorld);
    } else {
      // FIXME: figure out why this breaks after bot's death
      StartFacing(p, GetDirectionFromPlayerEyes(EvaluateOnce(p), position), 200, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
    }
  }
}
