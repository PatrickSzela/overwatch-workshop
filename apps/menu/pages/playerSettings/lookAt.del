import '../../../../libs/menu/components/radio.del';
import '../../../../libs/menu/components/carousel.del';
import '../../../../libs/utils/string.formatters.del';
import '../../../../libs/utils/player.sortedAllPlayers.del';
import '../../_variables.del';

String PAGE_LOOK_AT_ID: 'lookAt';
String PAGE_LOOK_AT_NAME: 'Look At';

String PAGE_LOOK_AT_POSITION_ID: PAGE_LOOK_AT_ID + 'position';
String PAGE_LOOK_AT_POSITION_NAME: 'Position';
String PAGE_LOOK_AT_OBJECTIVE_ID: PAGE_LOOK_AT_ID + 'objective';
String PAGE_LOOK_AT_OBJECTIVE_NAME: 'Objective';
String PAGE_LOOK_AT_PAYLOAD_ID: PAGE_LOOK_AT_ID + 'payload';
String PAGE_LOOK_AT_PAYLOAD_NAME: 'Payload';
String PAGE_LOOK_AT_PLAYER_ID: PAGE_LOOK_AT_ID + 'player';
String PAGE_LOOK_AT_PLAYER_NAME: 'Player';
String PAGE_LOOK_AT_APPLY_ID: PAGE_LOOK_AT_ID + 'apply';
String PAGE_LOOK_AT_APPLY_NAME: 'Apply';

// TODO: look at looking position of player

enum PageLookAtChoice {
  POSITION = 1,
  OBJECTIVE,
  PAYLOAD,
  PLAYER
}

enum PageLookAtVariant {
  ONCE = 'once',
  OVER_TIME = 'over time',
  STOP = 'stop'
}

single struct PageLookAtProps {
  public PageLookAtChoice choice;
  public Any value;
  public PageLookAtVariant variant;
  public Boolean forceRefresh;

  public static PageLookAtProps BASE:
    {choice: PageLookAtChoice.POSITION, value: Vector.Zero, variant: PageLookAtVariant.STOP, forceRefresh: false};
}

playervar PageLookAtProps pageLookAtProps = PageLookAtProps.BASE;
playervar PageLookAtProps pageLookAtPlayerSettings = PageLookAtProps.BASE;

Vector GetDirectionFromPlayerEyes(Player player, Vector vector): 
  player.EyePosition().DirectionTowards(vector);

Component[] PageLookAtItems() {
  // position
  ComponentWithValue position = new ComponentWithValue(PAGE_LOOK_AT_POSITION_NAME, Vector.Zero);
  position.AddDescription(Description.New(PickPosition.CHANGE_DISTANCE_DESCRIPTION(BUTTON_INCREASE, BUTTON_DECREASE)));
  position.onEnter = (it) => {
    pickPosition.Enable(Color.Red);
  };
  position.onLeave = (it) => {
    pickPosition.Disable();
  };
  position.onButtonDown = (button, it) => {
    if(buttonsHeld == [BUTTON_INCREASE])
      pickPosition.StartChangingRaycaseDistance(0.1);
    else if(buttonsHeld == [BUTTON_DECREASE])
      pickPosition.StartChangingRaycaseDistance(-0.1);
  };
  position.onButtonUp = (button, it) => {
    pickPosition.StopChangingRaycaseDistance();
  };

  Radio positionRadio = new Radio(menuState, PAGE_LOOK_AT_POSITION_NAME, PAGE_LOOK_AT_NAME);
  positionRadio.child = position;
  positionRadio.onPrimaryAction = (checked, it) => {
    position.SetValue(pickPosition.position);

    pageLookAtProps = { choice: PageLookAtChoice.POSITION, value: position.value, ..pageLookAtProps };
    selectedPlayers.pageLookAtPlayerSettings = pageLookAtProps;
  };

  // objective
  Carousel objective = new Carousel(
    text: PAGE_LOOK_AT_OBJECTIVE_NAME,
    options: [-1, 0, 1, 2, 3, 4],
    defaultValue: -1
  );
  objective.valueFormatter = (it) => ObjectiveFormatter(it.value);

  Radio objectiveRadio = new Radio(menuState, PAGE_LOOK_AT_OBJECTIVE_NAME, PAGE_LOOK_AT_NAME);
  objectiveRadio.child = objective;
  objectiveRadio.onChange = (checked, it) => {
    pageLookAtProps = { choice: PageLookAtChoice.OBJECTIVE, value: objective.value, ..pageLookAtProps };
    selectedPlayers.pageLookAtPlayerSettings = pageLookAtProps;
  };

  // payload
  Radio payloadRadio = new Radio(menuState, PAGE_LOOK_AT_PAYLOAD_NAME, PAGE_LOOK_AT_NAME);
  payloadRadio.onChange = (checked, it) => {
    pageLookAtProps = { choice: PageLookAtChoice.PAYLOAD, ..pageLookAtProps };
    selectedPlayers.pageLookAtPlayerSettings = pageLookAtProps;
  };

  // player
  Carousel player = new Carousel(
    text: PAGE_LOOK_AT_PLAYER_NAME,
    options: sortedPlayers
  );
  player.valueFormatter = (it) => PlayerWithHeroIconTeamSlotFormatter(it.value);

  Radio playerRadio = new Radio(menuState, PAGE_LOOK_AT_PLAYER_NAME, PAGE_LOOK_AT_NAME);
  playerRadio.child = player;
  playerRadio.onChange = (it) => {
    pageLookAtProps = { choice: PageLookAtChoice.PLAYER, value: player.value, ..pageLookAtProps };
    selectedPlayers.pageLookAtPlayerSettings = pageLookAtProps;
  };

  // apply
  Carousel apply = new Carousel('Apply', [PageLookAtVariant.ONCE, PageLookAtVariant.OVER_TIME, PageLookAtVariant.STOP]);
  apply.SetPrimaryAction('Apply', (it) => {
    pageLookAtProps = { variant: (<Carousel>it).value, forceRefresh: true, ..pageLookAtProps };
    selectedPlayers.pageLookAtPlayerSettings = pageLookAtProps;
  });

  return [positionRadio, objectiveRadio, payloadRadio, playerRadio, new Text(), apply];
}

rule: 'Player Settings/Look At'
Event.OngoingPlayer
if(menuState.pageId == PAGE_LOOK_AT_ID)
{
  menuState.CreatePage(
    title: PAGE_LOOK_AT_NAME, 
    items: PageLookAtItems()
  );
}

rule: 'Player Settings/Look At: Create Sphere'
Event.OngoingPlayer
if(menuState.isOpen)
if(menuState.pageId == PAGE_LOOK_AT_ID)
{
  foreach(Player p! in AllPlayers()) {
    if(p == EventPlayer()) continue;

    pickPosition.CreateAdditionalSphere(
      color: Color.Green,
      position: PickPosition.RayCast(EvaluateOnce(p)),
      text: $"{EvaluateOnce(p)}'s look position:\n{PickPosition.RayCast(EvaluateOnce(p))}",
      lineEnd: EvaluateOnce(p).EyePosition()
    );

    Wait(0.05);
  }

  WaitUntil(menuState.pageId != PAGE_LOOK_AT_ID || !menuState.isOpen, 99999);

  pickPosition.DestroyAdditionalSpheres();
}

rule: 'My Rule'
Event.OngoingPlayer
{
  WaitUntil(pageLookAtPlayerSettings != EvaluateOnce(pageLookAtPlayerSettings), 99999);

  pageLookAtPlayerSettings.forceRefresh = false;

  StopFacing(EventPlayer());

  // doesn't compile :)
  // Vector pos: 
  //   pageLookAtChoice == PageLookAtChoice.POSITION ? pageLookAtValue :
  //   pageLookAtChoice == PageLookAtChoice.OBJECTIVE ? ObjectivePosition(pageLookAtValue == -1 ? ObjectiveIndex() : pageLookAtValue) :
  //   pageLookAtChoice == PageLookAtChoice.PAYLOAD ? PayloadPosition() :
  //   EyePosition(pageLookAtValue);

  if(pageLookAtPlayerSettings.variant == PageLookAtVariant.ONCE) {
    SetFacing(EventPlayer(), GetDirectionFromPlayerEyes(EventPlayer(), 
      pageLookAtPlayerSettings.choice == PageLookAtChoice.POSITION ? pageLookAtPlayerSettings.value :
      pageLookAtPlayerSettings.choice == PageLookAtChoice.OBJECTIVE ? ObjectivePosition(pageLookAtPlayerSettings.value == -1 ? ObjectiveIndex() : pageLookAtPlayerSettings.value) :
      pageLookAtPlayerSettings.choice == PageLookAtChoice.PAYLOAD ? PayloadPosition() :
      EyePosition(pageLookAtPlayerSettings.value)
    ), Relative.ToWorld);
  } else if(pageLookAtPlayerSettings.variant == PageLookAtVariant.OVER_TIME) {
    StartFacing(EventPlayer(), GetDirectionFromPlayerEyes(EventPlayer(), 
      pageLookAtPlayerSettings.choice == PageLookAtChoice.POSITION ? pageLookAtPlayerSettings.value :
      pageLookAtPlayerSettings.choice == PageLookAtChoice.OBJECTIVE ? ObjectivePosition(pageLookAtPlayerSettings.value == -1 ? ObjectiveIndex() : pageLookAtPlayerSettings.value) :
      pageLookAtPlayerSettings.choice == PageLookAtChoice.PAYLOAD ? PayloadPosition() :
      EyePosition(pageLookAtPlayerSettings.value)
    ), 200, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
  }

  Loop();
}
