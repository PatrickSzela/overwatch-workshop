import '../../../../libs/menu/components/toggle.del';
import '../../_variables.del';

String PAGE_STATUS_ID: 'status';
String PAGE_STATUS_NAME: 'Status';

String PAGE_STATUS_DESCRIPTION_WARNING_NAVIGATION: "Selected players will not be able to navigate the menu";

// all this mess because it's not possible to store Status in a variable...

globalvar String[] allStatuses = [
  'Asleep',
  'Burning',
  'Frozen',
  'Hacked',
  'Invincible',
  'Knocked Down',
  'Phased Out',
  'Rooted',
  'Stunned',
  'Unkillable'
];

globalvar String[] statusesDisablingNavigation = [
  'Asleep',
  'Frozen',
  'Knocked Down',
  'Phased Out'
];

// since HasStatus doesn't work properly in some statuses client side, gotta workaround that
playervar String[] pageStatusAppliedStatuses = [];
playervar String pageStatusToApply;

Component[] PageStatusItems() {
  Toggle[] list = [];

  foreach(String name! in allStatuses) {
    list += new Toggle(
      text: name,
      defaultChecked: selectedPlayers[0].pageStatusAppliedStatuses.Contains(name)
    );

    list.Last.id = name;
    list.Last.onChange = (value, it) => {
      // since it's not possible to pass actual Status here (because it can't be stored in variable), gotta workaround that
      pageStatusToApply = name;
    };

    if(statusesDisablingNavigation.Contains(name))
      list.Last.AddDescription(Description.New(PAGE_STATUS_DESCRIPTION_WARNING_NAVIGATION, COLOR_WARNING, order: 10));
  }

  return list;
}

rule: 'Player Settings/Status' 50
Event.OngoingPlayer
if(menuState.pageId == PAGE_STATUS_ID)
{
  menuState.CreatePage(
    title: PAGE_STATUS_NAME, 
    items: PageStatusItems()
  );

  playerInfoProps.Enable(playerInfoProps);
  playerInfoProps.EnableStatuses(playerInfoProps);

  WaitUntil(menuState.pageId != PAGE_STATUS_ID, 99999);

  playerInfoProps.Disable(playerInfoProps);
  playerInfoProps.DisableStatuses(playerInfoProps);
}

void PageStatusAppliedStatusesInfo(Status status, in String name) {
  pageStatusAppliedStatuses += name;
  WaitUntil(!HasStatus(EventPlayer(), status), 99999);
  ModifyVariable(pageStatusAppliedStatuses, Operation.RemoveFromArrayByValue, name);
}

void PageStatusSetStatus(Status status) {
  if(HasStatus(selectedPlayers[0], status)) {
    ClearStatus(selectedPlayers, status);
  } else {
    SetStatus(selectedPlayers, EventPlayer(), status, 99999);
  }
}

rule: 'Apply status'
Event.OngoingPlayer
if(pageStatusToApply)
{
  if(     pageStatusToApply == allStatuses[0]) PageStatusSetStatus(Status.Asleep);
  else if(pageStatusToApply == allStatuses[1]) PageStatusSetStatus(Status.Burning);
  else if(pageStatusToApply == allStatuses[2]) PageStatusSetStatus(Status.Frozen);
  else if(pageStatusToApply == allStatuses[3]) PageStatusSetStatus(Status.Hacked);
  else if(pageStatusToApply == allStatuses[4]) PageStatusSetStatus(Status.Invincible);
  else if(pageStatusToApply == allStatuses[5]) PageStatusSetStatus(Status.KnockedDown);
  else if(pageStatusToApply == allStatuses[6]) PageStatusSetStatus(Status.PhasedOut);
  else if(pageStatusToApply == allStatuses[7]) PageStatusSetStatus(Status.Rooted);
  else if(pageStatusToApply == allStatuses[8]) PageStatusSetStatus(Status.Stunned);
  else if(pageStatusToApply == allStatuses[9]) PageStatusSetStatus(Status.Unkillable);

  pageStatusToApply = '';
}

rule: 'Update Status toggle on applied statuses change' 50
Event.OngoingPlayer
if(menuState.isOpen)
if(menuState.pageId == PAGE_STATUS_ID)
{
  WaitUntil(
    selectedPlayers[0].pageStatusAppliedStatuses != EvaluateOnce(selectedPlayers[0].pageStatusAppliedStatuses) ||
    !menuState.isOpen ||
    menuState.pageId != PAGE_STATUS_ID,
  99999);

  AbortIfConditionIsFalse();

  foreach(Toggle toggle! in menuState.items) {
    Boolean statusApplied! = selectedPlayers[0].pageStatusAppliedStatuses.Contains(toggle.id);

    if(toggle.value != statusApplied) {
      // don't trigger the onChange callback
      toggle.value = statusApplied;
      toggle.MarkToRerender();
    }
  }
  
  menuState.MarkToRerender();

  LoopIfConditionIsTrue();
}

rule: 'Player Settings/Status/Asleep: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Asleep))
{
  PageStatusAppliedStatusesInfo(Status.Asleep, allStatuses[0]);
}

rule: 'Player Settings/Status/Burning: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Burning))
{
  PageStatusAppliedStatusesInfo(Status.Burning, allStatuses[1]);
}

rule: 'Player Settings/Status/Frozen: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Frozen))
{
  PageStatusAppliedStatusesInfo(Status.Frozen, allStatuses[2]);
}

rule: 'Player Settings/Status/Hacked: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Hacked))
{
  PageStatusAppliedStatusesInfo(Status.Hacked, allStatuses[3]);
}

rule: 'Player Settings/Status/Invincible: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Invincible))
{
  PageStatusAppliedStatusesInfo(Status.Invincible, allStatuses[4]);
}

rule: 'Player Settings/Status/Knocked Down: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.KnockedDown))
{
  PageStatusAppliedStatusesInfo(Status.KnockedDown, allStatuses[5]);
}

rule: 'Player Settings/Status/Phased Out: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.PhasedOut))
{
  PageStatusAppliedStatusesInfo(Status.PhasedOut, allStatuses[6]);
}

rule: 'Player Settings/Status/Rooted: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Rooted))
{
  PageStatusAppliedStatusesInfo(Status.Rooted, allStatuses[7]);
}

rule: 'Player Settings/Status/Stunned: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Stunned))
{
  PageStatusAppliedStatusesInfo(Status.Stunned, allStatuses[8]);
}

rule: 'Player Settings/Status/Unkillable: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Unkillable))
{
  PageStatusAppliedStatusesInfo(Status.Unkillable, allStatuses[9]);
}
