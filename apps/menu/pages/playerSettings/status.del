import '../../_variables.del';

String PAGE_STATUS_ID: 'status';
String PAGE_STATUS_NAME: 'Status';
Button PAGE_STATUS_BUTTON_TOGGLE: Button.Ability2;

String[] PAGE_STATUS_DESCRIPTION: [
  $"Press {ButtonFormatterSingle(PAGE_STATUS_BUTTON_TOGGLE)}â€‹ to toggle",
  'All Players have a list of currently active statuses above them'
];
String PAGE_STATUS_DESCRIPTION_WARNING_NAVIGATION: "Selected players will not be able to navigate the menu";

// since HasStatus doesn't work properly in some statuses, gotta workaround that
playervar String[] pageStatusAppliedStatuses = [];

void PageStatusItemsHelper(ref Component[] list, in String id, in String text, in Boolean navigationWarning = false, in Boolean brokenWarning = false) {
  list += new Component(text);
  list.Last.id = PAGE_STATUS_ID + id;
  if(navigationWarning)
    list.Last.AddDescription(PAGE_STATUS_DESCRIPTION_WARNING_NAVIGATION, Color.Orange, order: 10);
}

Component[] PageStatusItems() {
  Component[] list = [];
 
  PageStatusItemsHelper(list, 'Asleep', 'Asleep', true);
  PageStatusItemsHelper(list, 'Burning', 'Burning', false, true);
  PageStatusItemsHelper(list, 'Frozen', 'Frozen', true);
  PageStatusItemsHelper(list, 'Hacked', 'Hacked');
  PageStatusItemsHelper(list, 'Invincible', 'Invincible');
  PageStatusItemsHelper(list, 'KnockedDown', 'Knocked Down', true, true);
  PageStatusItemsHelper(list, 'PhasedOut', 'Phased Out');
  PageStatusItemsHelper(list, 'Rooted', 'Rooted', true, true);
  PageStatusItemsHelper(list, 'Stunned', 'Stunned', true);
  PageStatusItemsHelper(list, 'Unkillable', 'Unkillable', false, true);

  return list;
}

rule: 'Player Settings/Status'
Event.OngoingPlayer
if(menuState.pageId == PAGE_STATUS_ID)
{
  Description desc1: { text: PAGE_STATUS_DESCRIPTION[0], ..Description.BASE };
  Description desc2: { text: PAGE_STATUS_DESCRIPTION[1], color: Color.SkyBlue, ..Description.BASE };

  menuState.CreatePage(PAGE_STATUS_NAME, PageStatusItems(), [desc1, desc2]);
}

rule: 'Draw current statuses info above players'
Event.OngoingPlayer
if(menuState.isOpen)
if(menuState.pageId == PAGE_STATUS_ID)
{
  foreach(Player player in AllPlayers()) {
    Player pl: EvaluateOnce(player);

    playerText.Add(pl,
      (pl.pageStatusAppliedStatuses.Contains('Asleep') ? $'Asleep\n' : '') +
        (pl.pageStatusAppliedStatuses.Contains('Burning') ? $'Burning\n' : '') +
        (pl.pageStatusAppliedStatuses.Contains('Frozen') ? $'Frozen\n' : '') +
        (pl.pageStatusAppliedStatuses.Contains('Hacked') ? $'Hacked\n' : '') +
        (pl.pageStatusAppliedStatuses.Contains('Invincible') ? $'Invincible\n' : '') +
        (pl.pageStatusAppliedStatuses.Contains('KnockedDown') ? $'Knocked Down\n' : '') +
        (pl.pageStatusAppliedStatuses.Contains('PhasedOut') ? $'Phased Out\n' : '') +
        (pl.pageStatusAppliedStatuses.Contains('Rooted') ? $'Rooted\n' : '') +
        (pl.pageStatusAppliedStatuses.Contains('Stunned') ? $'Stunned\n' : '') +
        (pl.pageStatusAppliedStatuses.Contains('Unkillable') ? $'Unkillable\n' : '')
    );

    MinWait();
  }

  WaitUntil(menuState.pageId != PAGE_STATUS_ID || !menuState.isOpen, 99999);
  
  playerText.Remove();
}

void PageStatusAppliedStatusesInfo(Status status, in String name) {
  pageStatusAppliedStatuses += name;
  WaitUntil(!HasStatus(EventPlayer(), status), 99999);
  ModifyVariable(pageStatusAppliedStatuses, Operation.RemoveFromArrayByValue, name);
}

void PageStatusSetStatus(Status status, in String name) {
  if(HasStatus(selectedPlayers[0], status)) {
    ClearStatus(selectedPlayers, status);
  } else {
    SetStatus(selectedPlayers, EventPlayer(), status, 99999);
  }
}

rule: 'Player Settings/Status/Asleep: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Asleep))
{
  PageStatusAppliedStatusesInfo(Status.Asleep, "Asleep");
}

rule: 'Player Settings/Status/Asleep: On Button Down - Ability 2'
Event.OngoingPlayer
if(menuState.onButtonDown(PAGE_STATUS_ID + 'Asleep', PAGE_STATUS_BUTTON_TOGGLE))
{
  PageStatusSetStatus(Status.Asleep, 'Asleep');
}

rule: 'Player Settings/Status/Burning: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Burning))
{
  PageStatusAppliedStatusesInfo(Status.Burning, "Burning");
}

rule: 'Player Settings/Status/Burning: On Button Down - Ability 2'
Event.OngoingPlayer
if(menuState.onButtonDown(PAGE_STATUS_ID + 'Burning', PAGE_STATUS_BUTTON_TOGGLE))
{
  PageStatusSetStatus(Status.Burning, 'Burning');
}

rule: 'Player Settings/Status/Frozen: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Frozen))
{
  PageStatusAppliedStatusesInfo(Status.Frozen, "Frozen");
}

rule: 'Player Settings/Status/Frozen: On Button Down - Ability 2'
Event.OngoingPlayer
if(menuState.onButtonDown(PAGE_STATUS_ID + 'Frozen', PAGE_STATUS_BUTTON_TOGGLE))
{
  PageStatusSetStatus(Status.Frozen, 'Frozen');
}

rule: 'Player Settings/Status/Hacked: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Hacked))
{
  PageStatusAppliedStatusesInfo(Status.Hacked, "Hacked");
}

rule: 'Player Settings/Status/Hacked: On Button Down - Ability 2'
Event.OngoingPlayer
if(menuState.onButtonDown(PAGE_STATUS_ID + 'Hacked', PAGE_STATUS_BUTTON_TOGGLE))
{
  PageStatusSetStatus(Status.Hacked, 'Hacked');
}

rule: 'Player Settings/Status/Invincible: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Invincible))
{
  PageStatusAppliedStatusesInfo(Status.Invincible, "Invincible");
}

rule: 'Player Settings/Status/Invincible: On Button Down - Ability 2'
Event.OngoingPlayer
if(menuState.onButtonDown(PAGE_STATUS_ID + 'Invincible', PAGE_STATUS_BUTTON_TOGGLE))
{
  PageStatusSetStatus(Status.Invincible, 'Invincible');
}

rule: 'Player Settings/Status/Knocked Down: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.KnockedDown))
{
  PageStatusAppliedStatusesInfo(Status.KnockedDown, "KnockedDown");
}

rule: 'Player Settings/Status/Knocked Down: On Button Down - Ability 2'
Event.OngoingPlayer
if(menuState.onButtonDown(PAGE_STATUS_ID + 'KnockedDown', PAGE_STATUS_BUTTON_TOGGLE))
{
  PageStatusSetStatus(Status.KnockedDown, 'KnockedDown');
}

rule: 'Player Settings/Status/Phased Out: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.PhasedOut))
{
  PageStatusAppliedStatusesInfo(Status.PhasedOut, "PhasedOut");
}

rule: 'Player Settings/Status/Phased Out: On Button Down - Ability 2'
Event.OngoingPlayer
if(menuState.onButtonDown(PAGE_STATUS_ID + 'PhasedOut', PAGE_STATUS_BUTTON_TOGGLE))
{
  PageStatusSetStatus(Status.PhasedOut, 'PhasedOut');
}

rule: 'Player Settings/Status/Rooted: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Rooted))
{
  PageStatusAppliedStatusesInfo(Status.Rooted, "Rooted");
}

rule: 'Player Settings/Status/Rooted: On Button Down - Ability 2'
Event.OngoingPlayer
if(menuState.onButtonDown(PAGE_STATUS_ID + 'Rooted', PAGE_STATUS_BUTTON_TOGGLE))
{
  PageStatusSetStatus(Status.Rooted, 'Rooted');
}

rule: 'Player Settings/Status/Stunned: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Stunned))
{
  PageStatusAppliedStatusesInfo(Status.Stunned, "Stunned");
}

rule: 'Player Settings/Status/Stunned: On Button Down - Ability 2'
Event.OngoingPlayer
if(menuState.onButtonDown(PAGE_STATUS_ID + 'Stunned', PAGE_STATUS_BUTTON_TOGGLE))
{
  PageStatusSetStatus(Status.Stunned, 'Stunned');
}

rule: 'Player Settings/Status/Unkillable: Set Status Info'
Event.OngoingPlayer
if(HasStatus(EventPlayer(), Status.Unkillable))
{
  PageStatusAppliedStatusesInfo(Status.Unkillable, "Unkillable");
}

rule: 'Player Settings/Status/Unkillable: On Button Down - Ability 2'
Event.OngoingPlayer
if(menuState.onButtonDown(PAGE_STATUS_ID + 'Unkillable', PAGE_STATUS_BUTTON_TOGGLE))
{
  PageStatusSetStatus(Status.Unkillable, 'Unkillable');
}
