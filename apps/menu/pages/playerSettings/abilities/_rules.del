import './_index.del';


// infinite/no cooldowns
rule: 'Infinite Ammo'
Event.OngoingPlayer
if(pageAbilitiesInfiniteAmmo.IsTrueForAny((i) => i))
{
  for(Number i! = 0; i < pageAbilitiesInfiniteAmmo.Length; i++) {
    if(!pageAbilitiesInfiniteAmmo[i]) continue;
    Number clip! = allButtons[i] == Button.SecondaryFire ? 1 : 0;
    // to avoid weird bug with pauses between shots
    // SetMaxAmmo(EventPlayer(), clip, 1000);
    SetAmmo(EventPlayer(), clip, 1000);
    // SetAmmo(EventPlayer(), clip, MaxAmmo(EventPlayer(), clip) - 1);
  }

  Wait(0.1);

  WaitUntil(
    allButtons
      .FilteredArray((button, idx) => pageAbilitiesInfiniteAmmo[idx] && MaxAmmo(EventPlayer(), button == Button.SecondaryFire ? 1 : 0) > 0)
      .Map((button, i) => 
        Ammo(EventPlayer(), button == Button.SecondaryFire ? 1 : 0) < 
        //MaxAmmo(EventPlayer(), button == Button.SecondaryFire ? 1 : 0) - 1)
        2)
      .IsTrueForAny((i) => i), 
    99999);

  LoopIfConditionIsTrue();
}

rule: 'No Cooldown'
Event.OngoingPlayer
if(pageAbilitiesNoCooldown.IsTrueForAny((i) => i))
{
  for(Number i! = 0; i < pageAbilitiesNoCooldown.Length; i++) {
    if(!pageAbilitiesNoCooldown[i]) continue;
    SetAbilityCooldown(EventPlayer(), allButtons[i], 0);
  }

  Wait(0.1);

  WaitUntil(
    allButtons
      .FilteredArray((button, idx) => pageAbilitiesNoCooldown[idx])
      .Map((button, idx) => AbilityCooldown(EventPlayer(), button) > 0)
      .IsTrueForAny((i) => i), 
    99999);

  LoopIfConditionIsTrue();
}

rule: 'Infinite Charge'
Event.OngoingPlayer
if(pageAbilitiesInfiniteCharge.IsTrueForAny((i) => i))
{
  for(Number i! = 0; i < pageAbilitiesInfiniteCharge.Length; i++) {
    if(!pageAbilitiesInfiniteCharge[i]) continue;
    
    if(allButtons[i] == Button.Ultimate)
      SetUltimateCharge(EventPlayer(), 100);
    else
      SetAbilityCharge(EventPlayer(), allButtons[i], 99);
  }

  Wait(0.1);

  WaitUntil(
    allButtons
      .FilteredArray((button, idx) => pageAbilitiesInfiniteCharge[idx])
      .Map((button) => 
        (button == Button.Ultimate ? UltimateChargePercent() < 100 : AbilityCharge(EventPlayer(), button) < 99))
      .IsTrueForAny((i) => i), 
    99999);
   
  Wait(1);

  LoopIfConditionIsTrue();
}


rule: 'Infinite Resource'
Event.OngoingPlayer
if(pageAbilitiesInfiniteResource.IsTrueForAny((i) => i))
{
  for(Number i! = 0; i < allButtons.Length; i++) {
    if(!pageAbilitiesInfiniteResource[i]) continue;
    SetAbilityResource(EventPlayer(), allButtons[i], 99);
  }

  Wait(0.1);

  WaitUntil(
    allButtons
      .FilteredArray((button, idx) => pageAbilitiesInfiniteResource[idx])
      .Map((button, idx) => AbilityResource(EventPlayer(), button) && AbilityResource(EventPlayer(), button) < 99)
      .IsTrueForAny((i) => i), 
    99999);

  LoopIfConditionIsTrue();
}

rule: 'Repeat button'
Event.OngoingPlayer
if(pageAbilitiesKeepPressingButton.IsTrueForAny((i) => i))
{
  Boolean abilityThenFire! = pageAbilitiesKeepPressingButton.Slice(0, 2).IsTrueForAny((i) => i) && pageAbilitiesKeepPressingButton.Slice(2, pageAbilitiesKeepPressingButton.Length).IsTrueForAny((i) => i);

  for(Number i! = abilityThenFire ? 2 : 0; i < pageAbilitiesKeepPressingButton.Length; i++) {
    if(!pageAbilitiesKeepPressingButton[i]) continue;
    
    StartHoldingButton(EventPlayer(), allButtons[i]);
  }

  Wait(abilityThenFire ? 1 : 0);

  for(Number i! = 0; i < 2; i++) {
    if(!pageAbilitiesKeepPressingButton[i]) continue;
    
    StartHoldingButton(EventPlayer(), allButtons[i]);
  }
  
  Wait(1);

  for(Number i! = 0; i < pageAbilitiesKeepPressingButton.Length; i++) {
    if(!pageAbilitiesKeepPressingButton[i]) continue;
    
    StopHoldingButton(EventPlayer(), allButtons[i]);
  }

  Wait(0.1);

  WaitUntil(
    allButtons
      .FilteredArray((button, idx) => pageAbilitiesKeepPressingButton[idx])
      .Map((button, idx) => !IsUsingAbility(EventPlayer(), button))
      .IsTrueForAny((i) => i), 
    99999);

  Wait(1);

  LoopIfConditionIsTrue();
}

// draw
rule: 'Draw currently pressed buttons above players'
Event.OngoingPlayer
if(menuState.isOpen)
if(menuState.currentMenuID == PAGE_ABILITIES_ID)
{
  // "Draw current ability info above players" will remove these texts when exiting submenu
  MinWait();

  foreach(Player player in AllPlayers()) {
    if(player == EventPlayer()) continue;
    
    Player pl: EvaluateOnce(player);

    playerText.Add(pl, 
      (pl.buttonsHeld.Contains(Button.PrimaryFire) ? $'{Button.PrimaryFire}\n' : '') +
        (pl.buttonsHeld.Contains(Button.SecondaryFire) ? $'{Button.SecondaryFire}\n' : '') +
        (pl.buttonsHeld.Contains(Button.Ability1) ? $'{Button.Ability1}\n' : '') +
        (pl.buttonsHeld.Contains(Button.Ability2) ? $'{Button.Ability2}\n' : '') +
        (pl.buttonsHeld.Contains(Button.Ultimate) ? $'{Button.Ultimate}\n' : '') +
        (pl.buttonsHeld.Contains(Button.Reload) ? $'{Button.Reload}\n' : '') +
        (pl.buttonsHeld.Contains(Button.Melee) ? $'{Button.Melee}\n' : '') +
        (pl.buttonsHeld.Contains(Button.Jump) ? $'{Button.Jump}\n' : '') +
        (pl.buttonsHeld.Contains(Button.Crouch) ? $'{Button.Crouch}\n' : '') +
        (pl.buttonsHeld.Contains(Button.Interact) ? $'{Button.Interact}\n' :  '')
    );

    MinWait();
  }

  WaitUntil(menuState.currentMenuID != PAGE_ABILITIES_ID || !menuState.isOpen, 99999);
  
  playerText.Remove();
}

rule: 'Draw current ability info above players'
Event.OngoingPlayer
if(menuState.isOpen)
if(menuState.stack[menuState.stack.Length - 2] == PAGE_ABILITIES_ID)
{
  foreach(Player player in AllPlayers()) {
    if(player == EventPlayer()) continue;

    Player pl: EvaluateOnce(player);

    playerText.Add(pl, PageAbilitiesInfo(
      player: pl,
      button: 
        menuState.stack.Last == PAGE_ABILITIES_PRIMARY_FIRE_ID ? Button.PrimaryFire :
        menuState.stack.Last == PAGE_ABILITIES_SECONDARY_FIRE_ID ? Button.SecondaryFire :
        menuState.stack.Last == PAGE_ABILITIES_ABILITY_1_ID ? Button.Ability1 :
        menuState.stack.Last == PAGE_ABILITIES_ABILITY_2_ID ? Button.Ability2 :
        menuState.stack.Last == PAGE_ABILITIES_ULTIMATE_ID ? Button.Ultimate :
        menuState.stack.Last == PAGE_ABILITIES_RELOAD_ID ? Button.Reload :
        menuState.stack.Last == PAGE_ABILITIES_MELEE_ID ? Button.Melee :
        menuState.stack.Last == PAGE_ABILITIES_JUMP_ID ? Button.Jump :
        Button.Crouch
    ));

    MinWait();
  }

  WaitUntil(menuState.stack[menuState.stack.Length - 2] != PAGE_ABILITIES_ID || !menuState.isOpen, 99999);

  playerText.Remove();
}
