import '../../../../../libs/utils/player.del';
import './_index.del';

rule: 'Infinite Ammo'
Event.OngoingPlayer
if(pageAbilitiesInfiniteAmmo)
{
  foreach(Button button! in pageAbilitiesInfiniteAmmo) {
    SetAmmo(EventPlayer(), button == Button.SecondaryFire ? 1 : 0, 1000);
  }

  WaitUntil(
    !pageAbilitiesInfiniteAmmo ||
    pageAbilitiesInfiniteAmmo
      .FilteredArray((button) => MaxAmmo(EventPlayer(), button == Button.SecondaryFire ? 1 : 0) > 0)
      .Map((button) => Ammo(EventPlayer(), button == Button.SecondaryFire ? 1 : 0) < 2)
      .IsTrueForAny((i) => i), 
    99999);

  Wait(1, WaitBehavior.AbortWhenFalse);
  LoopIfConditionIsTrue();
}

rule: 'No Cooldown'
Event.OngoingPlayer
if(pageAbilitiesNoCooldown)
{
  foreach(Button button! in pageAbilitiesNoCooldown) {
    SetAbilityCooldown(EventPlayer(), button, 0);
  }

  WaitUntil(
    !pageAbilitiesNoCooldown ||
    pageAbilitiesNoCooldown
      .Map((button) => AbilityCooldown(EventPlayer(), button) > 0)
      .IsTrueForAny((i) => i), 
    99999);
  
  Wait(0.1, WaitBehavior.AbortWhenFalse);
  LoopIfConditionIsTrue();
}

rule: 'Infinite Charge'
Event.OngoingPlayer
if(pageAbilitiesInfiniteCharge)
{
  foreach(Button button! in pageAbilitiesInfiniteCharge) {
    if(button == Button.Ultimate)
      SetUltimateCharge(EventPlayer(), 100);
    else
      SetAbilityCharge(EventPlayer(), button, 99);
  }

  WaitUntil(
    !pageAbilitiesInfiniteCharge ||
    pageAbilitiesInfiniteCharge
      .Map((button) => 
      (button == Button.Ultimate ? 
        UltimateChargePercent() < 100 : 
        AbilityCharge(EventPlayer(), button) < 99))
      .IsTrueForAny((i) => i), 
    99999);

  Wait(1, WaitBehavior.AbortWhenFalse);
  LoopIfConditionIsTrue();
}

rule: 'Infinite Resource'
Event.OngoingPlayer
if(pageAbilitiesInfiniteResource)
{
  foreach(Button button! in pageAbilitiesInfiniteResource) {
    SetAbilityResource(EventPlayer(), button, 99);
  }

  WaitUntil(
    !pageAbilitiesInfiniteResource ||
    pageAbilitiesInfiniteResource
      .Map((button, idx) => AbilityResource(EventPlayer(), button) > 0 && AbilityResource(EventPlayer(), button) < 99)
      .IsTrueForAny((i) => i), 
    99999);
  
  Wait(1, WaitBehavior.AbortWhenFalse);
  LoopIfConditionIsTrue();
}

rule: 'Hold button'
Event.OngoingPlayer
if(!menuState.isOpen)
if(pageAbilitiesKeepHoldingButton)
{
  // workaround for ability not being used even when button is held when exiting menu
  MinWait();
  
  foreach(Button button in pageAbilitiesKeepHoldingButton) {
    StartHoldingButton(EventPlayer(), button);
  }

  WaitUntil(pageAbilitiesKeepHoldingButton != EvaluateOnce(pageAbilitiesKeepHoldingButton) || menuState.isOpen, 99999);

  foreach(Button button in allButtons) {
    StopHoldingButton(EventPlayer(), button);
  }

  LoopIfConditionIsTrue();
}

rule: 'Spam button'
Event.OngoingPlayer
if(!menuState.isOpen)
if(pageAbilitiesKeepSpammingButton)
{
  // workaround for ability not being used even when button is held when exiting menu
  MinWait();

  // if primary/secondary fire are set to be spammed along with other abilities, treat them as confirmation buttons
  Button[] abilities! = pageAbilitiesKeepSpammingButton.FilteredArray((i) => i != Button.PrimaryFire && i != Button.SecondaryFire);
  Button[] fires! = pageAbilitiesKeepSpammingButton.FilteredArray((i) => i == Button.PrimaryFire || i == Button.SecondaryFire);

  foreach(Button button! in abilities) {
    StartHoldingButton(EventPlayer(), button);
  }

  if(abilities && fires)
    Wait(1, WaitBehavior.AbortWhenFalse);

  foreach(Button button! in fires) {
    StartHoldingButton(EventPlayer(), button);
  }
  
  Wait(1, WaitBehavior.AbortWhenFalse);

  foreach(Button button! in pageAbilitiesKeepSpammingButton) {
    StopHoldingButton(EventPlayer(), button);
  }

  WaitUntil(
    menuState.isOpen ||
    !pageAbilitiesKeepSpammingButton ||
    pageAbilitiesKeepSpammingButton
      .Map((button, idx) => !IsUsingAbility(EventPlayer(), button))
      .IsTrueForAny((i) => i),
    99999);

  Wait(1, WaitBehavior.AbortWhenFalse);
  LoopIfConditionIsTrue();
}

rule: 'Stop holding/spamming buttons'
Event.OngoingPlayer
if(!menuState.isOpen)
if(IsButtonHeld(EventPlayer(), Button.Interact))
{
  WaitUntil(menuState.isOpen || !IsButtonHeld(EventPlayer(), Button.Interact), 5);
  AbortIfConditionIsFalse();

  pageAbilitiesKeepHoldingButton = [];
  pageAbilitiesKeepSpammingButton = [];

  // just in case
  foreach(Button button in allButtons) {
    StopHoldingButton(EventPlayer(), button);
  }
}

rule: 'Show current ability info' 50
Event.OngoingPlayer
if(!menuState.HistoryContains('timeline'))
if(menuState.history[2].id == PAGE_ABILITIES_ID)
{
  playerInfoProps.Enable();
  playerInfoProps.EnableButtons();

  WaitUntil(menuState.history[2].id != PAGE_ABILITIES_ID, 99999);

  playerInfoProps.Disable();
  playerInfoProps.DisableButtons();
}
