import '../../../../../libs/utils/player.del';
import './_index.del';

rule: 'Infinite Ammo'
Event.OngoingPlayer
if(pageAbilitiesInfiniteAmmo)
{
  foreach(Button button! in pageAbilitiesInfiniteAmmo) {
    SetAmmo(EventPlayer(), button == Button.SecondaryFire ? 1 : 0, 1000);
  }

  WaitUntil(
    !pageAbilitiesInfiniteAmmo ||
    pageAbilitiesInfiniteAmmo
      .FilteredArray((button) => MaxAmmo(EventPlayer(), button == Button.SecondaryFire ? 1 : 0) > 0)
      .Map((button) => Ammo(EventPlayer(), button == Button.SecondaryFire ? 1 : 0) < 2)
      .IsTrueForAny((i) => i), 
    99999);

  Wait(1, WaitBehavior.AbortWhenFalse);
  LoopIfConditionIsTrue();
}

rule: 'No Cooldown'
Event.OngoingPlayer
if(pageAbilitiesNoCooldown)
{
  foreach(Button button! in pageAbilitiesNoCooldown) {
    SetAbilityCooldown(EventPlayer(), button, 0);
  }

  WaitUntil(
    !pageAbilitiesNoCooldown ||
    pageAbilitiesNoCooldown
      .Map((button) => AbilityCooldown(EventPlayer(), button) > 0)
      .IsTrueForAny((i) => i), 
    99999);
  
  Wait(0.1, WaitBehavior.AbortWhenFalse);
  LoopIfConditionIsTrue();
}

rule: 'Infinite Charge'
Event.OngoingPlayer
if(pageAbilitiesInfiniteCharge)
{
  foreach(Button button! in pageAbilitiesInfiniteCharge) {
    if(button == Button.Ultimate)
      SetUltimateCharge(EventPlayer(), 100);
    else
      SetAbilityCharge(EventPlayer(), button, 99);
  }

  WaitUntil(
    !pageAbilitiesInfiniteCharge ||
    pageAbilitiesInfiniteCharge
      .Map((button) => 
      (button == Button.Ultimate ? 
        UltimateChargePercent() < 100 : 
        AbilityCharge(EventPlayer(), button) < 99))
      .IsTrueForAny((i) => i), 
    99999);

  Wait(1, WaitBehavior.AbortWhenFalse);
  LoopIfConditionIsTrue();
}

rule: 'Infinite Resource'
Event.OngoingPlayer
if(pageAbilitiesInfiniteResource)
{
  foreach(Button button! in pageAbilitiesInfiniteResource) {
    SetAbilityResource(EventPlayer(), button, 99);
  }

  WaitUntil(
    !pageAbilitiesInfiniteResource ||
    pageAbilitiesInfiniteResource
      .Map((button, idx) => AbilityResource(EventPlayer(), button) > 0 && AbilityResource(EventPlayer(), button) < 99)
      .IsTrueForAny((i) => i), 
    99999);
  
  Wait(1, WaitBehavior.AbortWhenFalse);
  LoopIfConditionIsTrue();
}

rule: 'Spam button'
Event.OngoingPlayer
if(pageAbilitiesKeepSpammingButton)
{
  // if primary/secondary fire are set to be spammed along with other abilities, treat them as confirmation buttons
  Button[] abilities! = pageAbilitiesKeepSpammingButton.FilteredArray((i) => i != Button.PrimaryFire && i != Button.SecondaryFire);
  Button[] fires! = pageAbilitiesKeepSpammingButton.FilteredArray((i) => i == Button.PrimaryFire || i == Button.SecondaryFire);

  foreach(Button button! in abilities) {
    StartHoldingButton(EventPlayer(), button);
  }

  if(abilities && fires)
    Wait(1, WaitBehavior.AbortWhenFalse);

  foreach(Button button! in fires) {
    StartHoldingButton(EventPlayer(), button);
  }
  
  Wait(1, WaitBehavior.AbortWhenFalse);

  foreach(Button button! in pageAbilitiesKeepSpammingButton) {
    StopHoldingButton(EventPlayer(), button);
  }

  WaitUntil(
    !pageAbilitiesKeepSpammingButton ||
    pageAbilitiesKeepSpammingButton
      .Map((button, idx) => !IsUsingAbility(EventPlayer(), button))
      .IsTrueForAny((i) => i),
    99999);

  Wait(1, WaitBehavior.AbortWhenFalse);
  LoopIfConditionIsTrue();
}

// draw
rule: 'Draw currently pressed buttons above players'
Event.OngoingPlayer
if(menuState.isOpen)
if(menuState.pageId == PAGE_ABILITIES_ID)
{
  // "Draw current ability info above players" will remove these texts when exiting submenu
  MinWait();

  foreach(Player player in AllPlayers()) {
    if(player == EventPlayer()) continue;
    
    Player pl: EvaluateOnce(player);
    playerText.Add(pl, InlineJoin10(pl.buttonsHeld, '\n'));
    MinWait();
  }

  WaitUntil(
    menuState.pageId != PAGE_ABILITIES_ID && !menuState.isRefreshing || 
    !menuState.isOpen, 
  99999);
  
  playerText.Remove();
}

rule: 'Draw current ability info above players'
Event.OngoingPlayer
if(menuState.isOpen)
if(menuState.history[2].id == PAGE_ABILITIES_ID)
if(!menuState.HistoryContains('timeline'))
if(menuState.history.Length > 3 && !menuState.isRefreshing)
{
  foreach(Player player in AllPlayers()) {
    if(player == EventPlayer()) continue;

    Player pl: EvaluateOnce(player);

    playerText.Add(pl, PageAbilitiesInfo(
      player: pl,
      button: selectedButton
    ));

    MinWait();
  }

  WaitUntil(
    menuState.history[2].id != PAGE_ABILITIES_ID || 
    menuState.history.Length <= 3 || 
    !menuState.isOpen, 
  99999);

  playerText.Remove();
}
