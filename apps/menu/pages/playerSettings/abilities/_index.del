import '../../../../../libs/menu/components/link.del';
import '../../../../../libs/menu/components/carousel.del';
import '../../../_variables.del';
import './_rules.del';
import './_helpers.del';

String PAGE_ABILITIES_ID: 'abilities';
String PAGE_ABILITIES_NAME: 'Abilities';

String PAGE_ABILITIES_STOP: $"Hold {ButtonFormatterSingle_Underscores(Button.Interact)} for 5 secs to stop forcing using abilities and be able to open menu";
String PAGE_ABILITIES_SET_WEAPON: 'Set Weapon';
String PAGE_ABILITIES_CANCEL_PRIMARY_ACTION: 'Stop Ability';

Component[] PageAbilitiesItems() {
  Component[] list = [];

  foreach(Button button! in allButtons) {
    list += new Link(menuState, $"{button}", submenuID: $"{button}", openButton: BUTTON_SECONDARY);
    list.Last.onSecondaryAction = (it) => {
      selectedButton = button;
    };
    list.Last.child = PageAbilitiesCarousel($"{button}", button);
  }

  Component cancelPrimaryAction = new Component(PAGE_ABILITIES_CANCEL_PRIMARY_ACTION);

  cancelPrimaryAction.SetPrimaryAction("Apply", (it) => {
    CancelPrimaryAction(selectedPlayers);
  });
  cancelPrimaryAction.SetTertiaryAction("Add to timeline", (it) => {
    Timeline.AddAction(timeline, ACTION_CencelPrimaryAction(selectedPlayers));
  });
  cancelPrimaryAction.AddDescription(Description.New("Equivalent to a short stun", COLOR_INFO));

  Carousel setWeapon = new Carousel(
    text: PAGE_ABILITIES_SET_WEAPON,
    options: [1, 2],
    defaultValue: Weapon(selectedPlayers.First)
  );

  setWeapon.SetPrimaryAction('Apply', (it) => {
    SetWeapon(selectedPlayers, (<Carousel>it).value);
  });
  setWeapon.SetTertiaryAction("Add to timeline", (it) => {
    Timeline.AddAction(timeline, ACTION_SetWeapon(selectedPlayers, (<Carousel>it).value));
  });

  return list + new Text() + cancelPrimaryAction + setWeapon;
}

rule: 'Player Settings/Abilities' 50
Event.OngoingPlayer
if(menuState.pageId == PAGE_ABILITIES_ID)
{
  menuState.CreatePage(
    title: PAGE_ABILITIES_NAME, 
    items: PageAbilitiesItems(), 
    descriptions: [
      Description.New(PAGE_ABILITIES_STOP, COLOR_INFO)
    ]
  );
}

rule: 'Player Settings/Abilities/Selected button' 50
Event.OngoingPlayer
if(menuState.HistoryContains(PAGE_ABILITIES_ID))
if(menuState.pageId == $"{selectedButton}")
{
  menuState.CreatePage(
    title: $"{selectedButton}",
    items: PageAbilitiesMenuItemsGenerator(selectedButton), 
    descriptions: [
      Description.New(PAGE_ABILITIES_WARNING_BROKEN, COLOR_WARNING)
    ]
  );
}
