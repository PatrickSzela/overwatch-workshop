import '../../../../../libs/menu/components/text.del';
import '../../../../../libs/menu/components/toggle.del';
import '../../../../../libs/menu/components/numberInput.del';
import '../../../../../libs/menu/components/carousel.del';
import '../../../../../libs/utils/string.formatters.del';
import '../../../_variables.del';

playervar Button selectedButton;
playervar Button[] pageAbilitiesEnabled = allButtons;
playervar Button[] pageAbilitiesKeepHoldingButton = [];
playervar Button[] pageAbilitiesKeepSpammingButton = [];
playervar Button[] pageAbilitiesInfiniteAmmo = [];
playervar Button[] pageAbilitiesNoCooldown = [];
playervar Button[] pageAbilitiesInfiniteCharge = [];
playervar Button[] pageAbilitiesInfiniteResource = [];

String PAGE_ABILITIES_WARNING_BROKEN: "Due to Workshop bugs, some settings might not work correctly for some heroes";

String PageAbilitiesInfo(Player player, Button button): 
  $"Enabled: {BooleanFormatter(player.pageAbilitiesEnabled.Contains(button))}\n" +
  $"Button held: {BooleanFormatter(player.buttonsHeld.Contains(button))}\n";

enum PageAbilitiesOptions {
  PRESS = 'Press',
  START_HOLDING = 'Start holding',
  START_SPAMMING = 'Start spamming',
  STOP = 'Stop'
}

Carousel PageAbilitiesCarousel(String text!, Button ability!) "PageAbilitiesCarousel" {
  Carousel item! = new Carousel(
    text: text,
    options: [
      PageAbilitiesOptions.PRESS,
      PageAbilitiesOptions.START_HOLDING, 
      PageAbilitiesOptions.START_SPAMMING, 
      PageAbilitiesOptions.STOP
    ],
    defaultValue: 
      selectedPlayersWithoutSelf[0].pageAbilitiesKeepHoldingButton.Contains(ability) ? PageAbilitiesOptions.START_HOLDING :
      selectedPlayersWithoutSelf[0].pageAbilitiesKeepSpammingButton.Contains(ability) ? PageAbilitiesOptions.START_SPAMMING :
      PageAbilitiesOptions.PRESS
  );

  item.SetPrimaryAction("Apply", (it) => {
    selectedPlayersWithoutSelf.pageAbilitiesKeepSpammingButton.ModRemoveByValue(ability);
    selectedPlayersWithoutSelf.pageAbilitiesKeepHoldingButton.ModRemoveByValue(ability);

    StopHoldingButton(selectedPlayersWithoutSelf, ability);

    // let spam finish its rule
    MinWait();

    if((<Carousel>it).value == PageAbilitiesOptions.PRESS) {
      StartHoldingButton(selectedPlayersWithoutSelf, ability);
    } else if((<Carousel>it).value == PageAbilitiesOptions.START_HOLDING) {
      selectedPlayersWithoutSelf.pageAbilitiesKeepHoldingButton.ModAppend(ability);
      StartHoldingButton(selectedPlayersWithoutSelf, ability);
    } else if((<Carousel>it).value == PageAbilitiesOptions.START_SPAMMING) {
      selectedPlayersWithoutSelf.pageAbilitiesKeepSpammingButton.ModAppend(ability);
    }
  });

  item.onButtonUp = (button, it) => {
    if(buttonsHeld == [BUTTON_PRIMARY]) {
      if((<Carousel>it).value == PageAbilitiesOptions.PRESS) {
        StopHoldingButton(selectedPlayersWithoutSelf, ability);
      }
    }
  };

  item.SetTertiaryAction('Add to Timeline', (it) => {
    if((<Carousel>it).value == PageAbilitiesOptions.STOP)
      timeline.AddAction(timeline, ACTION_StopHoldingButton(selectedPlayersWithoutSelf, ability));
    if((<Carousel>it).value == PageAbilitiesOptions.PRESS)
      timeline.AddAction(timeline, ACTION_PressButton(selectedPlayersWithoutSelf, ability));
    if((<Carousel>it).value == PageAbilitiesOptions.START_HOLDING)
      timeline.AddAction(timeline, ACTION_StartHoldingButton(selectedPlayersWithoutSelf, ability));
  });

  return item;
}

NumberInput PageAbilitiesNumberInputGenerator(String text!, String unit! = null, Number value!, ((Number) => void) onApply!) "PageAbilitiesNumberInputGenerator" {
  NumberInput numberInput! = new NumberInput(
    menuState: menuState, 
    text: text,
    defaultValue: value,
    integralLength: 5,
    unit: unit
  );
  numberInput.SetPrimaryAction("Apply", (it) => {
    onApply((<NumberInput>it).value);
  });

  return numberInput;
}

Toggle PageAbilitiesToggleGenerator(String text!, Number defaultChecked!, ((Boolean) => void) onApply!) "PageAbilitiesToggleGenerator" {
  Toggle toggle! = new Toggle(
    text: text,
    defaultChecked: defaultChecked
  );
  toggle.onChange = (checked, it) => {
    onApply(checked);
  };

  return toggle;
}

Component[] PageAbilitiesMenuItemsGenerator(Button ability!) "PageAbilitiesMenuItemsGenerator" {
  Component[] list = [];

  // enabled
  // since we can't disable Interact button...
  if(ability != Button.Interact) {
    list += PageAbilitiesToggleGenerator(
      text: 'Enabled',
      defaultChecked: selectedPlayers[0].pageAbilitiesEnabled.Contains(ability),
      onApply: (value) => {
        if(value)
          selectedPlayers.pageAbilitiesEnabled.ModAppend(ability);
        else
          selectedPlayers.pageAbilitiesEnabled.ModRemoveByValue(ability);

        if(ability == Button.PrimaryFire) SetPrimaryFireEnabled(selectedPlayers, value);
        else if(ability == Button.SecondaryFire) SetSecondaryFireEnabled(selectedPlayers, value);
        else if(ability == Button.Ability1) SetAbility1Enabled(selectedPlayers, value);
        else if(ability == Button.Ability2) SetAbility2Enabled(selectedPlayers, value);
        else if(ability == Button.Ultimate) SetUltimateAbilityEnabled(selectedPlayers, value);
        else if(ability == Button.Reload) SetReloadEnabled(selectedPlayers, value);
        else if(ability == Button.Melee) SetMeleeEnabled(selectedPlayers, value);
        else if(ability == Button.Jump) SetJumpEnabled(selectedPlayers, value);
        else SetCrouchEnabled(selectedPlayers, value);
      }
    );

    list += new Text();
  }

  // use
  Carousel use = PageAbilitiesCarousel('Use', ability);

  // TOOD: merge with other Charge
  if(ability == Button.Ultimate) {
    list += PageAbilitiesNumberInputGenerator(
      text: 'Charge',
      unit: '%',
      value: UltimateChargePercent(selectedPlayers[0]),
      onApply: (value) => SetUltimateCharge(selectedPlayers, value)
    );

    list += new Text();

    list += PageAbilitiesToggleGenerator(
      text: 'Infinite Charge',
      defaultChecked: selectedPlayers[0].pageAbilitiesInfiniteCharge.Contains(ability),
      onApply: (value) => {
        if(value)
          selectedPlayers.pageAbilitiesInfiniteCharge.ModAppend(ability);
        else
          selectedPlayers.pageAbilitiesInfiniteCharge.ModRemoveByValue(ability);
      }
    );

    list += new Text();
    list += use;

    return list;
  }

  if(ability == Button.PrimaryFire || ability == Button.SecondaryFire) {
    Number clip! = ability == Button.SecondaryFire ? 1 : 0;

    list += PageAbilitiesNumberInputGenerator(
      text: 'Ammo',
      value: Ammo(selectedPlayers[0], clip),
      onApply: (value) => SetAmmo(selectedPlayers, clip, value)
    );
    list += PageAbilitiesNumberInputGenerator(
      text: 'Max Ammo',
      value: MaxAmmo(selectedPlayers[0], clip),
      onApply: (value) => SetMaxAmmo(selectedPlayers, clip, value)
    );
  }

  list += PageAbilitiesNumberInputGenerator(
    text: 'Cooldown',
    unit: ' sec',
    value: AbilityCooldown(selectedPlayers[0], ability),
    onApply: (value) => SetAbilityCooldown(selectedPlayers, ability, value)
  );

  list += PageAbilitiesNumberInputGenerator(
    text: 'Charge',
    value: AbilityCharge(selectedPlayers[0], ability),
    onApply: (value) => SetAbilityCharge(selectedPlayers, ability, value)
  );

  list += PageAbilitiesNumberInputGenerator(
    text: 'Resource',
    unit: '%',
    value: AbilityResource(selectedPlayers[0], ability),
    onApply: (value) => SetAbilityResource(selectedPlayers, ability, value)
  );

  list += new Text();

  // infinite
  if(ability == Button.PrimaryFire || ability == Button.SecondaryFire) {
    list += PageAbilitiesToggleGenerator(
      text: 'Infinite Ammo',
      defaultChecked: selectedPlayers[0].pageAbilitiesInfiniteAmmo.Contains(ability),
      onApply: (value) => {
        if(value)
          selectedPlayers.pageAbilitiesInfiniteAmmo.ModAppend(ability);
        else
          selectedPlayers.pageAbilitiesInfiniteAmmo.ModRemoveByValue(ability);
      }
    );
  }

  list += PageAbilitiesToggleGenerator(
    text: 'No Cooldown',
    defaultChecked: selectedPlayers[0].pageAbilitiesNoCooldown.Contains(ability),
    onApply: (value) => {
      if(value)
        selectedPlayers.pageAbilitiesNoCooldown.ModAppend(ability);
      else
        selectedPlayers.pageAbilitiesNoCooldown.ModRemoveByValue(ability);
    }
  );

  list += PageAbilitiesToggleGenerator(
    text: 'Infinite Charge',
    defaultChecked: selectedPlayers[0].pageAbilitiesInfiniteCharge.Contains(ability),
    onApply: (value) => {
      if(value)
        selectedPlayers.pageAbilitiesInfiniteCharge.ModAppend(ability);
      else
        selectedPlayers.pageAbilitiesInfiniteCharge.ModRemoveByValue(ability);
    }
  );

  list += PageAbilitiesToggleGenerator(
    text: 'Infinite Resource',
    defaultChecked: selectedPlayers[0].pageAbilitiesInfiniteResource.Contains(ability),
    onApply: (value) => {
      if(value)
        selectedPlayers.pageAbilitiesInfiniteResource.ModAppend(ability);
      else
        selectedPlayers.pageAbilitiesInfiniteResource.ModRemoveByValue(ability);
    }
  );

  list += new Text();
  list += use;

  return list;
}
