import '../../../../libs/menu/components/carousel.del';
import '../../../../libs/utils/player.sortedAllPlayers.del';
import '../../_variables.del';

String PAGE_TELEPORT_ID: 'teleport';
String PAGE_TELEPORT_NAME: 'Teleport to';

String PAGE_TELEPORT_POSITION_ID: PAGE_TELEPORT_ID + 'position';
String PAGE_TELEPORT_POSITION_NAME: 'Position';
String PAGE_TELEPORT_OBJECTIVE_ID: PAGE_TELEPORT_ID + 'objective';
String PAGE_TELEPORT_OBJECTIVE_NAME: 'Objective';
String PAGE_TELEPORT_PAYLOAD_ID: PAGE_TELEPORT_ID + 'payload';
String PAGE_TELEPORT_PAYLOAD_NAME: 'Payload';
String PAGE_TELEPORT_PLAYER_ID: PAGE_TELEPORT_ID + 'player';
String PAGE_TELEPORT_PLAYER_NAME: 'Player';

Component[] PageTeleportItems() {
  Component position = new Component(PAGE_TELEPORT_POSITION_NAME);
  position.AddDescription(Description.New(PickPosition.CHANGE_DISTANCE_DESCRIPTION));
  position.onEnter = (it) => {
    pickPosition.Enable(Color.Red);
  };
  position.onLeave = (it) => {
    pickPosition.Disable();
  };
  position.onButtonDown = (button, it) => {
    pickPosition.ChangeDistance(button);
  };
  position.SetPrimaryAction('Apply', (it) => {
    Teleport(selectedPlayers, pickPosition.position);
  });

  Carousel objective = new Carousel(
    text: PAGE_TELEPORT_OBJECTIVE_NAME,
    options: [-1, 0, 1, 2, 3, 4],
    defaultValue: -1
  );
  objective.valueFormatter = (it) => ObjectiveFormatter(it.value);
  objective.SetPrimaryAction("Apply", (it) => {
    Teleport(selectedPlayers, ObjectivePosition((<Carousel>it).value == -1 ? ObjectiveIndex() : (<Carousel>it).value));
  });

  Component payload = new Component(PAGE_TELEPORT_PAYLOAD_NAME);
  payload.SetPrimaryAction("Apply", (it) => {
    Teleport(selectedPlayers, PayloadPosition());
  });

  Carousel player = new Carousel(
    text: PAGE_TELEPORT_PLAYER_NAME,
    options: sortedPlayers
  );
  player.valueFormatter = (it) => PlayerWithHeroIconTeamSlotFormatter(it.value);
  player.SetPrimaryAction("Apply", (it) => {
    if((<Carousel>it).value != null)
      Teleport(selectedPlayers, (<Carousel>it).value);
  });

  return [position, objective, payload, player];
}

rule: 'Player Settings/Teleport'
Event.OngoingPlayer
if(menuState.pageId == PAGE_TELEPORT_ID)
{
  menuState.CreatePage(
    title: PAGE_TELEPORT_NAME, 
    items: PageTeleportItems()
  );
}

rule: 'Draw current health info above players'
Event.OngoingPlayer
if(menuState.isOpen)
if(menuState.pageId == PAGE_TELEPORT_ID)
{
  foreach(Player player in AllPlayers()) {
    if(player == EventPlayer()) continue;

    Player pl: EvaluateOnce(player);
    
    playerText.Add(pl, $"{pl.Position()}");

    MinWait();
  }

  WaitUntil(menuState.pageId != PAGE_TELEPORT_ID || !menuState.isOpen, 99999);
  
  playerText.Remove();
}
