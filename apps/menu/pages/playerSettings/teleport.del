import '../../../../libs/menu/components/carousel.del';
import '../../../../libs/utils/player.sortedAllPlayers.del';
import '../../_variables.del';

String PAGE_TELEPORT_ID: 'teleport';
String PAGE_TELEPORT_NAME: 'Teleport to';

String PAGE_TELEPORT_POSITION_ID: PAGE_TELEPORT_ID + 'position';
String PAGE_TELEPORT_POSITION_NAME: 'Position';
String PAGE_TELEPORT_OBJECTIVE_ID: PAGE_TELEPORT_ID + 'objective';
String PAGE_TELEPORT_OBJECTIVE_NAME: 'Objective';
String PAGE_TELEPORT_PAYLOAD_ID: PAGE_TELEPORT_ID + 'payload';
String PAGE_TELEPORT_PAYLOAD_NAME: 'Payload';
String PAGE_TELEPORT_PLAYER_ID: PAGE_TELEPORT_ID + 'player';
String PAGE_TELEPORT_PLAYER_NAME: 'Player';
Button PAGE_TELEPORT_BUTTON_APPLY: Button.Ability2;

Component[] PageTeleportItems() {
  Component position = new Component(PAGE_TELEPORT_POSITION_NAME);
  position.AddDescription(PickPosition.CHANGE_DISTANCE_DESCRIPTION);
  position.onEnter = (it) => {
    pickPosition.Enable(Color.Red);
  };
  position.onLeave = (it) => {
    pickPosition.Disable();
  };
  position.onButtonDown = (button, it) => {
    pickPosition.ChangeDistance(button);

    if(buttonsHeld != [PAGE_TELEPORT_BUTTON_APPLY]) return;
    Teleport(selectedPlayers, pickPosition.position);
  };

  Carousel objective = new Carousel(
    text: PAGE_TELEPORT_OBJECTIVE_NAME,
    options: [-1, 0, 1, 2, 3, 4]
  );
  objective.valueFormatter = (it) => ObjectiveFormatter(it.value);
  objective.onButtonDown = (button, it) => {
    if(buttonsHeld != [PAGE_TELEPORT_BUTTON_APPLY]) return;
    Teleport(selectedPlayers, ObjectivePosition((<Carousel>it).value == -1 ? ObjectiveIndex() : (<Carousel>it).value));
  };

  Component payload = new Component(PAGE_TELEPORT_PAYLOAD_NAME);
  payload.onButtonDown = (button, it) => {
    if(button != PAGE_TELEPORT_BUTTON_APPLY) return;
    Teleport(selectedPlayers, PayloadPosition());
  };

  Carousel player = new Carousel(
    text: PAGE_TELEPORT_PLAYER_NAME,
    options: SortedAllPlayersFlat()
  );
  player.valueFormatter = (it) => PlayerWithHeroIconTeamSlotFormatter(it.value);
  player.onButtonDown = (button, it) => {
    if(buttonsHeld != [PAGE_TELEPORT_BUTTON_APPLY]) return;
    if((<Carousel>it).value == null) return;
    Teleport(selectedPlayers, (<Carousel>it).value);
  };

  return [position, objective, payload, player];
}

rule: 'Player Settings/Teleport'
Event.OngoingPlayer
if(menuState.pageId == PAGE_TELEPORT_ID)
{
  Description desc: { text: $"Press {ButtonFormatterSingle(PAGE_TELEPORT_BUTTON_APPLY)}â€‹ to apply", ..Description.BASE };
  menuState.CreatePage(PAGE_TELEPORT_NAME, PageTeleportItems(), [desc]);
}