import '../../../../libs/menu/components/text.del';
import '../../../../libs/menu/components/checkbox.del';
import '../../../../libs/utils/string.formatters.del';
import '../../../../libs/utils/player.sortedAllPlayers.del';
import '../../_variables.del';

String PAGE_SELECT_PLAYERS_ID: 'selectPlayers';
String PAGE_SELECT_PLAYERS_NAME: 'Select Players';

Component[] PageSelectPlayersItems() {  
  Component[] list = [];
  Player[][] sorterPlayers = SortedAllPlayers();

  for(Number i! = 0; i < sorterPlayers.Length; i++) {    
    if(sorterPlayers[i].Length) {
      if(list.Length)
        list += new Text();

      list += new Text($"{i == 0 ? Team.Team1 : i == 1 ? Team.Team2 : Team.All}:");
      list.Last.color = i == 0 ? Color.Team1 : Color.Team2;
    }

    foreach(Player player! in sorterPlayers[i]) {
      Checkbox checkbox = new Checkbox(
        text: $"{player}",
        defaultChecked: selectedPlayers.Contains(player)
      );
      checkbox.textFormatter = (it) => $"{PlayerWithHeroIconFormatter(player)}â€‹ (Slot {SlotFormatter(SlotOf(player))})";
      checkbox.onChange = (checked, it) => {
        if(checked) selectedPlayers.ModAppend(player);
        else selectedPlayers.ModRemoveByValue(player);
      };

      list += checkbox;
    }
  }

  return list;
}

rule: 'Player Settings/Select Players'
Event.OngoingPlayer
if(menuState.pageId == PAGE_SELECT_PLAYERS_ID)
{
  menuState.CreatePage(PAGE_SELECT_PLAYERS_NAME, PageSelectPlayersItems());
}
