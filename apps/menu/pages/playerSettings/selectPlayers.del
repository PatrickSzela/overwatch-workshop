import '../../../../libs/utils/formatters.del';
import '../../../../libs/utils/other.del';
import '../../_variables.del';

String PAGE_SELECT_PLAYERS_ID: 'selectPlayers';
String PAGE_SELECT_PLAYERS_NAME: 'Select Players';

MenuItem[] PageSelectPlayersItems() {  
  MenuItem[] list = [];
  Player[][] sorterPlayers = SortedAllPlayers();

  for(Number i! = 0; i < sorterPlayers.Length; i++) {    
    if(sorterPlayers[i].Length) {
      if(list.Length)
        list += new MenuItemNonInteractive();

      list += new MenuItemNonInteractive($"{i == 0 ? Team.Team1 : i == 1 ? Team.Team2 : Team.All}:");
      list.Last.color = i == 0 ? Color.Team1 : Color.Team2;
    }

    foreach(Player player! in sorterPlayers[i]) {
      Checkbox checkbox = new Checkbox(
        menuState: menuState,
        text: $"{player}",
        name: 'selectedPlayers',
        value: player, 
        defaultChecked: selectedPlayers.Contains(player)
      );
      checkbox.textFormatter = (it) => $"{PlayerWithHeroIconFormatter(player)}â€‹ (Slot {SlotFormatter(SlotOf(player))})";
      checkbox.onChange = (checked, it) => {
        selectedPlayers = it.values.FilteredArray((p) => EntityExists(p));
      };

      list += new MenuItem(child: checkbox);
    }
  }

  return list;
}

rule: 'Player Settings/Select Players'
Event.OngoingPlayer
if(menuState.currentMenuID == PAGE_SELECT_PLAYERS_ID)
{
  menuState.SetTitle(PAGE_SELECT_PLAYERS_NAME);
  menuState.AddItems(PageSelectPlayersItems());
}
