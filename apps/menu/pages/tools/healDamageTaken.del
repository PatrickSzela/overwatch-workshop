import '../../../../libs/utils/vector.del';
// import '../../../../libs/playerText/playerText.del';
import '../../_variables.del';

// TODO: migrate to playerText when multiple texts are supported properly

String PAGE_HEAL_DAMAGE_TAKEN_ID: 'healDamageTaken';
String PAGE_HEAL_DAMAGE_TAKEN_NAME: 'Show Heal/Damage Taken';

playervar Boolean showHealDamageTaken = false;

playervar Number healedBySum = 0;
playervar Number healedByLast = 0;
playervar Number damagedBySum = 0;
playervar Number damagedByLast = 0;
globalvar Any[] healDamageTexts = [];

MenuItem PageHealDamageTakenMenuItem() {
  Toggle toggle = new Toggle(
    text: PAGE_HEAL_DAMAGE_TAKEN_NAME,
    defaultChecked: showHealDamageTaken
  );
  toggle.onChange = (checked, it) => {
    showHealDamageTaken = checked;
  };

  MenuItem menuItem = new MenuItem(child: toggle);

  return new MenuItem(child: menuItem);
}

rule: 'Heal info'
Event.OnHealingTaken
{
  healedBySum += EventHealing();
  healedByLast = EventHealing();
  Wait(1, WaitBehavior.RestartWhenTrue);
  healedBySum = 0;
}

rule: 'Damaged info'
Event.OnDamageTaken
{
  damagedBySum += EventDamage();
  damagedByLast = EventDamage();
  Wait(1, WaitBehavior.RestartWhenTrue);
  damagedBySum = 0;
}

rule: 'Heal/Damage Taken: Generate texts'
{
  while(true) {
    Player[] players: AllPlayers();
    Number num! = AllPlayers().Length - healDamageTexts.Length;

    for(Number i! = 0; i < num; i++) {
      Number idx: EvaluateOnce(healDamageTexts.Length);

      healDamageTexts += CreateInWorldText(
        VisibleTo: HasSpawned(players[idx]) && LocalPlayer().showHealDamageTaken ? LocalPlayer() : null,
        Header: 
          (players[idx].healedBySum > 0 ? $"+{players[idx].healedBySum + 0.0001}​ HP (+{players[idx].healedByLast + 0.0001})" : '') + 
          (players[idx].damagedBySum > 0 ? $"\n-{players[idx].damagedBySum + 0.0001}​ HP (-{players[idx].damagedByLast + 0.0001})" : ''),
        Position: UpdateEveryFrame(
          LocalPlayer() == players[idx] ? 
            ScreenPositionToWorld(0, -0.95) : 
            players[idx].EyePosition() + Up()
        ),
        // scale can't be reevaluated...
        Scale: PlayerText.TEXT_SIZE,
        Clipping: Clipping.DoNotClip,
        Reevaluation: InworldTextRev.VisibleToPositionStringAndColor,
        TextColor: Color.White
      );

      MinWait();
    }

    WaitUntil(AllPlayers().Length > healDamageTexts.Length, 99999);
  }
}