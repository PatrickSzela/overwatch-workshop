import '../../../../libs/utils/vector.del';
import '../../../../libs/menu/components/toggle.del';
import '../../_variables.del';

// TODO: migrate to playerText when multiple texts are supported properly

String PAGE_HEAL_DAMAGE_TAKEN_ID: 'healDamageTaken';
String PAGE_HEAL_DAMAGE_TAKEN_NAME: 'Heal/Damage Taken';

single struct PageHealDamageTakenProps {
  public Boolean show;

  public Number healedBySum;
  public Number healedByLast;
  public Number damagedBySum;
  public Number damagedByLast;

  public static PageHealDamageTakenProps BASE:
    { show: false, healedBySum: 0, healedByLast: 0, damagedBySum: 0, damagedByLast: 0 };
}

playervar PageHealDamageTakenProps pageHealDamageTakenProps = PageHealDamageTakenProps.BASE;

Component PageHealDamageTakenMenuItem() {
  Toggle toggle = new Toggle(
    text: PAGE_HEAL_DAMAGE_TAKEN_NAME,
    defaultChecked: pageHealDamageTakenProps.show
  );
  toggle.onChange = (checked, it) => {
    pageHealDamageTakenProps.show = checked;
  };

  return toggle;
}

rule: 'Heal info'
Event.OnHealingTaken
{
  pageHealDamageTakenProps.healedBySum += EventHealing();
  pageHealDamageTakenProps.healedByLast = EventHealing();
  Wait(1, WaitBehavior.RestartWhenTrue);
  pageHealDamageTakenProps.healedBySum = 0;
}

rule: 'Damaged info'
Event.OnDamageTaken
{
  pageHealDamageTakenProps.damagedBySum += EventDamage();
  pageHealDamageTakenProps.damagedByLast = EventDamage();
  Wait(1, WaitBehavior.RestartWhenTrue);
  pageHealDamageTakenProps.damagedBySum = 0;
}

rule: 'Heal/Damage Taken: Generate texts'
Event.OngoingPlayer
{
  Number healedBySum: pageHealDamageTakenProps.healedBySum;
  Number healedByLast: pageHealDamageTakenProps.healedByLast;
  Number damagedBySum: pageHealDamageTakenProps.damagedBySum;
  Number damagedByLast: pageHealDamageTakenProps.damagedByLast;

  CreateInWorldText(
    VisibleTo: LocalPlayer().pageHealDamageTakenProps ? LocalPlayer() : null,
    Header: UpdateEveryFrame(
      (healedBySum > 0 ? $"+{healedBySum + 0.0001}​ HP (+{healedByLast + 0.0001})" : '') + 
      (damagedBySum > 0 ? $"\n-{damagedBySum + 0.0001}​ HP (-{damagedByLast + 0.0001})" : '')
    ),
    Position: UpdateEveryFrame(
      LocalPlayer() == EventPlayer() ? 
        ScreenPositionToWorld(0, -0.95) : 
        EventPlayer().EyePosition() + Up()
    ),
    // scale can't be reevaluated...
    Scale: 1.35,
    Clipping: Clipping.DoNotClip,
    Reevaluation: InworldTextRev.VisibleToPositionStringAndColor,
    TextColor: Color.White
  );
}