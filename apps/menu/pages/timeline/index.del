import '../../pages2/editTimeline.del';
import '../../../../libs/menu/components/text.del';
import '../../_variables.del';
import './playPause.del';
import './stop.del';
import './repeat.del';
import './addWait.del';

String PAGE_TIMELINE_ID: 'timeline';
String PAGE_TIMELINE_NAME: 'Timeline';

playervar Number switchToTimelineIdx;

Component[] PageTimelineItems() {
  return [
    PageTimelinePlayPauseMenuItem(),
    PageTimelineStopMenuItem(),
    new Text(),

    new Text('Settings:'),
    PageTimelineRepeatMenuItem(),
    new Text(),

    new Text('Add actions:'),
    PageTimelineAddWaitMenuItem()    
  ];
}

rule: 'Timeline'
Event.OngoingPlayer
if(menuState.pageId == PAGE_TIMELINE_ID)
{
  menuState.CreatePage(
    title: PAGE_TIMELINE_NAME, 
    items: PageTimelineItems()
  );
}

rule: 'Open Timeline Edit'
Event.OngoingPlayer
if(menuState.isOpen)
if(menuState.HistoryContains(PAGE_TIMELINE_ID))
{
  String menuState2Page! = menuState2.isOpen ? menuState2.pageId : null;
  
  menuState2.Open();
  menuState2.GoTo(PAGE_TIMELINE_EDIT_ID, true);

  WaitUntil(!menuState.isOpen || !menuState.HistoryContains(PAGE_TIMELINE_ID), 99999);

  if(menuState2Page)
    menuState2.GoTo(menuState2Page, true);
  else 
    menuState2.Close();
}

rule: 'Add Timeline Info'
Event.OngoingPlayer
{
// TODO: use Workshop setting buttons
  switchToTimelineIdx = menuState.AddMenuDescription(Description.New($"Press {ButtonFormatter([Button.Crouch, Button.Melee])}â€‹ to open Timeline menu", COLOR_SWITCH));
}

rule: 'Add Timeline Info'
Event.OngoingPlayer
if(!menuState.HistoryContains(PAGE_TIMELINE_ID))
{
  menuState.descriptionsMenu[switchToTimelineIdx].visible = true;
  menuState.RerenderHoveredItem();

  WaitUntil(menuState.HistoryContains(PAGE_TIMELINE_ID), 99999);
  
  menuState.descriptionsMenu[switchToTimelineIdx].visible = false;
  menuState.RerenderHoveredItem();
}

rule: 'Go to Timeline'
Event.OngoingPlayer
if(menuState.isOpen)
if(menuState.isFocused)
if(buttonsHeld == [Button.Crouch, Button.Melee])
{
  menuState.GoTo(PAGE_TIMELINE_ID);
}

rule: '[Timeline] Start playing'
if(timeline.isPlaying)
{
  Timeline.RuleLogic(timeline);
}
