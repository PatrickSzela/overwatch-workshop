import './index.del';
import '../../_variables.del';

String PAGE_TIMELINE_PLAY_PAUSE_ID: 'play';
String PAGE_TIMELINE_PLAY_PAUSE_NAME: 'Play';

playervar Component pagePlayPauseComponent;

Component PageTimelinePlayPauseMenuItem() {
  Component component = new Component('Play');

  component.onRender = (it) => {
    it.text = timeline.isPlaying ? 'Pause' : 'Play';
  };

  component.SetPrimaryAction("Apply", (it) => {
    if(timeline.isPlaying) {
      Timeline.Pause(timeline);
    } else {
      Timeline.Play(timeline);
    }
  });

  pagePlayPauseComponent = component;

  return component;
}

rule: 'Timeline/Edit On timeline index changed' 70
Event.OngoingPlayer
if(menuState2.isOpen)
if(menuState2.items)
if(menuState2.pageId == PAGE_TIMELINE_EDIT_ID)
if(timeline.isPlaying)
{
  Number idx! = timeline.index;
  menuState2.SetHoveredItemIdx(idx);
  // trigger `onRender()` to update the color
  menuState2.RerenderHoveredItem();

  WaitUntil(
    timeline.index != idx ||
    !menuState2.isOpen ||
    !menuState2.items ||
    menuState2.pageId != PAGE_TIMELINE_EDIT_ID ||
    !timeline.isPlaying,
  99999);

  menuState2.items[idx].MarkToRerender();

  LoopIfConditionIsTrue();

  menuState2.MarkToRerender();
}

rule: 'Timeline/Edit Focus current item when started playing' 70
Event.OngoingPlayer
if(timeline.isPlaying)
if(menuState2.isOpen)
if(menuState2.items)
if(menuState2.pageId == PAGE_TIMELINE_EDIT_ID)
{
  menuState2.SetHoveredItemIdx(timeline.index);
  menuState2.MarkToRerender();
}

rule: 'Timeline/Play Pause Switch text if playing' 70
Event.OngoingPlayer
if(menuState.pageId == PAGE_TIMELINE_ID)
if(timeline.isPlaying)
{
  menuState.RerenderItem(pagePlayPauseComponent);

  WaitUntil(!timeline.isPlaying, 99999);

  if(menuState.pageId == PAGE_TIMELINE_ID)
    menuState.RerenderItem(pagePlayPauseComponent);
}
