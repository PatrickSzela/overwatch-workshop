import './_variables.del';
import './pages/_index.del';
import './pages2/index.del';

playervar Number[] switchFocusDescriptionIdx = [];

rule: 'Switch focused menu' 1
Event.OngoingPlayer
if(menuState2.isOpen)
if(!menuState.isLocked)
if(!menuState2.isLocked)
if(buttonsHeld == [BUTTON_SWITCH])
{
  if(currentMenuState == menuState) {
    menuState2.SetFocused();
  } else {
    menuState.SetFocused();
  }
}

rule: 'Create description about switching menu'
Event.OngoingPlayer
if(!IsDummyBot())
{
  switchFocusDescriptionIdx += menuState.AddMenuDescription(Description.New($'Press {ButtonFormatterSingle(BUTTON_SWITCH)}​ to switch to right side', COLOR_SWITCH, visible: false, order: 99));
  switchFocusDescriptionIdx += menuState2.AddMenuDescription(Description.New($'Press {ButtonFormatterSingle(BUTTON_SWITCH)}​ to switch to left side', COLOR_SWITCH, visible: false, order: 99));
}

rule: 'Show description about switching menu on currently focused menu' 99
Event.OngoingPlayer
if(!IsDummyBot())
{
  WaitUntil(
    menuState.isFocused != EvaluateOnce(menuState.isFocused) ||
    menuState2.isOpen != EvaluateOnce(menuState2.isOpen) ||
    menuState.isLocked != EvaluateOnce(menuState.isLocked) ||
    menuState2.isLocked != EvaluateOnce(menuState2.isLocked),
  99999);

  menuState.descriptionsMenu[switchFocusDescriptionIdx[0]].visible = menuState.isFocused && menuState2.isOpen && !menuState.isLocked;
  menuState2.descriptionsMenu[switchFocusDescriptionIdx[1]].visible = menuState2.isFocused && !menuState.isLocked;

  menuState.MarkToRerender();
  menuState2.MarkToRerender();

  Loop();
}

rule: 'Close main menu when trying to do that in the 2nd one' 1
Event.OngoingPlayer
if(menuState2.isFocused)
if(buttonsHeld == menuState._toggleMenu)
{
  if(menuState.isOpen)
    menuState.Close();
  else
    menuState.Open();
}

rule: 'Go back in main menu when trying to do that in the 2nd one' 1
Event.OngoingPlayer
if(menuState2.isFocused)
if(menuState2.history.Length == 1)
if(buttonsHeld == [BUTTON_BACK])
{
  menuState.GoBack();
}

rule: 'Go to proper page in the right menu' 60
Event.OngoingPlayer
if(!IsDummyBot())
{
  String goTo: 
    menuState.isOpen ?
      (menuState.HistoryContains(PAGE_TIMELINE_ID) ? PAGE_TIMELINE_EDIT_ID : 
        menuState.HistoryContains(PAGE_PLAYER_SETTINGS_ID) ? PAGE_SELECT_PLAYERS_ID : 
      '') : 
    '';

  WaitUntil(goTo != EvaluateOnce(goTo) || buttonsHeld == [BUTTON_MODIFIER, BUTTON_SWITCH], 99999);

  if(goTo) {
    menuState2.Open();
    menuState2.GoTo(goTo, true);
  } else {
    menuState2.Close();
    menuState.SetFocused();
  }
  
  Loop();
}

rule: 'Add open timeline description'
Event.OngoingPlayer
{
  switchToTimelineIdx = menuState.AddMenuDescription(Description.New($"Press {ButtonFormatter([BUTTON_MODIFIER, BUTTON_SWITCH])}​ to open Timeline menu", COLOR_SWITCH, order: 98));
}

rule: 'Show/hide open timeline description' 51
Event.OngoingPlayer
if(!menuState.isLocked)
if(!menuState.HistoryContains(PAGE_TIMELINE_ID))
{
  menuState.descriptionsMenu[switchToTimelineIdx].visible = true;
  menuState.MarkToRerender();

  WaitUntil(
    menuState.HistoryContains(PAGE_TIMELINE_ID) ||
    menuState.isLocked, 
  99999);
  
  menuState.descriptionsMenu[switchToTimelineIdx].visible = false;
  menuState.MarkToRerender();
}

rule: 'Go to Timeline' 1
Event.OngoingPlayer
if(menuState.isOpen)
if(menuState.isFocused)
if(!menuState.isLocked)
if(buttonsHeld == [BUTTON_MODIFIER, BUTTON_SWITCH])
{
  menuState.GoTo(PAGE_TIMELINE_ID);
}
