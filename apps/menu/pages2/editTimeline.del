import '../../../libs/utils/array.del';
import '../../../libs/menu/components/checkbox.del';
import '../_variables.del';

// TODO: simplify most of the stuff
// TODO: add marking multiple items (remake into checkboxes)?
// TODO: lock 2nd menu when playing
// TODO: preserve prev color

String PAGE_TIMELINE_EDIT_ID: 'timelineEdit';
String PAGE_TIMELINE_EDIT_NAME: 'Timeline Editor';

// there's too much overhead when trying to have only 1 source of truth...
playervar Action[] editableActions;
playervar Action[] markedToRemove;
playervar Component componentBeingMoved;

Component PageTimelineEditItemGenerator(in Action action) {
  // Checkbox component = new Checkbox(action.name);
  Component component = new Component(action.name);
  component.textFormatter = (it) => $"{menuState2.items.IndexOf(it) + 1}. {it.text}";
  // component.textFormatter = (it) => $"{action.id}. {it.text}";

  // component.onChange = (checked, it) => {
  //   if(checked)
  //     selectedActions += action;
  //   else
  //     selectedActions -= action;
  // };
  component.SetPrimaryAction("Execute action", (it) => {
    action.code();
  });
  component.SetSecondaryAction("Mark/Unmark for removal", (it) => {
    if(markedToRemove.Contains(action)) {
      markedToRemove -= action;
      it.color = COLOR_NEUTRAL;
    } else {
      markedToRemove += action;
      it.color = COLOR_ERROR;
    }
  });
  component.SetTertiaryAction("Start/Stop moving", (it) => {
    if(componentBeingMoved == it) {
      componentBeingMoved = null;
      it.color = COLOR_NEUTRAL;
    } else {
      componentBeingMoved = it;
      it.color = COLOR_WARNING;
    }
  });
  component.onNavigate = (direction, it) => {
    if(componentBeingMoved == it) {
      // Number oldPos! = editableActions.IndexOf(action);
      // HACK: `IndexOf` doesn't work on structs?
      Number oldPos! = editableActions.Map((i) => i.id).IndexOf(action.id);

      Number newPos = oldPos + (direction == Down() ? 1 : -1);
      if(newPos > menuState2.items.Length - 1) newPos = 0;
      else if(newPos < 0) newPos = menuState2.items.Length;

      // let's hope these things doesn't desync...
      editableActions = Move(editableActions, oldPos, newPos);
      menuState2.items = Move(menuState2.items, oldPos, newPos);

      menuState2.RerenderAllItems();
    }
  };

  return component;
}

// Component[] PageTimelineEditItems() {
//   Component[] list = actionSet.Length ? [] : [];

//   foreach(Action action in actionSet) {
//     list += PageTimelineEditItemGenerator(action, list.Length + 1);
//   }

//   return list;
// }

rule: 'Timeline/Edit'
Event.OngoingPlayer
if(menuState2.pageId == PAGE_TIMELINE_EDIT_ID)
{
  editableActions = [];

  menuState2.CreatePage(
    title: PAGE_TIMELINE_EDIT_NAME, 
    items: [],
    descriptions: [
      Description.New('Switch to the left side to save changes', COLOR_INFO),
      Description.New('Only 1 Player can edit the timeline at the same time', COLOR_WARNING)
    ]
  );
}

rule: 'Timeline/Edit On focus out'
Event.OngoingPlayer
if(menuState2.pageId == PAGE_TIMELINE_EDIT_ID)
if(menuState2.isFocused)
{
  // TODO: handle resetting internally
  timeline.index = 0;

  WaitUntil(
    menuState2.pageId != PAGE_TIMELINE_EDIT_ID ||
    !menuState2.isFocused, 
  99999);

  // SmallMessage(AllPlayers(), 'Replacing actionset');

  // EnableInspectorRecording();
  // foreach(Action action! in actionsToRemove) {
  //   LogToInspector($'removing {action.id}');
  // }
  // DisableInspectorRecording();

  if(componentBeingMoved != null) {
    componentBeingMoved.color = COLOR_NEUTRAL;
    componentBeingMoved = null;
  }
  
  if(timeline.actions != editableActions - markedToRemove) {
    SmallMessage(EventPlayer(), 'Saving actions');

    // `editableActions` will be updated automatically in a rule below
    timeline.actions = editableActions - markedToRemove;
  
    // EnableInspectorRecording();
    // foreach(Action action! in timeline.actions) {
    //   LogToInspector($'left after removal: {action.id}');
    // }
    // LogToInspector($'-----');
    DisableInspectorRecording();
  }

  menuState2.Render();
}

// TODO: maybe make a callback when timeline.actions changes?
rule: 'Timeline/Edit Update editable copy when timeline changes'
Event.OngoingPlayer
if(menuState2.isOpen)
if(!menuState2.isFocused)
if(menuState2.pageId == PAGE_TIMELINE_EDIT_ID)
if(timeline.actions != editableActions)
{
  Component[] items! = menuState2.items;
  Action[] editableActionsCopy! = editableActions;
  Action[] toAdd! = timeline.actions - editableActions;
  Action[] toRemove! = editableActions - timeline.actions;

  // EnableInspectorRecording();
  // LogToInspector($'Updating editableActions, adding {toAdd.Length}, removing {toRemove.Length}...');

  // foreach(Action action! in timeline.actions) {
  //   LogToInspector($'timeline.actions: {action.id}');
  // }
  // foreach(Action action! in editableActions) {
  //   LogToInspector($'editableActions: {action.id}');
  // }
  // DisableInspectorRecording();


  // remove
  // HACK: `IndexOf` doesn't work on structs?
  Number[] editableIds! = editableActions.Map((i) => i.id);
  items -= toRemove.Map((i) => items[editableIds.IndexOf(i.id)]);
  editableActions -= toRemove;

  // EnableInspectorRecording();
  // LogToInspector($'After removing...');
  // foreach(Action action! in editableActions) {
  //   LogToInspector($'editableActions: {action.id}');
  // }
  // DisableInspectorRecording();

  // add
  editableActions += toAdd;
  foreach(Action i! in toAdd) {
    items += PageTimelineEditItemGenerator(i);
  }

  // EnableInspectorRecording();
  // LogToInspector($'After adding...');
  // foreach(Action action! in editableActions) {
  //   LogToInspector($'editableActions: {action.id}');
  // }
  // DisableInspectorRecording();

  // sort
  // HACK: `IndexOf` doesn't work on structs?
  Number[] timelineIds! = timeline.actions.Map((i) => i.id);
  editableActions = editableActions.SortedArray((i) => timelineIds.IndexOf(i.id));
  items = items.SortedArray((_, idx) => timelineIds.IndexOf(editableActions[idx].id));

  // EnableInspectorRecording();
  // LogToInspector($"After sorting...");
  // foreach(Action action! in editableActions) {
  //   LogToInspector($"actionMapp: {action.id}");
  // }
  // LogToInspector($'-----');
  // DisableInspectorRecording();

  menuState2.ReplaceItems(items);
  menuState2.Render();

  LoopIfConditionIsTrue();
}

rule: 'Show message when item has been added to timeline'
{
  WaitUntil(EvaluateOnce(timelineActionsId) != timelineActionsId, 99999);
  SmallMessage(AllPlayers(), $"Added to timeline: {timeline.actions.Last}");
  Loop();
}

// rule: 'My Rule'
// Event.OngoingPlayer
// if(menuState2.isOpen)
// if(menuState2.isFocused)
// if(menuState2.pageId == PAGE_TIMELINE_EDIT_ID)
// if(buttonsHeld == [Button.Reload])
// {
//   Number[] idToIdx! = actionsEditableCopy.Map((i) => i.id);
//   Component[] comps! = [];

//   // FIXME: it selects 0 items too
//   // FIXME: add wait(1), then wait(2), then wait(1) multiple times, it breaks

//   foreach(Action act! in selectedActions) {
//     comps += menuState2.items[idToIdx.IndexOf(act.id)];
    
//     if(actionsToRemove.Contains(act)) {
//       actionsToRemove.ModRemoveByValue(act);
//       comps.Last.color = COLOR_NEUTRAL;

//       EnableInspectorRecording();
//       LogToInspector($"unmarking {act.id}, {idToIdx.Length}, {idToIdx.IndexOf(act.id)}");
//       DisableInspectorRecording();
//     } else {
//       actionsToRemove.ModAppend(act);
//       comps.Last.color = COLOR_ERROR;

//       EnableInspectorRecording();
//       LogToInspector($"marking {act.id}, {idToIdx.Length}, {idToIdx.IndexOf(act.id)}");
//       DisableInspectorRecording();
      
//     }
//   }

//   menuState2.Render();  
// }
