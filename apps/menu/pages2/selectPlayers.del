import '../../../libs/menu/components/text.del';
import '../../../libs/menu/components/checkbox.del';
import '../../../libs/utils/string.formatters.del';
import '../../../libs/utils/player.sortedAllPlayers.del';
import '../_variables.del';

String PAGE_SELECT_PLAYERS_ID: 'selectPlayers';
String PAGE_SELECT_PLAYERS_NAME: 'Select Players';

rule: 'Player Settings/Select Players' 70
Event.OngoingPlayer
if(menuState2.pageId == PAGE_SELECT_PLAYERS_ID)
{
  menuState2.CreatePage(
    title: PAGE_SELECT_PLAYERS_NAME, 
    items: []
  );
}

rule: 'Player Settings/Select Players: Fix selected players when someone leaves'
Event.OngoingPlayer
{
  WaitForeverUntil(AllPlayers() != EvaluateOnce(AllPlayers()));

  selectedPlayers = selectedPlayers.FilteredArray((i) => EntityExists(i));

  Loop();
}

rule: 'Player Settings/Select Players: Update selected players without self'
Event.OngoingPlayer
{
  WaitForeverUntil(selectedPlayers != EvaluateOnce(selectedPlayers));

  selectedPlayersWithoutSelf = selectedPlayers.Remove(EventPlayer());

  Loop();
}

rule: 'Player Settings/Select Players: Rerender players' 70
Event.OngoingPlayer
if(menuState2.pageId == PAGE_SELECT_PLAYERS_ID)
{
  Component[][] list = [[], [], []];
  Component[][] titles = [[], [], []];

  Any[] renderedItemsIds = menuState2.items.Map((i) => i.id);

  for(Number team! = 0; team < sortedPlayersPerTeam.Length; team++) {
    foreach(Player player! in sortedPlayersPerTeam[team]) {
      Number existingIdx! = renderedItemsIds.IndexOf(player);

      if(existingIdx > -1) {
        list[team] += menuState2.items[existingIdx];
      } else {
        Checkbox checkbox = new Checkbox(
          text: $"{player}",
          defaultChecked: selectedPlayers.Contains(player)
        );

        checkbox.id = player;
        checkbox.onRender = (it) => {
          it.text = $"{PlayerWithHeroIconFormatter(player)}â€‹ (Slot {SlotFormatter(SlotOf(player))})";
        };
        checkbox.onChange = (checked, it) => {
          if(checked) selectedPlayers.ModAppend(player);
          else selectedPlayers.ModRemoveByValue(player);
        };

        list[team] += checkbox;
      }
    }


    if(list[team]) {
      if(titles[team - 1])
        titles[team] += new Text();

      titles[team] += new Text($"{team == 0 ? Team.Team1 : team == 1 ? Team.Team2 : Team.All}:");
      titles[team].Last.color = team == 0 ? Color.Team1 : Color.Team2;
    }
  }

  menuState2.ReplaceItems(titles[0] + list[0] + titles[1] + list[1] + titles[2] + list[2]);
  menuState2.RerenderAllItems();

  WaitForeverUntil(
    sortedPlayersPerTeam != EvaluateOnce(sortedPlayersPerTeam) ||
    menuState2.pageId != PAGE_SELECT_PLAYERS_ID
  );

  AbortIfConditionIsFalse();
  LoopIfConditionIsTrue();
}

rule: 'Player Settings/Select Players: Rerender heroes portraits' 70
Event.OngoingPlayer
if(menuState2.isOpen)
if(menuState2.pageId == PAGE_SELECT_PLAYERS_ID)
{
  WaitForeverUntil(
    sortedPlayersPerTeamPerSlot != EvaluateOnce(sortedPlayersPerTeamPerSlot) ||
    sortedPlayers.Map((i) => i.Hero()) != EvaluateOnce(sortedPlayers.Map((i) => i.Hero()))
  );

  // wait for rule that changes bot's name
  Wait(0.2);

  menuState2.RerenderAllItems();

  AbortIfConditionIsFalse();
  LoopIfConditionIsTrue();
}
