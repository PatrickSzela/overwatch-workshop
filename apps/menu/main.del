import '../../libs/menu/components/component.del'; 
import '../../libs/menu/components/componentWithValue.del'; 
import '../../libs/menu/components/text.del'; 
import '../../libs/menu/components/link.del'; 
import '../../libs/menu/components/numberInput.del'; 
import '../../libs/menu/components/toggle.del';
import '../../libs/menu/components/checkbox.del'; 
import '../../libs/menu/components/radio.del'; 
import '../../libs/menu/components/carousel.del'; 
import './_variables.del';
import './pages/_index.del';
import './pages2/index.del';
import '../../libs/utils/rules/pauseMatchTime.del';
import './customGameSettings.lobby';
import '../../libs/playerInfo.del';

// TODO: mark menu as dirty
// TODO: page creation on currentMenuState

// TODO: teleport/look at flag
// TODO: menus: player speed, gravity, attach player, communicate, invisibility, walk towards, more here https://workshop.codes/wiki/categories/actions
// TODO: tools - ruler, spheres

// TODO: test selected players with 2nd client

playervar Number[] switchFocusDescriptionIdx = [];

rule: 'Generate Menu State'
Event.OngoingPlayer
if(!IsDummyBot())
{
  menuState = new MenuState('root', [Button.Crouch, Button.Interact], EventPlayer() == HostPlayer());
  menuState.SetFocused();

  menuState2 = new MenuState(null, [], puppet: true);
  menuState2.AddMenuDescription(Description.New('\n', order: 9999));
}

rule: 'Generate Menu'
{
  DisableInspectorRecording();

  // TODO: add info about state being a variable of LocalPlayer
  menu = new Menu(LocalPlayer().menuState);
  menu2 = new Menu(LocalPlayer().menuState2, MenuLocation.Right);
}

rule: 'Hide diagnostics by default'
{
  // diagnosticsEnabled = false;
}

rule: 'Switch focused menu'
Event.OngoingPlayer
if(menuState2.isOpen)
if(EventPlayer().buttonsHeld == [BUTTON_SWITCH])
{
  if(currentMenuState == menuState) {
    menuState2.SetFocused();
  } else {
    menuState.SetFocused();
  }
}

rule: 'Create description about switching menu'
Event.OngoingPlayer
if(!IsDummyBot())
{
  switchFocusDescriptionIdx += menuState.AddMenuDescription(Description.New($'Press {ButtonFormatterSingle(BUTTON_SWITCH)}​ to switch to right side', COLOR_SWITCH, visible: false, order: 99));
  switchFocusDescriptionIdx += menuState2.AddMenuDescription(Description.New($'Press {ButtonFormatterSingle(BUTTON_SWITCH)}​ to switch to left side', COLOR_SWITCH, visible: false, order: 99));
}

rule: 'Show description on currently focused menu'
Event.OngoingPlayer
if(!IsDummyBot())
{
  WaitUntil(
    menuState.isFocused != EvaluateOnce(menuState.isFocused) ||
    menuState2.isOpen != EvaluateOnce(menuState2.isOpen),
  99999);

  menuState.descriptionsMenu[switchFocusDescriptionIdx[0]].visible = menuState.isFocused && menuState2.isOpen;
  menuState2.descriptionsMenu[switchFocusDescriptionIdx[1]].visible = menuState2.isFocused;

  menuState.Render();
  menuState2.Render();

  Loop();
}

rule: 'Close main menu when trying to do that in the 2nd one'
Event.OngoingPlayer
if(menuState2.isFocused)
if(buttonsHeld == menuState._toggleMenu)
{
  if(menuState.isOpen)
    menuState.Close();
  else
    menuState.Open();
}

rule: 'Open Select Players menu'
Event.OngoingPlayer
if(menuState.isOpen)
if(menuState.HistoryContains(PAGE_PLAYER_SETTINGS_ID))
{
  menuState2.Open();
  menuState2.GoTo(PAGE_SELECT_PLAYERS_ID, true);
  WaitUntil(!menuState.isOpen || !menuState.HistoryContains(PAGE_PLAYER_SETTINGS_ID), 99999);
  menuState2.Close();
}

rule: 'Pick position handle increase/decrease distance'
Event.OngoingPlayer
if(pickPosition.RULE_UpdateRaycastDistanceCondition())
{
  pickPosition.RULE_UpdateRaycastDistance();
}

rule: 'Player Info'
Event.OngoingPlayer
{
  PlayerInfo(playerName);
}
