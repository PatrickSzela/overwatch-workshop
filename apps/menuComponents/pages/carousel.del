import '../../../libs/utils/formatters.del';
import '../../../libs/menu/components/carousel.del';
import '../_variables.del';

String PAGE_DEBUG_CAROUSEL_ID: 'carousel';
String PAGE_DEBUG_CAROUSEL_NAME: 'Carousel';

MenuItem[] PageDebugCarouselItems() {
  Carousel[] carousels! = [
    new Carousel("Empty", []),
    new Carousel("One option", ["1"]),
    new Carousel("Two options", ["1", "2"]),
    new Carousel("Three options", ["1", "2", "3"]),
    new Carousel(
      text: "Three options with \"2\" as default value",
      options: ["1", "2", "3"],
      defaultValue: "2",
    ),
    new Carousel(
      text: "Custom formatter & events",
      options: AllHeroes(), 
    )
  ];

  carousels.Last.AddDescription("Every possible interaction will be logged to Inspector", Color.SkyBlue);
  carousels.Last.valueFormatter = (it) => HeroWithIconFormatter(it.value);
  carousels.Last.onChange = (value, it) => LogToInspector($"{it.text}: value changed to \"{value}\"");
  carousels.Last.onButtonDown = (button, it) => LogToInspector($"{it.text}: {button}​ button down");
  carousels.Last.onButtonUp = (button, it) => LogToInspector($"{it.text}: {button}​ button up");
  carousels.Last.onNavigate = (direction, it) => LogToInspector($"{it.text}: navigated {direction}");
  
  MenuItem[] menuItems! = [];

  for(Number i! = 0; i < carousels.Length; i++) {
    menuItems[i] = new MenuItem(child: carousels[i]);
  }

  menuItems.Last.onEnter = (it) => LogToInspector($"{it.child.text}: enter");
  menuItems.Last.onLeave = (it) => LogToInspector($"{it.child.text}: left");

  return menuItems;
}

rule: 'Debug/Carousel'
Event.OngoingPlayer
if(menuState.currentPage == PAGE_DEBUG_CAROUSEL_ID)
{
  menuState.CreatePage(PAGE_DEBUG_CAROUSEL_NAME, PageDebugCarouselItems);
}
