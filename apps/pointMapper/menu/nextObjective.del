import '../_variables.del';

String PAGE_NEXT_OBJECTIVE_ID: 'nextObjective';
String PAGE_NEXT_OBJECTIVE_NAME: 'Go to Next Objective';

void PageNextObjectiveGoToNextObjective() "Next Objective: Go to Next Objective" {
  forceContesting = false;
  Player[] dummiesSlice: dummiesContesting.Slice(1, dummiesContesting.Length);

  MinWait();
  Teleport(dummiesSlice, CurrentObjectivePosition());
  EnableCompletion();

  SmallMessageFixed(AllPlayers(), "Waiting until objective is captured...");

  foreach(Player player in AllPlayers()) {
    if(player.IsDummy()) continue;
    
    if(player.IsDead()) {
      Resurrect(player);
      MinWait();
    }

    player.Teleport(SpawnPoints(player.Team())[ObjectiveIndex()]);
    SetStatus(player, player, Status.Asleep, NUMBER_MAX);

    WaitForeverUntil(EvaluateOnce(ObjectiveIndex()) != ObjectiveIndex());

    ClearStatus(player, Status.Asleep);
    player.Teleport(CurrentObjectivePosition());
  }

  foreach(Player dummy in dummiesSlice) {
    Teleport(dummy, SpawnPoints(dummy.Team())[0]);
  }

  DisableCompletion();
  forceContesting = true;
}

Component PageNextObjectiveMenuItem() {
  Component nextObjective = new Component(PAGE_NEXT_OBJECTIVE_NAME);

  nextObjective.SetPrimaryAction("Apply", (it) => {
    PageNextObjectiveGoToNextObjective();
  });

  nextObjective.AddDescription(Description.New("For Clash, move yourself to the Team 2 and restart the server to map other objectives", Color.SkyBlue, true, 1));

  nextObjective.AddDescription(Description.New("If possible, it's preferable to set current Control Point from Lobby Settings", Color.SkyBlue, true, 1));

  return nextObjective;
}
