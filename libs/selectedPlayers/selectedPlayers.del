import '../utils/string.formatters.del';
import '../utils/vector.del';

playervar String playerName = $"{EventPlayer()}";

// TODO: mention that this class HAS TO be created in a rule since it uses a while loop in the constructor
class SelectedPlayers {
  public static Number TEXT_SIZE: 1.5;
  
  public Any[] arrows;

  // TODO: mention that BOTH arguments need to be from LocalPlayer()
  public constructor(in Player[] players, in Boolean visibility) {
    arrows = [];

    while(true) {      
      Number num! = AllPlayers().Length - arrows.Length;

      for(Number i! = 0; i < num; i++) {
        Number idx: EvaluateOnce(arrows.Length);

        arrows += CreateInWorldText(
          VisibleTo: visibility && HasSpawned(players[idx]) ? LocalPlayer() : null,
          // bots are bugged with CreateInWorldText, and changing their hero won't update the name above them...
          Header: players[idx] == LocalPlayer() ? "You are selected" : $"{HeroIconString(HeroOf(players[idx]))}â€‹ {players[idx].playerName}",
          Position: UpdateEveryFrame(
            LocalPlayer() == players[idx] ? 
              ScreenPositionToWorld(0, -1) : 
              players[idx].EyePosition() + Up() * 0.75
          ),
          // scale can't be reevaluated...
          Scale: TEXT_SIZE, // LocalPlayer() == players[idx] ? 2 : 3,
          Clipping: Clipping.DoNotClip,
          Reevaluation: InworldTextRev.VisibleToPositionStringAndColor,
          TextColor: [Team.All, Team.Team2].Contains(players[idx].Team()) ? Color.Team2 : Color.Team1
        );

        MinWait();
      }

      WaitUntil(AllPlayers().Length > arrows.Length, 99999);
    }
  }
}
