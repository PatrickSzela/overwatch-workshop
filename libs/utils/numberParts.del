import './number.del';

// [0] - sign, '-1' = decimal point
Number[] NumberToParts(Number number!, Number integralLength! = -1, Number fractionalLength! = -1) "Number To Parts" {
  Number sign! = Sign(number);
  Number[][] parts! = [[], []];
  Boolean fractionalTime! = false;
  String string! = $"{AbsoluteValue(number)}";

  for(Number i! = 0; i < string.Length; i++) {
    if(CharInString(string, i) == ".") 
      fractionalTime = true;
    else
      parts[fractionalTime ? 1 : 0] += allNumbersAsStrings.IndexOf(CharInString(string, i));
  }
  
  if(integralLength == -1) integralLength = parts[0].Length;
  if(fractionalLength == -1) fractionalLength = parts[1].Length;

  parts[0] = parts[0].Slice(parts[0].Length - integralLength, integralLength);
  parts[1] = parts[1].Slice(0, fractionalLength);

  Number[][] parts2! = [[], []];
  for(Number i! = 0; i < parts[0].Length; i++)
    parts2[0][integralLength - i - 1] = parts[0][parts[0].Length - i - 1];
  for(Number i! = 0; i < fractionalLength; i++)
    parts2[1][i] = parts[1][i];

  parts = parts2;

  return [sign] + parts[0] + (fractionalLength ? [-1] + parts[1] : []);
}

Number NumberFromParts(Number[] parts!) "Number From Parts" {
  Number sign! = parts[0] == 0 ? 1 : parts[0];
  Number[] values! = [0, 0];
  
  Number fractionalIdx! = parts.Slice(1, parts.Length).IndexOf(-1);
  Number[][] arrays! = [
    parts.Slice(1, fractionalIdx == -1 ? parts.Length : fractionalIdx),
    fractionalIdx == -1 ? [] : parts.Slice(fractionalIdx + 2, parts.Length)
  ];

  for(Number i! = 0; i < arrays.Length; i++) {
    for(Number x! = 0; x < arrays[i].Length; x++) {
      values[i] += (10 ^ ((arrays[i].Length - 1) - x)) * arrays[i][x];
    }
  }

  return sign * (values[0] + values[1] / (10 ^ arrays[1].Length));
}