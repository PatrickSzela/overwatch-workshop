import './number.del';

Boolean IsScopedIn(Player player = EventPlayer()): 
  [Hero.Ana, Hero.Ashe, Hero.Widowmaker].Contains(player.Hero()) && player.IsFiringSecondary();

Boolean IsHoldingShield(Player player = EventPlayer()):
  [Hero.Reinhardt, Hero.Brigitte].Contains(player.Hero()) && player.IsFiringSecondary();

Boolean IsEmoting(Player player = EventPlayer()):
  $" {IsCommunicatingAnyEmote(player)}" != " 0";

Boolean IsHUDPreferred(Player player): 
  IsScopedIn(player) || IsEmoting(player) || IsDead(player) ||
    player.Hero() == Hero.Reinhardt && IsFiringSecondary(player) ||
    player.Hero() == Hero.Bastion && IsUsingUltimate(player) ||
    player.Hero() == Hero.Junkrat && IsUsingUltimate(player) ||
    player.Hero() == Hero.Mei && IsUsingAbility1(player) ||
    player.Hero() == Hero.Brigitte && IsFiringSecondary(player);

Boolean IsUsingAbility(Player player, Button button):
  // button == Button.PrimaryFire ? IsFiringPrimary(player) :
  // button == Button.SecondaryFire ? IsFiringSecondary(player) :
  button == Button.Ability1 ? IsUsingAbility1(player) :
  button == Button.Ability2 ? IsUsingAbility2(player) :
  button == Button.Ultimate ? IsUsingUltimate(player) :
  button == Button.Reload ? IsReloading(player) :
  button == Button.Melee ? IsMeleeing(player) :
  button == Button.Jump ? IsJumping(player) :
  button == Button.Crouch ? IsCrouching(player) : false;

Vector GetDirectionFromPlayerEyes(Player player, Vector vector): 
  player.EyePosition().DirectionTowards(vector);

Boolean IsSpectator(in Player player = EventPlayer()): SlotOf(player) < 0;

Boolean IsKillable(in Player player = EventPlayer()):
  !HasStatus(player, Status.Invincible) && 
  !HasStatus(player, Status.Unkillable) && 
  !HasStatus(player, Status.PhasedOut);

void KillIfKillable(in Player player = EventPlayer(), in Player killer) {
  if(IsKillable(player)) {
    Kill(player, killer);
  }
}

void KillIfKillableElseDamage(in Player player = EventPlayer(), in Player killer) {
  if(IsKillable(player)) {
    Kill(player, killer);
  } else {
    Damage(player, killer, NUMBER_MAX);
  }
}
