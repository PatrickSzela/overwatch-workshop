import './array.del';

globalvar Number[] allNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
globalvar String[] allNumbersAsStrings = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];

Number Sign(in Number value): value < 0 ? -1 : value > 0 ? 1 : 0;

# Splits `number` into an array of digits.
# - First value contains a sign of the `number` (`-1` for negative, `0` for zero, `1` for positive).
# - Further values contain digits of the `number`, except for `-2` which indicates decimal point.
Number[] SplitNumber(Number number!, Number integralLength! = -1, Number fractionalLength! = 3) "Number To Parts" {
  Number[] integral! = [];
  Number[] fractional! = [];
  Number[] prependIntegral! = [];

  Number int! = AbsoluteValue(number).Floor();
  Number frac! = AbsoluteValue(number) % 1;

  // integral
  while(int >= 1) {
    integral += int % 10;
    int = (int / 10).Floor();
  }

  for(Number i! = 0; i < integralLength - integral.Length; i++) {
    prependIntegral += 0;
  }
  
  // fractional
  for(Number i! = 0; i < fractionalLength; i++) {    
    fractional += (frac * 10).Floor();
    frac = (frac * 10) % 1;
  }

  return [Sign(number)] + 
    (prependIntegral + Reverse(integral)) + 
    (fractional.Length ? [-2] + fractional : []);
}

# Converts array split by `SplitNumber()` back into a Number. 
Number JoinNumber(Number[] parts!) "Join Number" {
  Number sign! = parts[0] == 0 ? 1 : parts[0];
  Number number! = 0;

  Number sliceIdx! = (parts.IndexOf(-2) == -1 ? 999 : parts.IndexOf(-2)) - 1; // `- 1` because of the sign at the beginning
  Number[][] parts2! = [Reverse(parts.Slice(1, sliceIdx)), parts.Slice(sliceIdx + 2, 999)]; // `+ 2` same as above

  for(Number side! = 0; side < parts2.Length; side++) {
    for(Number i! = 0; i < parts2[side].Length; i++) {
      number += (10 ^ (side ? -(i + 1) : i)) * parts2[side][i];
    }
  }

  return sign * number;
}
