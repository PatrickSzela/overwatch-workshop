import './utils/hero.baseSpeed.del';
import './utils/string.formatters.del';
import './utils/player.sortedAllPlayers.del';
import './utils/array.del';

struct PlayerInfoProps {
  public Number enabled;
  public Number showTransform;
  public Number showButtons;
  public Number showStatuses;

  public ref void Enable() {
    enabled++;
  }

  public ref void Disable() {
    enabled = Max(0, enabled - 1);
  }

  public ref void EnableTransform() {
    showTransform++;
  }

  public ref void DisableTransform() {
    showTransform = Max(0, showTransform - 1);
  }
  
  public ref void EnableButtons() {
    showButtons++;
  }

  public ref void DisableButtons() {
    showButtons = Max(0, showButtons - 1);
  }

  public ref void EnableStatuses() {
    showStatuses++;
  }

  public ref void DisableStatuses() {
    showStatuses = Max(0, showStatuses - 1);
  }

  public static PlayerInfoProps BASE: 
    {enabled: false, showButtons: false, showStatuses: false, showTransform: false};
}

playervar PlayerInfoProps playerInfoProps = PlayerInfoProps.BASE;

Any CreatePlayerInfoHud(in Boolean enabled, in String text, in Number idx):
  CreateHudText(
    enabled ? LocalPlayer() : null,
    null,
    UpdateEveryFrame(text),
    null,
    Location.Right,
    50 + sortedPlayers.IndexOf(EventPlayer()) * 10 + idx,
    Reevaluation: HudTextRev.VisibleToSortOrderStringAndColor
  );

void PlayerInfo(in String playerName, in Button[] buttonsHeld = [], in String[] appliedStatuses = []) {
  String hero: HeroWithIconFormatter(EventPlayer().Hero());
  String health: $"{EventPlayer().Health() + 0.0001}​ / {EventPlayer().MaxHealth() + 0.0001}​ HP";
  String position: $"Pos: {EventPlayer().Position()}";
  String facing: $"Fac: {EventPlayer().FacingDirection()}";
  String speed: $"Spd: ({HorizontalSpeedOf() + 0.0001}, {VerticalSpeedOf() + 0.0001})​ m/s ({RoundToInteger(HorizontalSpeedOf() / baseSpeed * 100, Rounding.Nearest)}%)";
  String buttons: $"Buttons: {buttonsHeld ? InlineJoin10(buttonsHeld, ', ') : '-'}";
  String statuses: $"Statuses: {appliedStatuses ? InlineJoin10(appliedStatuses, ', ') : '-'}";

  CreatePlayerInfoHud(
    LocalPlayer().playerInfoProps.enabled, 
    $"{playerName}: {hero}, {health}",
    0
  );

  CreatePlayerInfoHud(
    LocalPlayer().playerInfoProps.showTransform, 
    $"{position}, {facing}, {speed}",
    1
  );

  CreatePlayerInfoHud(
    LocalPlayer().playerInfoProps.showButtons, 
    buttons,
    2
  );

  CreatePlayerInfoHud(
    LocalPlayer().playerInfoProps.showStatuses, 
    statuses,
    3
  );
}
