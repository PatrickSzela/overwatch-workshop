import '../utils/string.formatters.del';
import '../menu/components/component.del';

class PickPosition {
  public static Number MAX_DISTANCE: 100;
  public static Number RADIUS: 0.25;
  public static Number TEXT_SIZE: 1;
  public static String CHANGE_DISTANCE_DESCRIPTION(in Button increase, in Button decrease): $"Use {ButtonFormatterSingle_Underscores(increase)}​ or {ButtonFormatterSingle_Underscores(decrease)}​ to increase or decrease Ray Cast distance";

  public static Vector RayCast(in Player player, in Number distance = MAX_DISTANCE): RayCastHitPosition(player.EyePosition(), player.EyePosition() + player.FacingDirection() * distance, [], [], false);
  public Vector position: PickPosition.RayCast(EventPlayer(), rayCastDistance);
  public Number distance: EventPlayer().EyePosition().DistanceTo(position);
  public Number rayCastDistance;
  public Boolean active;
  private Number changeDistanceOffset;

  private Any[] effects = [];
  private Any[] texts = [];
  private Any[] additionalEffects = [];
  private Any[] additionalTexts = [];

  public constructor() {
    rayCastDistance = MAX_DISTANCE;
    active = false;
  }

  public void Enable(Color color!) "[PickPosition] Enable" {
    active = true;

    Render(
      effectStorage: effects,
      textStorage: texts,
      color: color,
      position: position,
      text: $"Position: {position}\nRay Cast Distance: {rayCastDistance + 0.0001}m"
    );
  }

  public void Disable() "[PickPosition] Disable" {
    active = false;

    foreach(Any effect! in effects)
      DestroyEffect(effect);
    foreach(Any effect! in texts)
      DestroyInWorldText(effect);

    effects = [];
    texts = [];
  }

  public void StartChangingRaycaseDistance(in Number offset) {
    changeDistanceOffset = offset;
  }

  public void StopChangingRaycaseDistance() {
    changeDistanceOffset = 0;
  }

  public Boolean RULE_UpdateRaycastDistanceCondition(): active && changeDistanceOffset;

  # NOTE: only use in rule
  public void RULE_UpdateRaycastDistance() "[PickPosition] Update Raycast Distance" {
    rayCastDistance = Max(1, rayCastDistance + changeDistanceOffset);
    MinWait();
    LoopIfConditionIsTrue();
  }

  public void EnhanceComponent(PickPosition pickPosition, Component component) "[PickPosition] Enchance Component" {
    component.AddDescription(Description.New(PickPosition.CHANGE_DISTANCE_DESCRIPTION(BUTTON_INCREASE, BUTTON_DECREASE), order: -20));

    component.onEnter = (it) => {
      pickPosition.Enable(Color.Red);
    };
    component.onLeave = (it) => {
      pickPosition.Disable();
    };

    component.onButtonDown = (button, it) => {
      if(buttonsHeld == [BUTTON_INCREASE])
        pickPosition.StartChangingRaycaseDistance(0.1);
      else if(buttonsHeld == [BUTTON_DECREASE])
        pickPosition.StartChangingRaycaseDistance(-0.1);
    };
    component.onButtonUp = (button, it) => {
      pickPosition.StopChangingRaycaseDistance();
    };
  }

  // this CANNOT be a subroutine
  public void CreateAdditionalSphere(in Vector position!, in Color color!, in String text! = null, in Vector lineEnd! = null, in Boolean visibility! = true) {
    Render(
      effectStorage: additionalEffects,
      textStorage: additionalTexts,
      color: color,
      position: position,
      text: text,
      lineEnd: lineEnd,
      visibility: visibility
    );
  }

  public void DestroyAdditionalSpheres() "[PickPosition] Disable" {
    foreach(Any effect! in additionalEffects)
      DestroyEffect(effect);
    foreach(Any effect! in additionalTexts)
      DestroyInWorldText(effect);

    additionalEffects = [];
    additionalTexts = [];
  }

  public void Render(ref Any[] effectStorage!, ref Any[] textStorage!, in Vector position!, in Color color!, in String text! = null, in Vector lineEnd! = null, in Boolean visibility! = true) {
    effectStorage += CreateEffect(
      VisibleTo: visibility ? EventPlayer() : null,
      Type: Effect.Sphere,
      Color: color,
      Position: UpdateEveryFrame(position),
      Radius: RADIUS,
      Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
    );

    if(lineEnd != null) {
      effectStorage += CreateBeamEffect(
        VisibleTo: visibility ? EventPlayer() : null,
        BeamType: BeamType.GrappleBeam,
        StartPosition: lineEnd,
        EndPosition: UpdateEveryFrame(position),
        Color: Color.Black,
        Reevaluation: EffectRev.VisibleToPositionRadiusAndColor
      );
    }

    if(text != null) {
      textStorage += CreateInWorldText(
        VisibleTo: visibility ? EventPlayer() : null,
        Header: $"{text}\n",
        Position: UpdateEveryFrame(position),
        Scale: TEXT_SIZE,
        Clipping: Clipping.DoNotClip,
        Reevaluation: InworldTextRev.VisibleToPositionStringAndColor
      );
    }
  }
}
