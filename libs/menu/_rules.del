import './menuState.del';
import '../utils/helpers.del';

// playervar MenuState menuState;
# List of currently pressed buttons by a player.
playervar Button[] buttonsHeld = [];

// TODO: move logic to struct

rule: '[MenuState] Freeze player'
Event.OngoingPlayer
if(menuState.open)
{
  EventPlayer().SetMoveSpeed(0);

  foreach (Button button! in allButtons)
    DisallowButton(EventPlayer(), button);

  WaitForeverUntil(!menuState.open);

  // TODO: store & restore previous speed in case it was modified - how?
  EventPlayer().SetMoveSpeed(100);

  foreach (Button button! in allButtons)
    AllowButton(EventPlayer(), button);
}

//
// navigation
//
void NavigationHelper(Vector direction!) "[MenuState]: Navigation Helper" {
  menuState.Navigate(direction);

  Wait(0.5, WaitBehavior.AbortWhenFalse);

  while(true) {
    Wait(0.075, WaitBehavior.AbortWhenFalse);
    menuState.Navigate(direction);
  }
}

rule: '[MenuState]: Interacted with menu - Up'
Event.OngoingPlayer
if(menuState.open)
if(ThrottleOf(EventPlayer()).Z > 0.5)
{
  NavigationHelper(Up());
}

rule: '[MenuState]: Interacted with menu - Down'
Event.OngoingPlayer
if(menuState.open)
if(ThrottleOf(EventPlayer()).Z < -0.5)
{
  NavigationHelper(Down());
}

rule: '[MenuState]: Interacted with menu - Left'
Event.OngoingPlayer
if(menuState.open)
if(ThrottleOf(EventPlayer()).X < -0.5)
{
  NavigationHelper(Left());
}

rule: '[MenuState]: Interacted with menu - Right'
Event.OngoingPlayer
if(menuState.open)
if(ThrottleOf(EventPlayer()).X > 0.5)
{
  NavigationHelper(Right());
}

//
// button interactions
//

void ButtonHelper(in Button button) {
  buttonsHeld += button;
  menuState.ButtonDown(button);
  WaitForeverUntil(!EventPlayer().IsButtonHeld(button));
  menuState.ButtonUp(button);
  buttonsHeld -= button;
}

rule: '[MenuState]: Interacted with menu - Ability 1'
Event.OngoingPlayer
if(EventPlayer().IsButtonHeld(Button.Ability1))
{
  ButtonHelper(Button.Ability1);
}

rule: '[MenuState]: Interacted with menu - Ability 2'
Event.OngoingPlayer
if(EventPlayer().IsButtonHeld(Button.Ability2))
{
  ButtonHelper(Button.Ability2);
}

rule: '[MenuState]: Interacted with menu - Crouch'
Event.OngoingPlayer
if(EventPlayer().IsButtonHeld(Button.Crouch))
{
  ButtonHelper(Button.Crouch);
}

rule: '[MenuState]: Interacted with menu - Interact'
Event.OngoingPlayer
if(EventPlayer().IsButtonHeld(Button.Interact))
{
  ButtonHelper(Button.Interact);
}

rule: '[MenuState]: Interacted with menu - Jump'
Event.OngoingPlayer
if(EventPlayer().IsButtonHeld(Button.Jump))
{
  ButtonHelper(Button.Jump);
}

rule: '[MenuState]: Interacted with menu - Melee'
Event.OngoingPlayer
if(EventPlayer().IsButtonHeld(Button.Melee))
{
  ButtonHelper(Button.Melee);
}

rule: '[MenuState]: Interacted with menu - Primary Fire'
Event.OngoingPlayer
if(EventPlayer().IsButtonHeld(Button.PrimaryFire))
{
  ButtonHelper(Button.PrimaryFire);
}

rule: '[MenuState]: Interacted with menu - Reload'
Event.OngoingPlayer
if(EventPlayer().IsButtonHeld(Button.Reload))
{
  ButtonHelper(Button.Reload);
}

rule: '[MenuState]: Interacted with menu - Secondary Fire'
Event.OngoingPlayer
if(EventPlayer().IsButtonHeld(Button.SecondaryFire))
{
  ButtonHelper(Button.SecondaryFire);
}

rule: '[MenuState]: Interacted with menu - Ultimate'
Event.OngoingPlayer
if(EventPlayer().IsButtonHeld(Button.Ultimate))
{
  ButtonHelper(Button.Ultimate);
}


rule: 'Render menu' 99999
Event.OngoingPlayer
{
  WaitForeverUntilConditionChanges(menuWindows.Map((i) => i.logicActions));

  for(Number i = 0; i < menuWindows.Length; i++) {
    menuWindows[i].RULE_Logic(menuState.hideKeybindTextWhenClosed);
  }

  Loop();
}
