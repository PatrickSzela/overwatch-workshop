import '../utils/array.del';
import './menuState.del';

// TODO: mention support for up to 1 children in Component
// TODO: mention about lambda size limit and why its better to use rules for longer code (but there might be some race conditions happening, so better call subroutine in callback)
// TODO: add info that if child is provided in Component, text will be ignored
// TODO: support multiple title rows & closed titles rows
// TODO: automatically handle scrollable height instead of always forced value (calculate based on amount of hud items and size of description & title)

enum MenuLocation {
  Left,
  Center,
  Right
}

// this class is required because text/effect that's created in a OngoingPlayer rule will be removed when the player leaves the match...
class Menu {
  public static Number MAX_ITEMS: 15;

  public Any[] hudTexts;

  public constructor(ref MenuState state, ref MenuWindow window, in MenuLocation location = MenuLocation.Left) {
    GenerateHUDTexts(state, window, location);
  }

  private String ReplaceInputBindings(in String string): string
    .Replace($"_{Button.PrimaryFire}_", InputBindingString(Button.PrimaryFire))
    .Replace($"_{Button.SecondaryFire}_", InputBindingString(Button.SecondaryFire))
    .Replace($"_{Button.Ability1}_", InputBindingString(Button.Ability1))
    .Replace($"_{Button.Ability2}_", InputBindingString(Button.Ability2))
    .Replace($"_{Button.Ultimate}_", InputBindingString(Button.Ultimate))
    .Replace($"_{Button.Reload}_", InputBindingString(Button.Reload))
    .Replace($"_{Button.Melee}_", InputBindingString(Button.Melee))
    .Replace($"_{Button.Jump}_", InputBindingString(Button.Jump))
    .Replace($"_{Button.Crouch}_", InputBindingString(Button.Crouch))
    .Replace($"_{Button.Interact}_", InputBindingString(Button.Interact));

  private Any CreateHudTextHelper(ref MenuState state, ref MenuWindow window, in Number i, Location location) { 
    Number num: EvaluateOnce(i);

    return CreateHudText(
      VisibleTo: window.renderedTexts.merged[num].text && state.enabled ? LocalPlayer() : null,
      Subheader: ReplaceInputBindings(window.renderedTexts.merged[num].text),
      Location: location, 
      SortOrder: num - 100, 
      Reevaluation: HudTextRev.VisibleToSortOrderStringAndColor,
      SubheaderColor: window.renderedTexts.merged[num].color
    );
  }

  public void GenerateHUDTexts(ref MenuState state, ref MenuWindow window, in MenuLocation location = MenuLocation.Left) {
    for(Number i! = 0; i < MAX_ITEMS + 10; i++) {
      if(location == MenuLocation.Left)
        hudTexts[i] = CreateHudTextHelper(state, window, i, Location.Left);
      else if(location == MenuLocation.Right)
        hudTexts[i] = CreateHudTextHelper(state, window, i, Location.Right);
      else
        hudTexts[i] = CreateHudTextHelper(state, window, i, Location.Top);
    }
  }
}
