import '../utils/dictionary.del';
import '../utils/formatters.del';
import '../utils/other.del';
import './menu.del';
import './components/menuItem.del';

# List of currently pressed buttons by a player.
playervar Button[] buttonsHeld = [];

struct ScrollOffset {
  public Number visible;
  public Number scroll;
}

struct Previous<T> {
  public T current;
  public T previous;
}

struct RenderedText {
  public Color color;
  public String text;
}

# Holds current state of `Menu` for a player and handles logic for displaying and controlling every `MenuItem` and its derivatives.
class MenuState {
  # Button used to go back to the previous page (or close menu when in root).
  public static Button BUTTON_GO_BACK: Button.Ultimate;
  # Maximum number of visible menu items.
  public static Number MAX_MENU_ITEMS: Menu.MAX_MENU_ITEMS;

  # Whether player has access to menu.
  public Boolean isEnabled;
  # Whether menu is currently open.
  public Boolean isOpen;
  # Combination of buttons used to toggle menu on and off.
  public Button[] _toggleMenu;
  public MenuItem[] currentMenuItems = [];
  // public String[] renderedTexts = [];
  // public Color[] renderedColors = [];
  public Any[] history = [];
  public Any[] titles = [];
  public Any currentMenuID: history.Last;
  public ScrollOffset[] scrollOffset;
  public Number hoveredItemIdx = 0;
  public Any _rootID;

  private MenuItem[] updateQueued = [];

  public RenderedText[] renderedTitle = [];
  public RenderedText[] renderedSeparators = [];
  public RenderedText[] renderedItems = [];
  public RenderedText[] renderedDescription = [];
  public RenderedText[] renderedAllTexts = [];
  public MenuItem hoveredItem: currentMenuItems[hoveredItemIdx];
  public Boolean internalNavigationEnabled;
  public Description[] description;
  # Dictionary to store custom variables created at runtime.
  # 
  # TODO: remove it.
  public Dictionary<String, Any> variables = {Keys: [], Values: []};

  Number firstItemIdx: currentMenuItems.IndexOf(currentMenuItems.FilteredArray((i, idx) => !i.disabled).First);
  Number lastItemIdx: currentMenuItems.IndexOf(currentMenuItems.FilteredArray((i, idx) => !i.disabled).Last);

  # Currently assigned global menu.
  protected Menu _menu;
  # Player to which this `MenuState` is assigned to.
  protected Player _player;

  public constructor(ref Menu menu, in Any rootID, in Button[] toggleMenu) {
    _menu = menu;
    _player = EventPlayer();
    _toggleMenu = toggleMenu;
    _rootID = rootID;

    history = [rootID];
    scrollOffset = [];
    currentMenuItems = [];
    renderedTitle = [];
    renderedSeparators = [];
    renderedItems = [];
    renderedDescription = [];
    renderedAllTexts = [];    
    internalNavigationEnabled = true;
    isEnabled = EventPlayer() == HostPlayer();

    updateQueued = [];

    Render();
  }

  // helpers
  public void SetTitle(in String title) {
    titles[history.Length - 1] = title;
    RenderTitle();
  }
  
  public void SetEnabled(Boolean enabled!) "[MenuState] Set Enabled" {
    if(enabled != isEnabled) {
      if(isOpen) Close();
      isEnabled = enabled;
    }
  }  

  public void AddItems(in MenuItem[] items) {
    updateQueued += items;
    currentMenuItems += items;

    if(hoveredItem.disabled || scrollOffset.Length < history.Length) {
      scrollOffset[history.Length - 1] = {visible: firstItemIdx, scroll: 0};
      HandleScroll();
    }
  }

  // phase 1: handle events
  public void Open() "[MenuState] Open" {
    if(!isOpen && isEnabled) {
      isOpen = true;

      hoveredItem.OnEnter();
      Render();

      _player.SetMoveSpeed(0);

      foreach (Button button! in allButtons)
        DisallowButton(_player, button);
    }
  }

  public void Close() "[MenuState] Close" {
    if(isOpen) {
      isOpen = false;
      
      hoveredItem.OnLeave();
      Render();

      // TODO: store & restore previous speed in case it was modified - how?
      _player.SetMoveSpeed(100);

      foreach (Button button! in allButtons)
        AllowButton(_player, button);
    }
  }

  public void CreatePage(String title!, () => MenuItem[] items!, Description[] descriptions! = []) "[MenuState]: Create Page" {
    SetTitle(title);
    AddItems(items());

    foreach(Description desc! in descriptions)
      AddDescription(desc);

    if(history.Length == 1 && internalNavigationEnabled) {
      Description desc1: {text: "Use [↑] or [↓] to navigate menu", order: -1, ..DESCRIPTION_BASE};
      Description desc2: {text: $"Press {ButtonFormatterSingle(BUTTON_GO_BACK)}​ to go back", order: -1, ..DESCRIPTION_BASE};
      AddDescription(desc1);
      AddDescription(desc2);
    }

    if(isOpen) {
      hoveredItem.OnEnter();
      Render();
    }
  }

  public void DestroyPage() "[MenuState]: Destroy Page" {
    if(isOpen) {
      hoveredItem.OnLeave();
    }

    buttonsHeld = [];
    description = [];

    foreach(MenuItem menuItem! in currentMenuItems) {
      if(menuItem.child) {
        if(menuItem.child.child)
          delete(menuItem.child.child);
        delete(menuItem.child);
      }

      delete(menuItem);
    }

    currentMenuItems = [];
  }
  
  public virtual void Navigate(Vector direction!) "[MenuState]: Navigate" {
    hoveredItem.OnNavigate(direction);
    updateQueued += hoveredItem;

    if(internalNavigationEnabled && (direction == Down() || direction == Up())) {
      Number offset! = 0;
      Number hov! = hoveredItemIdx;

      if(direction == Down()) {
        Number nextItemIdx! = currentMenuItems.IndexOf(currentMenuItems.FilteredArray((i, idx) => !i.disabled && idx > hov).First);

        offset = (nextItemIdx == -1 ? firstItemIdx : nextItemIdx) - hov;
      } else if(direction == Up()) {
        Number prevItemIdx! = currentMenuItems.IndexOf(currentMenuItems.FilteredArray((i, idx) => !i.disabled && idx < hov).Last);

        offset = (prevItemIdx == -1 ? lastItemIdx : prevItemIdx) - hov;
      }

      if(offset != 0) {
        hoveredItem.OnLeave();
        scrollOffset[history.Length - 1].visible += offset;
        HandleScroll(); 
        hoveredItem.OnEnter();
        updateQueued += hoveredItem;
      }
    }

    Render();
  }

  public virtual void ButtonDown(in Button button!) {
    buttonsHeld += button;

    if(!isOpen) {
      if(buttonsHeld == _toggleMenu) {
        Open();
      }
    } else {
      hoveredItem.OnButtonDown(button);

      if(internalNavigationEnabled) {
        if(buttonsHeld == _toggleMenu) {
          Close();
        } else if(buttonsHeld == [BUTTON_GO_BACK]) {
          GoBack();
        }
      }
    }

    if(isOpen) {
      updateQueued += hoveredItem;
      Render();
    }
  }

  public virtual void ButtonUp(Button button!) "[MenuState]: Button Up" {
    // when changing page `buttonsHeld` is being cleared
    if(!buttonsHeld.Contains(button)) return;

    ModifyVariable(buttonsHeld, Operation.RemoveFromArrayByValue, button);

    if(isOpen) {
      hoveredItem.OnButtonUp(button);
      updateQueued += hoveredItem;
      Render();
    }
  }

  // phase 3: render
  public void RenderClosedItems() {
    renderedAllTexts = [
      { 
        text: $"Press {ButtonFormatter(_toggleMenu)}​ to toggle Menu", 
        color: Color.White
      }
    ];
  }

  public void RenderTitle() {
    renderedTitle = [
      { 
        text: (titles.Length > 3 ? "... / " : "") + Join(titles.Slice(titles.Length - 3, 3), " / "), 
        color: Color.White
      }
    ];
  }

  public void RenderSeparators() "t" {
    renderedSeparators = [
      { 
        text: $"──────────────────────{currentMenuItems.Length < MAX_MENU_ITEMS ? '─' : scrollOffset.Last.scroll == 0 ? '△' : '▲'}──────────────────────", 
        color: Color.White 
      },
      {
        text: $"──────────────────────{currentMenuItems.Length < MAX_MENU_ITEMS ? '─' : scrollOffset.Last.scroll == currentMenuItems.Length - MAX_MENU_ITEMS ? '▽' : '▼'}──────────────────────",
        color: Color.White
      }
    ];
  }

  public void RenderDescription() {
    Description[] descriptionArr! = hoveredItem.description;
    if(hoveredItem.child) {
      foreach(Description arr! in hoveredItem.child.description)
        descriptionArr += arr;

      if(hoveredItem.child.child) {
        foreach(Description arr! in hoveredItem.child.child.description)
          descriptionArr += arr;
      }
    }

    foreach(Description arr! in description)
      descriptionArr += arr;

    Any[][] descr = descriptionArr.Map((i) => <Any[]>[i.text, i.color, i.visible, i.order]).FilteredArray((i) => i[2]).SortedArray((i) => i[3]);

    renderedDescription = descr.Map((i) => <RenderedText>{text: i[0], color: i[1]});
  }

  public void PrepareVisibleItems() {
    foreach(MenuItem item! in updateQueued) {
      // called here, not in Component because it won't work
      if(item.child) {
        if(item.child.child)
          item.child.child.FormatText();
        item.child.FormatText();
      }

      item.FormatText();
    }

    if(updateQueued.Contains(hoveredItem))
      RenderDescription();

    updateQueued = [];
  }

  public void RenderVisibleItems() {
    // DisableInspectorRecording();
    MenuItem[] visibleItems! = currentMenuItems.Slice(scrollOffset.Last.scroll, MAX_MENU_ITEMS);

    renderedItems = visibleItems.Map((i, idx) => <RenderedText>{ 
      text: $"{!i.disabled ? hoveredItemIdx == idx + scrollOffset.Last.scroll ? '● ' : '○ ' : ''}{i.renderedText}",
      color: i.color 
    });
  }

  public void MergeTexts() {
    renderedAllTexts = renderedTitle + [renderedSeparators[0]] + renderedItems;

    if(currentMenuItems.Length > MAX_MENU_ITEMS || renderedDescription.Length)
      renderedAllTexts += [renderedSeparators[1]];

    renderedAllTexts += renderedDescription;

    if(renderedAllTexts.Length > _menu.hudTexts.Length)
      SmallMessage(EventPlayer(), $"Not enough HUD items available ({renderedAllTexts.Length}​ requested, {_menu.hudTexts.Length}​ available)");
  }

  public void Render() "[MenuState] Render" {
    if(isOpen) {
      PrepareVisibleItems();
      RenderVisibleItems();
      MergeTexts();
    } else {
      RenderClosedItems();
    }
  }

  private void HandleScroll() "[MenuState]: Handle Scroll" {
    Number idx: history.Length - 1;
    Number offset! = 0;

    if(scrollOffset.Last.visible > MAX_MENU_ITEMS - 1) {
      offset = scrollOffset.Last.visible - (MAX_MENU_ITEMS - 1);
      scrollOffset[idx] = {visible: MAX_MENU_ITEMS - 1, scroll: scrollOffset.Last.scroll + offset};
    } else if(scrollOffset.Last.visible < 0) {
      offset = scrollOffset.Last.visible;
      scrollOffset[idx] = {visible: 0, scroll: scrollOffset.Last.scroll + offset};
    }

    CalculateCurrentIdx();
    RenderSeparators();
  }

  private void CalculateCurrentIdx() {
    hoveredItemIdx = scrollOffset.Last.visible + scrollOffset.Last.scroll;
  }

  public virtual void GoTo(Any id!) "[MenuState]: Go To" {
    DestroyPage();
    history += id;
  }

  public virtual void GoBack() "[MenuState]: Go Back" {    
    if(history.Length == 1) {
      Close();
      return;
    }

    DestroyPage();
    
    history = history.Slice(0, history.Length - 1);
    titles = titles.Slice(0, history.Length);
    scrollOffset = scrollOffset.Slice(0, history.Length);

    CalculateCurrentIdx();
    RenderSeparators();
  }

  public void AddDescription(in Description desc) {
    this.description += desc;
  }

  public void WaitUntilButtonDown(in Any id!, in Button button!) {
    WaitUntil(onButtonDown(id, button), 99999);
  }

  public void WaitUntilButtonUp(in Any id!, in Button button!) {
    WaitUntil(!onButtonDown(id, button), 99999);
  }

  // events
  public Boolean onButtonDown(in Any id!, Button button!): isOpen && hoveredItem.id == id && buttonsHeld.Contains(button);
   
  public Boolean onEnter(in Any id!): isOpen && hoveredItem.id == id;

  public Boolean onNavigate(in Any id!, in Vector direction!) {
    Vector diff = ThrottleOf(EventPlayer()) - direction * 0.5;
    Boolean x = AbsoluteValue(diff.X) > 0.5;
    Boolean y = AbsoluteValue(diff.Y) > 0.5;
    return isOpen && hoveredItem.id == id && (x && !y || !x && y);
  }
}