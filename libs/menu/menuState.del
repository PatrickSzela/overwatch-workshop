import '../utils/dictionary.del';
import '../utils/string.formatters.del';
import '../utils/button.allButtons.del';
import './menu.del';
import './_rules.del';
import './components/component.del';

// TODO: make `PuppetMenuState`?

Color COLOR_NEUTRAL: Color.White;
Color COLOR_INFO: Color.SkyBlue;
Color COLOR_WARNING: Color.Orange;
Color COLOR_ERROR: Color.Red;
Color COLOR_SWITCH: Color.Green;

# List of currently pressed buttons by a player.
playervar Button[] buttonsHeld = [];

single struct RenderedText {
  public Color color;
  public String text;
}

single struct HistoryItem {
  public String id;
  public Number outerScroll;
  public Number innerScroll;

  public static HistoryItem BASE: { id: '', innerScroll: 0, outerScroll: 0 };
}

struct RenderedTexts {
  public RenderedText[] title;
  public RenderedText[] separators;
  public RenderedText[] items;
  public RenderedText[] description;

  public RenderedText[] merged;

  public static RenderedTexts BASE: {
    title: [], separators: [], items: [], description: [], merged: []
  };
}

single struct ComponentParent {
  public Component parent;
  public Component component;
}

# Holds current state of `Menu` for a player and handles logic for displaying and controlling every `Component` and its derivatives.
class MenuState {
  # Button used to go back to the previous page (or close menu when in root).
  public static Button BUTTON_GO_BACK: Button.Ultimate;
  # Maximum number of visible items.
  public static Number MAX_ITEMS: Menu.MAX_ITEMS;

  # Whether player has access to menu.
  public Boolean isEnabled;
  # Whether menu is currently open.
  public Boolean isOpen;
  # Whether player can navigate the menu. Items will still receive navigation events.
  public Boolean isLocked;
  # Whether opening and closing menu logic is handled from outside.
  public Boolean isPuppet;
  # Whether this menu is currently used menu.
  public Boolean isFocused;
  # Whether menu is currently in refresh stage.
  public Boolean isRefreshing: pageId == '<REFRESH>';
  # Combination of buttons used to toggle menu on and off.
  public Button[] _toggleMenu;
  # ID of root page.
  public String _rootPageId;
  # List of available items on current page.
  public Component[] items;
  # Index of currently hovered item in `items`.
  public Number hoveredItemIdx;
  # List of currently visible items.
  public Component[] visibleItems: items.Slice(history.Last.outerScroll, MAX_ITEMS);
  # List of components that aren't disabled (can be hovered).
  public Component[] enabledItems: items.FilteredArray((i, idx) => !i.disabled);
  # List of items that should be re-rendered.
  public Component[] rerenderItems;
  # Currently hovered item.
  public Component hoveredItem: items[hoveredItemIdx];
  # Stack of IDs of visited pages.
  public HistoryItem[] history;
  # ID of currently open page.
  public String pageId: history.Last.id;
  # List of rendered items.
  public RenderedTexts renderedTexts;
  # List of additional descriptions that will be show on current page.
  public Description[] descriptionsPage;
  # List of additional descriptions that will be shown until manually removed.
  public Description[] descriptionsMenu;
  # Stores relation of named component to item in `items`. 
  public Dictionary<String, ComponentParent[]> namedComponentToItem;

  public constructor(in String rootPageId, in Button[] toggleMenu, in Boolean enabled = true, in Boolean puppet = false) {
    _toggleMenu = toggleMenu;
    _rootPageId = rootPageId;

    namedComponentToItem = { Keys: [], Values: [] };

    if(rootPageId != null)
      history = [{ id: rootPageId, ..HistoryItem.BASE }];
    else 
      history = [];
    
    items = [];
    isLocked = false;
    isFocused = false;
    isEnabled = enabled;
    isPuppet = puppet;
    hoveredItemIdx = -1;

    rerenderItems = [];

    Render();
  }

  // helpers
  public Boolean HistoryContains(in String pageId): 
    history.Map((i) => i.id).Contains(pageId);

  public void SetTitle(in String title) {
    RenderTitle(title);
  }

  # Forcefully rerenders currently hovered item. Call after manually adding description.
  public void RerenderHoveredItem() "[MenuState] Rerender Hovered Item" {
    rerenderItems += hoveredItem;
    Render();
  }

  # Forcefully rerenders all visible items.
  public void RerenderAllItems() "[MenuState] Rerender All Items" {
    rerenderItems = visibleItems;
    Render();
  }
  
  public void SetEnabled(Boolean enabled!) "[MenuState] Set Enabled" {
    if(enabled != isEnabled) {
      if(isOpen) Close();
      isEnabled = enabled;
    }
  }

  public void SetFocused() "[MenuState] Set Focused" {
    if(currentMenuState != this) {
      currentMenuState.isFocused = false;

      if(currentMenuState.isOpen) {
        currentMenuState.hoveredItem.OnLeave();
        currentMenuState.RerenderHoveredItem();
      }
      
      currentMenuState = this;
      isFocused = true;

      if(isOpen) {
        hoveredItem.OnEnter();
        RerenderHoveredItem();
      }
    }
  }

  # NOTE: This won't rerender the menu
  public void SetHoveredItemIdx(Number index!) "[MenuState] Set Hovered Item Index" {
    history[history.Length - 1] = { innerScroll: index, outerScroll: 0, ..history.Last };

    HandleScroll();
  }

  // TODO: instead of adding every item in a loop, gather them all in an array manually and set dictionary
  private void RegisterNamedItem(Component item!, Component parent!) "[MenuState] Handle Named Item" {
    if(item.name) {
      ComponentParent[] old! = namedComponentToItem.Get(item.name) || [];
      old += <ComponentParent>{ component: item, parent: parent };

      Dictionary<String, ComponentParent[]>.SetOrAdd(namedComponentToItem, item.name, old);
    }
  }

  public void AddItems(in Component[] items) {
    rerenderItems += items;
    this.items += items;

    foreach(Component item! in items) {
      RegisterNamedItem(item, item);
      if(item.child) {
        RegisterNamedItem(item.child, item);
      }
    }

    if(this.items.Length && hoveredItemIdx == -1) {
      Component[] enabled! = enabledItems;
      history[history.Length - 1].innerScroll = Max(this.items.IndexOf(enabled.First), Min(this.items.IndexOf(enabled.Last), history.Last.innerScroll));
    }

    HandleScroll();
  }

  // phase 1: handle events
  public void Open() "[MenuState] Open" {
    if(!isOpen && isEnabled) {
      isOpen = true;

      if(isFocused) hoveredItem.OnEnter();
      RerenderHoveredItem();
    }
  }

  public void Close() "[MenuState] Close" {
    if(isOpen) {
      isOpen = false;
      
      if(isFocused) hoveredItem.OnLeave();
      RerenderHoveredItem();
    }
  }

  public void CreatePage(String title!, Component[] items!, Description[] descriptions! = []) "[MenuState] Create Page" {
    SetTitle(title);
    AddItems(items);

    foreach(Description desc! in descriptions)
      descriptionsPage += desc;

    if(isOpen) {
      hoveredItem.OnEnter();
      // `AddItems` already adds items to render queue
      Render();
    }
  }

  public void DestroyPage() "[MenuState] Destroy Page" {
    if(isOpen) {
      hoveredItem.OnLeave();
    }

    buttonsHeld = [];
    descriptionsPage = [];
    namedComponentToItem = { Keys: [], Values: [] };
    hoveredItemIdx = -1;

    foreach(Component component! in items) {
      if(component.child) {
        delete(component.child);
      }

      delete(component);
    }

    items = [];
  }

  public virtual void Navigate(Vector direction!) "[MenuState] Navigate" {
    hoveredItem.OnNavigate(direction);
    rerenderItems += hoveredItem;

    if(!isLocked && (direction == Down() || direction == Up())) {
      Number offset! = 0;
      Number hov: hoveredItemIdx;
      Component[] it! = enabledItems;

      if(direction == Down()) {
        Number nextItemIdx! = items.IndexOf(items.FilteredArray((i, idx) => !i.disabled && idx > hov).First);

        offset = (nextItemIdx == -1 ? items.IndexOf(it.First) : nextItemIdx) - hov;
      } else if(direction == Up()) {
        Number prevItemIdx! = items.IndexOf(items.FilteredArray((i, idx) => !i.disabled && idx < hov).Last);

        offset = (prevItemIdx == -1 ? items.IndexOf(it.Last) : prevItemIdx) - hov;
      }

      if(offset != 0) {
        hoveredItem.OnLeave();
        history[history.Length - 1].innerScroll += offset;
        HandleScroll(); 
        hoveredItem.OnEnter();
        rerenderItems += hoveredItem;
      }
    }

    Render();
  }

  public virtual void ButtonDown(Button button!) "[MenuState] Button Down" {
    buttonsHeld += button;

    if(!isOpen) {
      if(buttonsHeld == _toggleMenu && !isPuppet) {
        Open();
      }
    } else {
      hoveredItem.OnButtonDown(button);

      if(!isLocked) {
        if(buttonsHeld == _toggleMenu && !isPuppet) {
          Close();
        } else if(buttonsHeld == [BUTTON_GO_BACK]) {
          GoBack();
        }
      }
    }

    if(isOpen) {
      rerenderItems += hoveredItem;
      Render();
    }
  }

  public virtual void ButtonUp(Button button!) "[MenuState] Button Up" {
    // when changing page `buttonsHeld` is being cleared
    if(!buttonsHeld.Contains(button)) return;

    buttonsHeld.ModRemoveByValue(button);

    if(isOpen) {
      hoveredItem.OnButtonUp(button);
      rerenderItems += hoveredItem;
      Render();
    }
  }

  // phase 2: render
  public void RenderClosedItems() {
    renderedTexts.merged = isPuppet ? [] : [
      { 
        text: $"Press {ButtonFormatter(_toggleMenu)}​ to toggle Menu", 
        color: COLOR_NEUTRAL
      }
    ];
  }

  public void RenderTitle(in String title) {
    renderedTexts.title = [
      { 
        text: title,
        color: COLOR_NEUTRAL
      }
    ];
  }

  public void RenderSeparators() {
    renderedTexts.separators = [
      { 
        text: $"──────────────────────{items.Length < MAX_ITEMS ? '─' : history.Last.outerScroll == 0 ? '△' : '▲'}──────────────────────", 
        color: COLOR_NEUTRAL 
      },
      {
        text: $"──────────────────────{items.Length < MAX_ITEMS ? '─' : history.Last.outerScroll == items.Length - MAX_ITEMS ? '▽' : '▼'}──────────────────────",
        color: COLOR_NEUTRAL
      }
    ];
  }

  public void RenderDescription() {
    Description[] descriptionArr! = hoveredItem.description;

    if(hoveredItem.child) {
      descriptionArr += hoveredItem.child.description;
    }

    descriptionArr += descriptionsPage;
    descriptionArr += descriptionsMenu;

    renderedTexts.description = descriptionArr
      .FilteredArray((i) => i.visible)
      .SortedArray((i) => i.order)
      .Map((i) => <RenderedText>{text: i[0], color: i[1]});
  }

  public void PrepareVisibleItems() {
    foreach(Component item! in rerenderItems) {
      // called here, not in Component because it breaks stuff
      if(item.child) {
        item.child.Render();
      }

      item.Render();
    }

    RenderDescription();

    rerenderItems = [];
  }

  public void RenderVisibleItems() {
    renderedTexts.items = visibleItems.Map((item, idx) => <RenderedText>{ 
      text: $"{!item.disabled ? isFocused && hoveredItemIdx == idx + history.Last.outerScroll ? '● ' : '○ ' : ''}{item.renderedText}",
      color: item.color 
    });

    // foreach(Component item! in rerenderItems) {
    //   Number idx! = items.IndexOf(item);
    //   renderedTexts.items[idx - history.Last.outerScroll] = { 
    //     text: $"{!item.disabled ? isFocused && hoveredItemIdx == idx + history.Last.outerScroll ? '● ' : '○ ' : ''}{item.renderedText}",
    //     color: item.color 
    //   };
    // }
    
    // rerenderItems = [];
  }

  public void MergeTexts() {
    renderedTexts.merged = renderedTexts.title + [renderedTexts.separators[0]] + renderedTexts.items;

    if(items.Length > MAX_ITEMS || renderedTexts.description.Length)
      renderedTexts.merged += [renderedTexts.separators[1]];

    renderedTexts.merged += renderedTexts.description;
  }

  public void Render() "[MenuState] Render" {
    if(isOpen) {
      PrepareVisibleItems();
      RenderVisibleItems();
      MergeTexts();
    } else {
      RenderClosedItems();
    }
  }

  private void HandleScroll() "[MenuState] Handle Scroll" {
    Number idx! = history.Length - 1;
    Number offset! = 0;

    if(history.Last.innerScroll > MAX_ITEMS - 1) {
      offset = history.Last.innerScroll - (MAX_ITEMS - 1);
      history[idx] = {innerScroll: MAX_ITEMS - 1, outerScroll: history.Last.outerScroll + offset, ..history[idx]};
    } else if(history.Last.innerScroll < 0) {
      offset = history.Last.innerScroll;
      history[idx] = {innerScroll: 0, outerScroll: history.Last.outerScroll + offset, ..history[idx]};
    }

    hoveredItemIdx = history.Last.innerScroll + history.Last.outerScroll;
    RenderSeparators();
  }

  public void Refresh() "[MenuState] Refresh" {
    history += [{ id: '<REFRESH>', innerScroll: 0, outerScroll: 0 }];
    Wait();
    DestroyPage();
    history.ModRemoveByIndex(history.Length - 1);
  }

  public virtual void GoTo(String pageId!, Boolean historyReplace! = false) "[MenuState] Go To" {
    if(this.pageId != pageId) {
      DestroyPage();

      if(historyReplace)
        history[history.Length - 1] = { id: pageId, ..HistoryItem.BASE };
      else
        history += { id: pageId, ..HistoryItem.BASE };
    }
  }

  public virtual void GoBack() "[MenuState] Go Back" {
    if(history.Length == 1) {
      if(!isPuppet) Close();
      return;
    }

    DestroyPage();
    history.ModRemoveByIndex(history.Length - 1);
  }

  public Number AddPageDescription(Description desc!) "[MenuState] Add Page Description" {
    descriptionsPage += desc;
    return descriptionsPage.Length - 1;
  }

  public Number AddMenuDescription(Description desc!) "[MenuState] Add Menu Description" {
    descriptionsMenu += desc;
    return descriptionsMenu.Length - 1;
  }

  public void RemoveMenuDescription(Number idx!) "[MenuState] Remove Page Description" {
    descriptionsMenu.ModRemoveByIndex(idx);
  }

  public void WaitUntilButtonDown(in String id, in Button button) {
    WaitUntil(onButtonDown(id, button), 99999);
  }

  public void WaitUntilButtonUp(in String id, in Button button) {
    WaitUntil(!onButtonDown(id, button), 99999);
  }

  // events
  public Boolean onButtonDown(in String id, in Button button): isOpen && isFocused && hoveredItem.id == id && buttonsHeld.Contains(button);
   
  public Boolean onEnter(in String id): isOpen && isFocused && hoveredItem.id == id;

  public Boolean onNavigate(in String id, in Vector direction) {
    Vector diff = ThrottleOf(EventPlayer()) - direction * 0.5;
    Boolean x = AbsoluteValue(diff.X) > 0.5;
    Boolean y = AbsoluteValue(diff.Y) > 0.5;
    return isOpen && isFocused && hoveredItem.id == id && (x && !y || !x && y);
  }
}