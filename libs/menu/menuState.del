import './customButtons.del';
import '../utils/index.del';
import '../utils/string.formatters.del';
import '../utils/button.allButtons.del';
import './menu.del';
import './_rules.del';
import './components/component.del';
import './components/text.del';
import './components/link.del';

// TODO: handle case when switching side after players array changes and focusedIndex is wrong

void LogHelper(in Any text) {
  // LogToInspector(text);
}

playervar MenuState menuState;
playervar MenuWindow[] menuWindows = [];

single struct RenderedText {
  public Color color;
  public String text;

  public static RenderedText New(in String text, in Color color = COLOR_NEUTRAL): 
    { text: text, color: color };
}

single struct HistoryItem {
  public String id;
  public Number outerScroll;
  public Number innerScroll;

  public static HistoryItem New(in String id): 
    { id: id, innerScroll: 0, outerScroll: 0 };
}

struct RenderedTexts {
  public RenderedText[] titles;
  public RenderedText[] separators;
  public RenderedText[] items;
  public RenderedText[] descriptions;

  public RenderedText[] merged;

  public static RenderedTexts New(): {
    titles: [], separators: [], items: [], descriptions: [], merged: []
  };
}

single struct WindowCreatePage {
  public String title;
  public Number[] indexes;
  public Description[] descriptions;

  public static WindowCreatePage New(in String title, in Number[] indexes, in Description[] descriptions = []): 
    { title: title, indexes: indexes, descriptions: descriptions };
}

single struct WindowGoToPage {
  public String pageId;
  public Boolean replaceLastHistory;

  public static WindowGoToPage New(in String pageId, in Boolean replaceLastHistory):
    { pageId: pageId, replaceLastHistory: replaceLastHistory };
}

single struct WindowAddRemoveComponents {
  public Number[] indexes;
  public Boolean updateScroll;

  public static WindowAddRemoveComponents New(in Number[] indexes, in Boolean updateScroll): 
    { indexes: indexes, updateScroll: updateScroll };
}

single struct WindowLogicActions {
  public Boolean findClosestFocusableComponent;
  public Boolean updateScroll;
  public Boolean componentEnter;
  public Boolean componentLeave;
  # Whether window should rerender.
  public Boolean render;
  public WindowAddRemoveComponents removeComponents;
  public WindowAddRemoveComponents addComponents;
  public Boolean destroyPage;
  public WindowCreatePage createPage;
  public WindowGoToPage goToPage;
  public Boolean goBack;

  public static WindowLogicActions New(
    in Boolean findClosestFocusableComponent = false,
    in Boolean updateScroll = false,
    in Boolean componentEnter = false,
    in Boolean componentLeave = false,
    in Boolean render = false,
    in WindowAddRemoveComponents removeComponents = null,
    in WindowAddRemoveComponents addComponents = null,
    in Boolean destroyPage = false,
    in WindowCreatePage createPage = null,
    in WindowGoToPage goToPage = null,
    in Boolean goBack = false
  ): { 
    findClosestFocusableComponent: findClosestFocusableComponent, 
    updateScroll: updateScroll, 
    componentEnter: componentEnter, 
    componentLeave: componentLeave, 
    render: render,
    removeComponents: removeComponents,
    addComponents: addComponents,
    destroyPage: destroyPage,
    createPage: createPage,
    goToPage: goToPage,
    goBack: goBack
  };
}

struct MenuWindow {
  # Maximum number of visible items.
  public static Number MAX_ITEMS: Menu.MAX_ITEMS;

  # Whether window is currently focused.
  public Boolean focused;
  # Whether window is currently open.
  public Boolean open;

  public WindowLogicActions logicActions;

  # Combination of buttons used to toggle menu on and off.
  public Button[] toggleWindowKeybind;
  # Whether opening and closing this window is done programmatically.
  public Boolean isRemotelyControlled: !toggleWindowKeybind;
  # List of available items in `menuComponents` variable used on the current page.
  public Number[] indexes;
  # Index of currently focused item in `indexes`.
  public Number focusedIndex;
  # List of currently visible items.
  public Number[] visibleIndexes: indexes.Slice(history.Last.outerScroll, MAX_ITEMS);
  # List of components that can be focused.
  public Number[] enabledIndexes: indexes.FilteredArray((i) => !menuComponents[i].disabled);
  # Currently hovered item.
  public Component focusedComponent: menuComponents[indexes[focusedIndex]];
  # History of opened pages.
  public HistoryItem[] history;
  # ID of currently open page.
  public String pageId: history.Last.id;
  # ID of root page.
  protected String rootPageId;
  # Whether menu is currently in refresh stage.
  public Boolean isRefreshing: pageId == '<REFRESH>';
  # List of additional descriptions that will be show on current page.
  public Description[] pageDescriptions;
  # List of additional descriptions that will be shown until manually removed.
  public Description[] windowDescriptions;
  # List of rendered items.
  public RenderedTexts renderedTexts;

  public static MenuWindow New(in String rootPageId, in Button[] toggleWindowKeybind): { 
    focused: false,
    open: false,
    logicActions: WindowLogicActions.New(),
    toggleWindowKeybind: toggleWindowKeybind,
    indexes: [],
    focusedIndex: 0,
    history: [HistoryItem.New(rootPageId)],
    rootPageId: rootPageId,
    pageDescriptions: [],
    windowDescriptions: [],
    renderedTexts: RenderedTexts.New(),
  };

  # Marks menu as updated.
  public ref void MarkFindClosestFocusableComponent() {
    logicActions.findClosestFocusableComponent = true;
  }

  public ref void MarkUpdateScroll() {
    logicActions.updateScroll = true;
  }

  # Marks menu to rerender.
  public ref void MarkToRerender() {
    logicActions.render = true;
  }

  public ref void MarkOnComponentEnter() {
    logicActions.componentEnter = true;
  }

  public ref void MarkOnComponentLeave() {
    logicActions.componentLeave = true;
  }

  public ref void SetTitle(in String title) {
    RenderTitle(title);
  }

  public ref void SetFocused() {
    LogHelper($'Set Focused');

    focused = true;

    // TODO: STRUCT REWORK restore
    // if(menuState != this) {
    //   menuState.isFocused = false;

    //   if(menuState.isOpen) {
    //     menuState.hoveredItem.OnLeave();
    //   }
      
    //   menuState = this;
    //   isFocused = true;

    //   if(isOpen) {
    //     hoveredItem.OnEnter();
    //   }
    // }
  }

  protected ref void OnComponentEnter(in Number index = indexes[focusedIndex]) {
    logicActions.componentEnter = false;
    menuComponents[index].onEnter();
    menuComponents[menuComponents[index].childIndex].onEnter();
  }

  protected ref void OnComponentLeave(in Number index = indexes[focusedIndex]) {
    logicActions.componentLeave = false;
    menuComponents[menuComponents[index].childIndex].onLeave();
    menuComponents[index].onLeave();
  }

  protected ref void OnComponentNavigate(in Vector direction, in Number index = indexes[focusedIndex]) {
    menuComponents[index].onNavigate(direction);
    menuComponents[menuComponents[index].childIndex].onNavigate(direction);
  }

  protected ref void OnComponentButtonDown(in Button button, in Number index = indexes[focusedIndex]) {
    menuComponents[index].onButtonDown(button);
    menuComponents[menuComponents[index].childIndex].onButtonDown(button);
  }

  protected ref void OnComponentButtonUp(in Button button, in Number index = indexes[focusedIndex]) {
    menuComponents[menuComponents[index].childIndex].onButtonUp(button);
    menuComponents[index].onButtonUp(button);
  }

  # Forcefully rerenders specified item (or currently hovered one if no `index` is specified). Call after manually adding description.
  public ref void RerenderComponent(in Number index = indexes[focusedIndex]) {
    LogHelper($'Rerender Item: {index}');

    menuComponents[index].MarkToRerender();
    MarkToRerender();
  }

  # Forcefully rerenders all items.
  public ref void RerenderAllItems() {
    LogHelper($'Rerender All Items');

    for(Number i = 0; i < menuComponents.Length; i++)
      menuComponents[i].MarkToRerender();
    
    MarkToRerender();
  }

  public ref void Open() {
    LogHelper($'Open');

    if(!open) {
      open = true;

      if(focused) MarkOnComponentEnter();
      MarkToRerender();
    }
  }

  public ref void Close() {
    LogHelper($'Close');

    if(open) {
      open = false;
      
      if(focused) MarkOnComponentLeave();
      MarkToRerender();
    }
  }

  // WORKAROUND: for some reason `newPageId` must be stored, otherwise its value will be lost when passed on to HistoryItem.New
  public ref void GoToPage(in String newPageId, in Boolean historyReplace = false) {
    LogHelper('MARKED TO: Go To Page');
    logicActions.goToPage = WindowGoToPage.New(newPageId, historyReplace);
  }

  protected ref void _GoToPage(in String newPageId, in Boolean historyReplace = false) {
    LogHelper($'Go To Page: going from {pageId} to {newPageId}');

    if(pageId != newPageId) {
      DestroyPage();
      history[history.Length - (historyReplace ? 1 : 0)] = HistoryItem.New(newPageId);
    }
  }

  public ref void GoBack() {
    LogHelper($'MARKED TO: Go Back');
    logicActions.goBack = true;
  }

  protected ref void _GoBack() {
    LogHelper($'Go Back');

    if(history.Length == 1) {
      if(!isRemotelyControlled) Close();
      return;
    }

    DestroyPage();
    history.ModRemoveByIndex(history.Length - 1);
  }

  # Add items to the menu.
  public ref void AddComponents(in Number[] componentIndexes, in Boolean findClosestFocusableComponent = true) {
    LogHelper($"MARKED TO: Add Components");
    logicActions.addComponents = WindowAddRemoveComponents.New(componentIndexes, findClosestFocusableComponent);
  }

  protected ref void _AddComponents(in Number[] componentIndexes, in Boolean findClosestFocusableComponent = true) {
    indexes += componentIndexes;

    LogHelper($'Add Components: Adding {componentIndexes.Length} items, {indexes.Length} total');

    if(findClosestFocusableComponent) {
      MarkFindClosestFocusableComponent();
    }
  }

  // WORKAROUND: for some reason `componentIndexes` must be stored, otherwise its value will be lost when removing the items
  # Removes specified items from the menu. Will automatically clean up components in `menuComponents`.
  public ref void RemoveComponents(in Number[] componentIndexes, in Boolean findClosestFocusableComponent = true) {
    LogHelper($"MARKED TO: Remove Components");
    logicActions.removeComponents = WindowAddRemoveComponents.New(indexes, findClosestFocusableComponent);
  }

  protected ref void _RemoveComponents(in Number[] componentIndexes, in Boolean findClosestFocusableComponent = true) {
    indexes -= componentIndexes;
    UnregisterComponents(componentIndexes);

    LogHelper($'Remove Components: Removing {componentIndexes.Length} items, {indexes.Length} left');
    
    if(findClosestFocusableComponent) {
      MarkFindClosestFocusableComponent();
    }
  }

  # Removes all items from the menu. Will automatically clean up components in `menuComponents`.
  public ref void RemoveAllItems(in Boolean callOnItemsChanged = true) {
    LogHelper($'Remove All Items');
    RemoveComponents(indexes, callOnItemsChanged);
  }

  # Replaces all items in the menu. Will automatically clean up removed components in `menuComponents`.
  public ref void ReplaceItems(in Number[] componentIndexes) {
    LogHelper($'Replace Items');

    RemoveAllItems(false);
    AddComponents(componentIndexes, true);

    // TODO: STRUCT REWORK restore if perf is bad
    // RemoveItems(this.indexes - items, false);
    // AddItems(items - this.indexes, false);

    // // keep the order of passed items
    // this.indexes = items;

    // MarkFindClosestFocusableComponent();
  }

  public ref void CreatePage(in String title, in Number[] componentIndexes, in Description[] descriptions = []) {
    LogHelper($'MARKED TO: Create Page');

    logicActions.createPage = WindowCreatePage.New(title, componentIndexes, descriptions);
  }

  protected ref void _CreatePage(in String title, in Number[] componentIndexes, in Description[] descriptions = []) {
    LogHelper($'Create Page');

    SetTitle(title);
    _AddComponents(componentIndexes);

    pageDescriptions += descriptions;
    // foreach(Description desc! in descriptions)
    //   pageDescriptions += desc;

    if(open) {
      MarkOnComponentEnter();

      // `AddItems` already adds items to render queue
      MarkToRerender();
    }
  }

  public ref void DestroyPage() {
    LogHelper($'MARKED TO: Destroy Page');
    logicActions.destroyPage = true;
  }

  protected ref void _DestroyPage() {
    LogHelper($'Destroy Page');

    if(open) {
      MarkOnComponentLeave();
    }

    RemoveComponents(indexes);
    // RemoveAllItems(false);

    buttonsHeld = [];
    pageDescriptions = [];
  }
  

  // phase 1: handle events
  public ref void Navigate(in Vector direction, in Boolean navigationLocked) {
    LogHelper($'Navigate: {direction}');

    OnComponentNavigate(direction);

    if(!navigationLocked && (direction == Down() || direction == Up())) {
      // TODO: STRUCT REWORK move to a func
      // Number offset! = 0;
      // Number[] enabled! = enabledIndexes;

      // LogHelper($"current idx: {focusedIndex}");

      // if(direction == Down()) {
      //   Number[] nextItemIdxs! = indexes.FilteredArray((i, idx) => !menuComponents[i].disabled && idx > focusedIndex);

      //   offset = indexes.IndexOf(FirstOf(nextItemIdxs.Length ? nextItemIdxs : enabled)) - focusedIndex;

      //   // LogHelper($"next offset: {offset}");
      // } else if(direction == Up()) {
      //   Number[] prevItemIdxs! = indexes.FilteredArray((i, idx) => !menuComponents[i].disabled && idx < focusedIndex);

      //   offset = indexes.IndexOf(LastOf(prevItemIdxs.Length ? prevItemIdxs : enabled)) - focusedIndex;

      //   // LogHelper($"prev offset: {offset}");
      // }

      Number[] componentIndexes! = indexes.FilteredArray((i, idx) => !menuComponents[i].disabled && (direction == Down() ? (idx > focusedIndex) : (idx < focusedIndex)));
      componentIndexes = componentIndexes.Length ? componentIndexes : enabledIndexes;

      Number offset! = indexes.IndexOf(direction == Down() ? componentIndexes.First : componentIndexes.Last) - focusedIndex;

      if(offset != 0) {
        MarkOnComponentLeave();
        
        history[history.Length - 1].innerScroll += offset;
        MarkUpdateScroll(); 

        MarkOnComponentEnter();
      }
    }

    MarkToRerender();
  }

  public ref void ButtonDown(in Button button, in Boolean navigationLocked) {
    LogHelper($'Button Down: {button}');

    if(open) {
      OnComponentButtonDown(button);

      switch(focusedComponent.type) {
        case ComponentType.Link:
          if(buttonsHeld == [focusedComponent.button])
            GoToPage(focusedComponent.value);
          break;
      }

      if(!navigationLocked && buttonsHeld == [BUTTON_BACK]) {
        GoBack();
      }

      MarkToRerender();
    }
  }

  public ref void ButtonUp(in Button button, in Boolean navigationLocked) {
    LogHelper($'Button Up: {button}');

    if(open) {
      OnComponentButtonUp(button,);
      MarkToRerender();
    }
  }

  // phase 2: rendering
  protected ref void RenderClosedItems(in Boolean hideKeybindTextWhenClosed) {
    renderedTexts.merged = 
      isRemotelyControlled || hideKeybindTextWhenClosed ? 
        [] : 
        [
          RenderedText.New(
            text: $"Press {ButtonFormatter_Underscores(toggleWindowKeybind)}​ to toggle Menu", 
            color: COLOR_NEUTRAL
          )
        ];
  }

  protected ref void RenderTitle(in String title) {
    renderedTexts.titles = [
      RenderedText.New(title, COLOR_NEUTRAL)
    ];
  }

  protected ref void RenderSeparators() {
    renderedTexts.separators = [
      RenderedText.New(
        text: $"──────────────────────{indexes.Length < MAX_ITEMS ? '─' : history.Last.outerScroll == 0 ? '△' : '▲'}──────────────────────", 
        color: COLOR_NEUTRAL 
      ),
      RenderedText.New(
        text: $"──────────────────────{indexes.Length < MAX_ITEMS ? '─' : history.Last.outerScroll == indexes.Length - MAX_ITEMS ? '▽' : '▼'}──────────────────────",
        color: COLOR_NEUTRAL
      )
    ];
  }

  protected ref void RenderDescriptions() {
    // Description[] descriptions! = focusedComponent.descriptions;

    // if(focusedComponent.hasChild) {
    //   descriptions += menuComponents[focusedComponent.childIndex].descriptions;
    // }

    // descriptions += pageDescriptions + menuDescriptions;

    // renderedTexts.descriptions = descriptions
    //   .FilteredArray((i) => i.visible)
    //   .SortedArray((i) => i.order)
    //   .Map((i) => <RenderedText>{text: i[0], color: i[1]});

    Description[] actionDescriptions: (
      focusedComponent.actionDescriptions + 
      menuComponents[focusedComponent.childIndex].actionDescriptions
    ).Map((i, idx) => i ? Description.New(
      description: $"Press {ButtonFormatterSingle_Underscores(buttonsSettings[idx % 4])} to {i}", 
      order: ButtonDescriptionOrder(buttonsSettings[idx % 4])
    ) : null);

    renderedTexts.descriptions = (
      actionDescriptions +
      focusedComponent.descriptions + 
      menuComponents[focusedComponent.childIndex].descriptions +
      pageDescriptions + windowDescriptions
    ).FilteredArray((i) => i.visible)
      .SortedArray((i) => i.order)
      .Map((i) => RenderedText.New(text: i[0], color: i[1]));
  }

  protected String RenderComponent(in Number index) {
    Component item: menuComponents[index];

    switch(item.type) {
      case ComponentType.Component:
      case ComponentType.Text:
        return Text.Render(menuComponents[index]);
      case ComponentType.Value:
        return '';
      case ComponentType.Link:
        return Link.Render(menuComponents[index]);
      case ComponentType.Toggle:
        return '';
      case ComponentType.Checkbox:
        return '';
      case ComponentType.Radio:
        return '';
      case ComponentType.Carousel:
        return '';
      case ComponentType.TextInput:
        return '';
      case ComponentType.NumberInput:
        return '';
    }
  }

  protected ref void RenderVisibleItems() {
    RenderDescriptions();

    Number[] v! = visibleIndexes;

    // LogHelper(indexes.Length);
    // LogHelper(visibleIndexes.Length);

    renderedTexts.items = [];

    for(Number idx! = 0; idx < v.Length; idx++) {
      Number componentIdx: idx + history.Last.outerScroll;
      Number index: v[idx];
      Component item: menuComponents[index];
      Component child: menuComponents[item.childIndex];

      if(item.shouldRerender || child.shouldRerender) {
        Number[] items! = (item.hasChild ? [item.childIndex] : []) + [index];
        // LogHelper($"index {index} has {items.Length} items:");

        foreach(Number idx2! in items) {
          // LogHelper($"item {idx2}: label - {menuComponents[idx2].label}, rendered text - {RenderComponent(idx2)}");
          menuComponents[idx2].renderedText = RenderComponent(idx2);
          menuComponents[idx2].shouldRerender = false;
        }

        LogHelper($'Rerendered component {index}: {item.renderedText}');
      }

      renderedTexts.items[idx] = RenderedText.New( 
        text: $"{!item.disabled ? focused && focusedIndex == componentIdx ? '● ' : '○ ' : ''}{item.renderedText}",
        color: item.color 
      );
    }
  }

  protected ref void MergeTexts() {
    renderedTexts.merged = renderedTexts.titles + [renderedTexts.separators[0]] + renderedTexts.items;

    if(indexes.Length > MAX_ITEMS || renderedTexts.descriptions.Length)
      renderedTexts.merged += [renderedTexts.separators[1]];

    renderedTexts.merged += renderedTexts.descriptions;
  }

  public ref void Render(in Boolean hideKeybindTextWhenClosed) {
    LogHelper($'Render');

    if(open) {
      RenderVisibleItems();
      MergeTexts();
    } else {
      RenderClosedItems(hideKeybindTextWhenClosed);
    }
  }






  public ref void FindClosestFocusableComponent() {
    LogHelper($'Find Closest Focusable Component');

    // TODO: STRUCT REWORK restore
    // if(!indexes) {
    //   indexes = [emptyTextIndex];
    // } else if(indexes.Length > 1 && indexes.Contains(emptyTextIndex)) {
    //   indexes -= emptyTextIndex;
    // }
    
    // `focusedIndex` is calculated later in `HandleScroll()`
    Number scroll: history.Last.outerScroll + history.Last.innerScroll;
    Number hover: indexes[scroll];

    if(!hover || menuComponents[hover].disabled) {
      Number[] enabled! = enabledIndexes;
      history[history.Length - 1].innerScroll = indexes.IndexOf(Max(enabled.First, Min(enabled.Last, scroll)));

      LogHelper(history.Last.innerScroll);
    }

    MarkUpdateScroll();
  }

  public ref void UpdateScroll() {
    LogHelper($'Update Scroll');

    Number idx! = history.Length - 1;
    Number offset! = 0;

    if(history.Last.innerScroll > MAX_ITEMS - 1) {
      offset = history.Last.innerScroll - (MAX_ITEMS - 1);
      history[idx] = {
        innerScroll: MAX_ITEMS - 1, 
        outerScroll: history.Last.outerScroll + offset, ..history[idx]
      };
    } else if(history.Last.innerScroll < 0) {
      offset = history.Last.innerScroll;
      history[idx] = {
        innerScroll: 0, 
        outerScroll: Max(0, history.Last.outerScroll + offset), ..history[idx]
      };
    }

    focusedIndex = history.Last.innerScroll + history.Last.outerScroll;
    // LogHelper($"new idx: {focusedIndex}");
    RenderSeparators();
  }


  public ref void RULE_Logic(in Boolean hideKeybindTextWhenClosed) {
    // if((<Boolean[]>logicActions).IndexOf(true) == -1)
    //   return;

    LogHelper($"========= Executing MenuWindow logic");

    if(logicActions.goBack)
      _GoBack();

    if(logicActions.goToPage)
      _GoToPage(logicActions.goToPage.pageId, logicActions.goToPage.replaceLastHistory);

    if(logicActions.destroyPage)
      _DestroyPage();

    if(logicActions.componentLeave)
      OnComponentLeave();

    if(logicActions.removeComponents.indexes.Length)
      _RemoveComponents(logicActions.removeComponents.indexes, logicActions.removeComponents.updateScroll);

    if(logicActions.destroyPage)
      MinWait();

    if(logicActions.createPage.indexes.Length)
      _CreatePage(logicActions.createPage.title, logicActions.createPage.indexes, logicActions.createPage.descriptions);

    if(logicActions.addComponents.indexes.Length)
      _AddComponents(logicActions.addComponents.indexes, logicActions.addComponents.updateScroll);

    if(logicActions.findClosestFocusableComponent)
      FindClosestFocusableComponent();

    if(logicActions.updateScroll)
      UpdateScroll();
    
    if(logicActions.componentEnter)
      OnComponentEnter();

    if(logicActions.render)
      Render(hideKeybindTextWhenClosed);

    logicActions = WindowLogicActions.New();

    LogHelper($"========= Finished Executing MenuWindow logic");    
  }
}

single struct MenuState {
  # Maximum number of visible items.
  public static Number MAX_ITEMS: Menu.MAX_ITEMS;



  # Whether player has access to menu.
  public Boolean enabled;
  # Whether menu is currently open.
  public Boolean open: menuWindows.IsTrueForAny((i) => i.open);
  # Whether player can navigate the menu. Items will still receive navigation events.
  public Boolean navigationLocked;
  # Index of the currently focused window in `windows`.
  public Number focusedWindowIndex;
  # Whether the text explaining how to toggle menu should be hidden when menu is closed.
  public Boolean hideKeybindTextWhenClosed;

  public String[] pageIds: menuWindows.Map((i) => i.pageId);


 


  public static MenuState New(in String rootPageId, in Boolean enabled = true): { 
    enabled: enabled,
    navigationLocked: false,
    focusedWindowIndex: 0,
    hideKeybindTextWhenClosed: false
  };

  public ref void CreatePage(in String pageId, in String title, in Number[] indexes, in Description[] descriptions = []) {
    menuWindows[pageIds.IndexOf(pageId)].CreatePage(title, indexes, descriptions);
  }

  public void ButtonDown(Button button!) "MenuState.ButtonDown" {
    for(Number i! = 0; i < menuWindows.Length; i++) {
      if(buttonsHeld && buttonsHeld == menuWindows[i].toggleWindowKeybind) {
        if(menuWindows[i].open) {
          menuWindows[i].Close();
        } else {
          menuWindows[i].Open();
          menuState.focusedWindowIndex = i;
          menuWindows[i].SetFocused();
        }
      }
    }

    menuWindows[focusedWindowIndex].ButtonDown(button, navigationLocked);
  }

  public void ButtonUp(Button button!) "MenuState.ButtonUp" {
    // when changing page `buttonsHeld` is being cleared
    if(!buttonsHeld.Contains(button)) return;

    menuWindows[focusedWindowIndex].ButtonUp(button, navigationLocked);
  }

  public void Navigate(Vector direction!) "MenuState.Navigate" {
    menuWindows[focusedWindowIndex].Navigate(direction, navigationLocked);
  }



  // public ref void RULE_FindClosestFocusableComponent() {
  //   WaitForeverUntil(menuWindows.IsTrueForAny((i) => i.findClosestFocusableComponent));

  //   for(Number i = 0; i < menuWindows.Length; i++)
  //     menuWindows[i].FindClosestFocusableComponent();

  //   Loop();
  // }

  // public ref void RULE_UpdateScroll() {
  //   WaitForeverUntil(menuWindows.IsTrueForAny((i) => i.updateScroll));

  //   for(Number i = 0; i < menuWindows.Length; i++)
  //     menuWindows[i].UpdateScroll();

  //   Loop();
  // }

  // public ref void RULE_Render() {
  //   WaitForeverUntil(menuWindows.IsTrueForAny((i) => i.shouldRerender));

  //   for(Number i = 0; i < menuWindows.Length; i++)
  //     menuWindows[i].Render(hideKeybindTextWhenClosed);

  //   Loop();
  // }
}



# Holds current state of `Menu` for a player and handles logic for displaying and controlling every `Component` and its derivatives.
class MenuState3 {
  # Maximum number of visible items.
  public static Number MAX_ITEMS: Menu.MAX_ITEMS;

  # Whether player has access to menu.
  public Boolean isEnabled;
  # Whether menu is currently open.
  public Boolean isOpen;
  # Whether player can navigate the menu. Items will still receive navigation events.
  public Boolean isLocked;
  # Whether opening and closing menu logic is handled from outside.
  public Boolean isPuppet;
  # Whether this menu is currently used menu.
  public Boolean isFocused;
  # Whether menu is currently in refresh stage.
  public Boolean isRefreshing: pageId == '<REFRESH>';
  # Whether the text explaining how to toggle menu should be hidden when menu is closed.
  public Boolean hideTextWhenClosed;
  # Whether menu should rerender.
  public Boolean shouldRerender;
  # Combination of buttons used to toggle menu on and off.
  public Button[] _toggleMenu;
  # ID of root page.
  public String _rootPageId;
  # List of available items on current page.
  public Number[] indexes;
  # Index of currently hovered item in `items`.
  public Number hoveredIndex;
  # List of currently visible items.
  public Number[] visibleIndexes: indexes.Slice(history.Last.outerScroll, MAX_ITEMS);
  # List of components that aren't disabled (can be hovered).
  public Number[] enabledItemsIndexes: indexes.FilteredArray((i) => !menuComponents[i].disabled).Map((i) => i);
  # Currently hovered item.
  public Component hoveredItem: menuComponents[hoveredIndex];
  # Stack of IDs of visited pages.
  public HistoryItem[] history;
  # ID of currently open page.
  public String pageId: history.Last.id;
  # List of rendered items.
  public RenderedTexts renderedTexts;
  # List of additional descriptions that will be show on current page.
  public Description[] descriptionsPage;
  # List of additional descriptions that will be shown until manually removed.
  public Description[] descriptionsMenu;
  # Component that will be displayed when there are no items in menu
  protected Number emptyTextIndex;

  public Number[] childIndexes(in Number[] indexes): indexes.FilteredArray((i) => menuComponents[i].childIndex).Map((i) => menuComponents[i].childIndex);

  public constructor(in String rootPageId, in Button[] toggleMenu, in Boolean enabled = true, in Boolean puppet = false) {
    _toggleMenu = toggleMenu;
    _rootPageId = rootPageId;

    if(rootPageId != null)
      history = [HistoryItem.New(rootPageId)];
    else 
      history = [];
    
    indexes = [];
    isLocked = false;
    isFocused = false;
    isEnabled = enabled;
    isPuppet = puppet;
    hoveredIndex = 0;

    renderedTexts = RenderedTexts.New();
    // TODO: STRUCT REWORK restore
    // emptyTextIndex = menuComponents.Length;
    // indexes += Text.New("It's a bit empty in here...");

    // render closed title
    MarkToRerender();
  }

  // helpers
  public Boolean HistoryContains(in String pageId): 
    history.Map((i) => i.id).Contains(pageId);

  public void SetTitle(in String title) {
    RenderTitle(title);
  }

  # Forcefully rerenders specified item (or currently hovered one if no `index` is specified). Call after manually adding description.
  public void RerenderItem(Number index! = -1) "[MenuState] Rerender Item" {
    Log($'{EventPlayer()}: RerenderItem');

    menuComponents[index == -1 ? hoveredIndex : index].MarkToRerender();
    MarkToRerender();
  }

  # Forcefully rerenders all items.
  public void RerenderAllItems() "[MenuState] Rerender All Items" {
    Log($'{EventPlayer()}: RerenderAllItems');

    for(Number i = 0; i < menuComponents.Length; i++)
      menuComponents[i].MarkToRerender();
    
    MarkToRerender();
  }
  
  public void SetEnabled(Boolean enabled!) "[MenuState] Set Enabled" {
    Log($'{EventPlayer()}: SetEnabled');

    if(enabled != isEnabled) {
      Close();
      isEnabled = enabled;
    }
  }

  // TODO: STRUCT REWORK restore
  public void SetFocused() "[MenuState] Set Focused" {
    Log($'{EventPlayer()}: SetFocused');

    isFocused = true;

    // if(menuState != this) {
    //   menuState.isFocused = false;

    //   if(menuState.isOpen) {
    //     menuState.hoveredItem.OnLeave();
    //   }
      
    //   menuState = this;
    //   isFocused = true;

    //   if(isOpen) {
    //     hoveredItem.OnEnter();
    //   }
    // }
  }

  # NOTE: This won't rerender the menu
  public void SetHoveredItemIndex(Number index!) "[MenuState] Set Hovered Item Index" {
    Log($'{EventPlayer()}: SetHoveredItemIdx');

    history[history.Length - 1] = { innerScroll: index, outerScroll: 0, ..history.Last };

    HandleScroll();
  }

  public void AddItems(Number[] newItemsIndexes!, Boolean callOnItemsChanged! = true) "[MenuState] Add Items" {
    // TODO: for some reason this doesn't work.... convert to struct first?
    indexes += newItemsIndexes;

    Log($'{EventPlayer()}: AddItems - adding {newItemsIndexes.Length} items, {indexes.Length} in total');
    
    if(callOnItemsChanged) {
      OnItemsChanged();
    }
  }

  public void RemoveItems(Number[] indexes!, Boolean callOnItemsChanged! = true) "[MenuState] Remove Items" {
    Log($'{EventPlayer()}: RemoveItems');

    indexes += childIndexes(indexes);
    this.indexes -= indexes;
    
    // TODO: STRUCT REWORK restore
    // foreach(Number index! in indexes) {
    //   if(index == emptyText) continue;      
    // }

    menuComponents -= indexes.Map((i) => menuComponents[i]);
    
    if(callOnItemsChanged) {
      OnItemsChanged();
    }
  }

  public void RemoveAllItems(Boolean callOnItemsChanged! = true) {
    RemoveItems(this.indexes, callOnItemsChanged);
  }

  public void ReplaceItems(Number[] newItemsIndexes!) "[MenuState] Replace Items" {
    Log($'{EventPlayer()}: ReplaceItems');

    RemoveAllItems(false);
    AddItems(newItemsIndexes, false);

    // RemoveItems(this.indexes - items, false);
    // AddItems(items - this.indexes, false);

    // // keep the order of passed items
    // this.indexes = items;

    OnItemsChanged();
  }

  protected void OnItemsChanged() "[MenuState] On Items Changed" {
    Log($'{EventPlayer()}: OnItemsChanged');

    if(!indexes) {
      indexes = [emptyTextIndex];
    } else if(indexes.Length > 1 && indexes.Contains(emptyTextIndex)) {
      indexes -= emptyTextIndex;
    }
    
    // hoveredItemIdx is calculated later in `HandleScroll()`
    Number scroll! = history.Last.outerScroll + history.Last.innerScroll;
    Number hover: indexes[scroll];

    if(!hover || menuComponents[hover].disabled) {
      Number[] enabled! = enabledItemsIndexes;
      history[history.Length - 1].innerScroll = Max(enabled.First, Min(enabled.Last, scroll));
    }

    HandleScroll();
  }

  // phase 1: handle events
  public void Open() "[MenuState] Open" {
    Log($'{EventPlayer()}: Open');

    if(!isOpen && isEnabled) {
      isOpen = true;

      // TODO: STRUCT REWORK restore
      // if(isFocused) hoveredItem.OnEnter();
      MarkToRerender();
    }
  }

  public void Close() "[MenuState] Close" {
    Log($'{EventPlayer()}: Close');

    if(isOpen) {
      isOpen = false;
      
      // TODO: STRUCT REWORK restore
      // if(isFocused) hoveredItem.OnLeave();
      MarkToRerender();
    }
  }

  public void CreatePage(String title!, Number[] items!, Description[] descriptions! = []) "[MenuState] Create Page" {
    Log($'{EventPlayer()}: CreatePage');

    SetTitle(title);
    AddItems(items);

    Log($"Created page: {title} with {indexes.Length} items in total");

    foreach(Description desc! in descriptions)
      descriptionsPage += desc;

    if(isOpen) {
      // TODO: STRUCT REWORK restore
      // hoveredItem.OnEnter();

      // `AddItems` already adds items to render queue
      MarkToRerender();
    }
  }

  public void DestroyPage() "[MenuState] Destroy Page" {
    Log($'{EventPlayer()}: DestroyPage');

    if(isOpen) {
      // hoveredItem.OnLeave();
    }

    RemoveItems(indexes, false);

    buttonsHeld = [];
    descriptionsPage = [];
  }

  public virtual void Navigate(Vector direction!) "[MenuState] Navigate" {
    EnableInspectorRecording();
    Log($'{EventPlayer()}: Navigate');
    DisableInspectorRecording();

    // TODO: STRUCT REWORK restore
    // hoveredItem.OnNavigate(direction);

    if(!isLocked && (direction == Down() || direction == Up())) {
      Number offset! = 0;
      Number hov: hoveredIndex;
      Number[] it! = enabledItemsIndexes;

      if(direction == Down()) {
        Number nextItemIdx! = indexes.FilteredArray((i, idx) => !menuComponents[i].disabled && idx > hov).First;

        offset = (nextItemIdx == -1 ? indexes.IndexOf(it.First) : nextItemIdx) - hov;
      } else if(direction == Up()) {
        Number prevItemIdx! = indexes.FilteredArray((i, idx) => !menuComponents[i].disabled && idx < hov).Last;

        offset = (prevItemIdx == -1 ? indexes.IndexOf(it.Last) : prevItemIdx) - hov;
      }

      if(offset != 0) {
        // TODO: STRUCT REWORK restore
        // hoveredItem.OnLeave();
        
        history[history.Length - 1].innerScroll += offset;
        HandleScroll(); 

        // TODO: STRUCT REWORK restore
        // hoveredItem.OnEnter();
      }
    }

    MarkToRerender();
  }

  public virtual void ButtonDown(Button button!) "[MenuState] Button Down" {
    Log($'{EventPlayer()}: ButtonDown');

    if(!isOpen) {
      if(buttonsHeld == _toggleMenu && !isPuppet) {
        Open();
      }
    } else {
      // TODO: STRUCT REWORK restore
      // hoveredItem.OnButtonDown(button);

      if(!isLocked) {
        if(buttonsHeld == _toggleMenu && !isPuppet) {
          Close();
        } else if(buttonsHeld == [BUTTON_BACK]) {
          GoBack();
        }
      }
    }

    if(isOpen) {
      MarkToRerender();
    }
  }

  public virtual void ButtonUp(Button button!) "[MenuState] Button Up" {
    Log($'{EventPlayer()}: ButtonUp');

    // when changing page `buttonsHeld` is being cleared
    if(!buttonsHeld.Contains(button)) return;

    if(isOpen) {
      // TODO: STRUCT REWORK restore
      // hoveredItem.OnButtonUp(button);
      MarkToRerender();
    }
  }

  // phase 2: render
  protected void RenderClosedItems() {
    renderedTexts.merged = isPuppet || hideTextWhenClosed ? [] : [
      { 
        text: $"Press {ButtonFormatter_Underscores(_toggleMenu)}​ to toggle Menu", 
        color: COLOR_NEUTRAL
      }
    ];
  }

  protected void RenderTitle(in String title) {
    renderedTexts.titles = [
      { 
        text: title,
        color: COLOR_NEUTRAL
      }
    ];
  }

  protected void RenderSeparators() {
    renderedTexts.separators = [
      { 
        text: $"──────────────────────{indexes.Length < MAX_ITEMS ? '─' : history.Last.outerScroll == 0 ? '△' : '▲'}──────────────────────", 
        color: COLOR_NEUTRAL 
      },
      {
        text: $"──────────────────────{indexes.Length < MAX_ITEMS ? '─' : history.Last.outerScroll == indexes.Length - MAX_ITEMS ? '▽' : '▼'}──────────────────────",
        color: COLOR_NEUTRAL
      }
    ];
  }

  protected void RenderDescription() {
    Description[] descriptionArr = hoveredItem.descriptions;

    if(hoveredItem.childIndex) {
      descriptionArr += menuComponents[hoveredItem.childIndex].descriptions;
    }

    descriptionArr += descriptionsPage + descriptionsMenu;

    renderedTexts.descriptions = descriptionArr
      .FilteredArray((i) => i.visible)
      .SortedArray((i) => i.order)
      .Map((i) => <RenderedText>{text: i[0], color: i[1]});
  }

  protected void RenderVisibleItems() {
    RenderDescription();

    Number[] v = visibleIndexes;

    renderedTexts.items = [];

    for(Number idx = 0; idx < v.Length; idx++) {
      Number actualIdx: idx + history.Last.outerScroll;
      Number index: v[idx];
      Component item: menuComponents[index];
      
      if(item.shouldRerender || menuComponents[item.childIndex].shouldRerender) {
        // Log($'Rerendering: {item.text}');

        // `Render()` of a child called here, not in Component because it becomes recursive for some reason
        if(item.childIndex) {
          // TODO: STRUCT REWORK restore
          // item.child.Render();
          // item.child.shouldRerender = false;
        }

        // item.Render();
        // item.shouldRerender = false;
      }

      renderedTexts.items[idx] = { 
        text: $"{!item.disabled ? isFocused && hoveredIndex == actualIdx ? '● ' : '○ ' : ''}{item.renderedText}",
        color: item.color 
      };
    }
  }

  protected void MergeTexts() {
    renderedTexts.merged = renderedTexts.titles + [renderedTexts.separators[0]] + renderedTexts.items;

    if(indexes.Length > MAX_ITEMS || renderedTexts.descriptions.Length)
      renderedTexts.merged += [renderedTexts.separators[1]];

    renderedTexts.merged += renderedTexts.descriptions;
  }

  public void MarkToRerender() {
    Log($'{EventPlayer()}: Mark to rerender');

    shouldRerender = true;
  }

  public void Render() "[MenuState] Render" {
    Log($'{EventPlayer()}: Render');

    shouldRerender = false;

    if(isOpen) {
      RenderVisibleItems();
      MergeTexts();
    } else {
      RenderClosedItems();
    }
  }

  public void RULE_Render() {
    WaitForeverUntil(shouldRerender);
    Render();
    Loop();
  }

  protected void HandleScroll() "[MenuState] Handle Scroll" {
    Log($'{EventPlayer()}: HandleScroll');

    Number idx! = history.Length - 1;
    Number offset! = 0;

    if(history.Last.innerScroll > MAX_ITEMS - 1) {
      offset = history.Last.innerScroll - (MAX_ITEMS - 1);
      history[idx] = {innerScroll: MAX_ITEMS - 1, outerScroll: history.Last.outerScroll + offset, ..history[idx]};
    } else if(history.Last.innerScroll < 0) {
      offset = history.Last.innerScroll;
      history[idx] = {innerScroll: 0, outerScroll: Max(0, history.Last.outerScroll + offset), ..history[idx]};
    }

    hoveredIndex = history.Last.innerScroll + history.Last.outerScroll;
    RenderSeparators();
  }

  public void Refresh() "[MenuState] Refresh" {
    // Log($'{EventPlayer()}: Refresh');

    history += [{ id: '<REFRESH>', innerScroll: 0, outerScroll: 0 }];
    Wait();
    DestroyPage();
    history.ModRemoveByIndex(history.Length - 1);
  }

  public virtual void GoTo(String pageId!, Boolean historyReplace! = false) "[MenuState] Go To" {
    Log($'{EventPlayer()}: GoTo');

    if(this.pageId != pageId) {
      DestroyPage();

      if(historyReplace)
        history[history.Length - 1] = HistoryItem.New(pageId);
      else
        history += HistoryItem.New(pageId);
    }
  }

  public virtual void GoBack() "[MenuState] Go Back" {
    Log($'{EventPlayer()}: GoBack');

    if(history.Length == 1) {
      if(!isPuppet) Close();
      return;
    }

    DestroyPage();
    history.ModRemoveByIndex(history.Length - 1);
  }

  public Number AddPageDescription(Description desc!) "[MenuState] Add Page Description" {
    descriptionsPage += desc;
    return descriptionsPage.Length - 1;
  }

  public Number AddMenuDescription(Description desc!) "[MenuState] Add Menu Description" {
    descriptionsMenu += desc;
    return descriptionsMenu.Length - 1;
  }

  public void RemoveMenuDescription(Number idx!) "[MenuState] Remove Page Description" {
    descriptionsMenu.ModRemoveByIndex(idx);
  }

  // TODO: STRUCT REWORK restore
  // public void WaitUntilButtonDown(in String id, in Button button) {
  //   WaitForeverUntil(onButtonDown(id, button));
  // }

  // public void WaitUntilButtonUp(in String id, in Button button) {
  //   WaitForeverUntil(!onButtonDown(id, button));
  // }

  // events
  // TODO: STRUCT REWORK restore
  // public Boolean onButtonDown(in String id, in Button button): isOpen && isFocused && hoveredItem.id == id && buttonsHeld.Contains(button);
   
  // public Boolean onEnter(in String id): isOpen && isFocused && hoveredItem.id == id;

  // public Boolean onNavigate(in String id, in Vector direction) {
  //   Vector diff = ThrottleOf(EventPlayer()) - direction * 0.5;
  //   Boolean x = AbsoluteValue(diff.X) > 0.5;
  //   Boolean y = AbsoluteValue(diff.Y) > 0.5;
  //   return isOpen && isFocused && hoveredItem.id == id && (x && !y || !x && y);
  // }
}