import '../utils/index.del';
import '../utils/button.allowAll.del';
import '../utils/button.disallowAll.del';
import '../utils/button.buttonsHeld.del';
import './state.del';

rule: '[MenuState] Freeze player'
Event.OngoingPlayer
if(menuState.open)
{
  SetMoveSpeed(EventPlayer(), 0);
  DisallowAllButtons();

  WaitForeverUntil(!menuState.open);

  SetMoveSpeed(EventPlayer(), 100);
  AllowAllButtons();
}

rule: '[MenuState] Handle Held Buttons'
Event.OngoingPlayer
{
  Button[] prevButtons! = buttonsHeld;

  WaitForeverUntilConditionChanges(buttonsHeld);

  Button[] newButtons: buttonsHeld - prevButtons;
  Button[] oldButtons: prevButtons - buttonsHeld;

  foreach(Button button! in newButtons)
    menuState.ButtonDown(button);

  foreach(Button button! in oldButtons)
    menuState.ButtonUp(button);

  Loop();
}

//
// navigation
//
void NavigationHelper(Vector direction!) "[MenuState]: Navigation Helper" {
  menuState.Navigate(direction);

  Wait(0.5, WaitBehavior.AbortWhenFalse);

  while(true) {
    Wait(0.075, WaitBehavior.AbortWhenFalse);
    menuState.Navigate(direction);
  }
}

rule: '[MenuState]: Interacted with menu - Up'
Event.OngoingPlayer
if(menuState.open)
if(ThrottleOf(EventPlayer()).Z > 0.5)
{
  NavigationHelper(Up());
}

rule: '[MenuState]: Interacted with menu - Down'
Event.OngoingPlayer
if(menuState.open)
if(ThrottleOf(EventPlayer()).Z < -0.5)
{
  NavigationHelper(Down());
}

rule: '[MenuState]: Interacted with menu - Left'
Event.OngoingPlayer
if(menuState.open)
if(ThrottleOf(EventPlayer()).X < -0.5)
{
  NavigationHelper(Left());
}

rule: '[MenuState]: Interacted with menu - Right'
Event.OngoingPlayer
if(menuState.open)
if(ThrottleOf(EventPlayer()).X > 0.5)
{
  NavigationHelper(Right());
}

rule: '[MenuState]: Logic' 99999
Event.OngoingPlayer
{
  menuState.RULE_Logic();
}
