import './toggle.del';

class Radio: Toggle
{
  public static Component New(
    in String label, 
    in String name,
    in (() => Boolean) defaultChecked = null,
    in Description[] descriptions = [],
    in Color color = COLOR_NEUTRAL,
    in Button button = Toggle.BUTTON_TOGGLE,
    in Number childIndex = -1,

    in (() => void) onRender = null,
    in (() => void) onEnter = null,
    in (() => void) onLeave = null,
    in ((Button) => void) onButtonDown = null,
    in ((Button) => void) onButtonUp = null,
    in ((Vector) => void) onNavigate = null,
    in (() => void) onPrimaryAction = null,
    in String onPrimaryActionDescription = null,
    in (() => void) onSecondaryAction = null,
    in String onSecondaryActionDescription = null,
    in (() => void) onTertiaryAction = null,
    in String onTertiaryActionDescription = null,
    in (() => void) onQuaternaryAction = null,
    in String onQuaternaryActionDescription = null,
    in ((Any) => void) onChange = null
  ): Component.New(
    type: ComponentType.Radio,
    label: label, 
    name: name,
    defaultValue: defaultChecked,
    value: defaultChecked(),
    descriptions: [
      Description.New($"Press {ButtonFormatterSingle_Underscores(button)}​ to toggle", order: ButtonDescriptionOrder(button))
    ] + descriptions,
    color: color,
    button: button,
    childIndex: childIndex,

    onRender: onRender,
    onEnter: onEnter,
    onLeave: onLeave,
    onButtonDown: onButtonDown,
    onButtonUp: onButtonUp,
    onNavigate: onNavigate,
    onPrimaryAction: onPrimaryAction,
    onPrimaryActionDescription: onPrimaryActionDescription,
    onSecondaryAction: onSecondaryAction,
    onSecondaryActionDescription: onSecondaryActionDescription,
    onTertiaryAction: onTertiaryAction,
    onTertiaryActionDescription: onTertiaryActionDescription,
    onQuaternaryAction: onQuaternaryAction,
    onQuaternaryActionDescription: onQuaternaryActionDescription,
    onChange: onChange,
  );

  // public override void SetValue(Any checked!) "[Radio] Set Checked" {
  //   if(this.checked != checked && !this.checked) {
  //     Component[] arr! = menuState.items.Map((i) => i.name == name ? i : i.child.name == name ? i : null).FilteredArray((i) => i);

  //     foreach(Component sibling! in arr) {
  //       if((<Toggle>sibling).checked) {
  //         // don't trigger callbacks
  //         (<Toggle>sibling).value = false;
  //         (<Toggle>sibling).shouldRerender = true;
  //       }
  //     }

  //     value = checked;
  //     OnChange();
  //   }
  // }

  // public override void Render() "[Radio] Render" {
  //   onRender(this);
  //   renderedText = $"{checked ? "(✓)" : "(    )"}​ {child.renderedText || text}";
  // }
}