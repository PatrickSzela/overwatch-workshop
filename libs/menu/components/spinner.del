import '../../utils/number.del';
import '../menuState.del';
import './componentWithValue.del';

class Spinner: ComponentWithValue
{
  public String DESCRIPTION: $'Press {ButtonFormatterSingle(BUTTON_EDIT_MODE)}​ to {editMode ? "disable" : "enable"}​ Edit Mode';
  public static Button BUTTON_EDIT_MODE: Button.Melee;
  public MenuState _menuState;
  public Boolean editMode;
  public Boolean negative;
  public Number integralLength;
  public Number fractionalLength;
  public Number length: 1 + integralLength + (fractionalLength ? 1 + fractionalLength : 0);
  public Number[] parts;
  public String unit;
  protected Number index;

  public constructor(
    in MenuState menuState!,
    in String text!, 
    in Any defaultValue! = null,
    in Boolean negative! = false,
    in Number integralLength! = 3,
    in Number fractionalLength! = 0,
    in String unit! = null
  ) {
    ConstructorSpinner([menuState, text, defaultValue, negative, integralLength, fractionalLength, unit]);
  }

  protected void ConstructorSpinner(Any[] arr!) "[Spinner] Constructor Base" {
    MenuState menuState: arr[0];
    String text: arr[1];
    Any defaultValue: arr[2];
    Boolean negative: arr[3];
    Number integralLength: arr[4];
    Number fractionalLength: arr[5];
    String unit: arr[6];

    this.defaultValue = defaultValue == null ? 0 : defaultValue;

    ConstructorWithValue([text, this.defaultValue, null]);

    this._menuState = menuState;
    this.editMode = false;
    this.parts = NumberToParts(this.defaultValue, integralLength, fractionalLength);
    this.index = negative ? 0 : 1;
    this.negative = negative;
    this.integralLength = integralLength;
    this.fractionalLength = fractionalLength;
    this.unit = unit;

    AddDescription(DESCRIPTION, Color.Green);
    AddDescription('Use [↑] or [↓] to increase/decrease current number', visible: false);
    AddDescription('Use [←] or [→] to change currenty edited number', visible: false);
  }

  public override void OnNavigate(Vector direction!) "[Spinner] OnNavigate" {
    if(!editMode) return;

    onNavigate(direction, this);

    if(direction == Left() || direction == Right()) {
      Number offset! = direction == Right() ? -1 : 1;
      index += offset;

      // selected dot
      if(index > 0 && parts[index] == -1)
        index += offset;

      if(index < (negative ? 0 : 1)) index = length - 1;
      else if(index > length - 1) index = (negative ? 0 : 1);
    } else {
      Any oldVal! = value;

      if(index == 0) {
        parts[index] = parts[index] == 1 ? -1 : 1;
      } else {
        if(direction == Up()) parts[index]++;
        else if(direction == Down()) parts[index]--;

        if(parts[index] > 9) parts[index] = 0;
        else if(parts[index] < 0) parts[index] = 9;
      }

      value = NumberFromParts(parts);

      if(oldVal != value) {
        OnChange();
      }
    }
  }

  public override void OnButtonDown(Button button!) "[Spinner] OnButtonDown" {
    onButtonDown(button, this);

    if(button == BUTTON_EDIT_MODE) {
      editMode = !editMode;

      _menuState.isLocked = !editMode;
      this.description[0].color = editMode ? Color.Red : Color.Green;
      this.description[0].text = DESCRIPTION;
      this.description[1].visible = editMode;
      this.description[2].visible = editMode;
    }
  }

  public override void FormatText() "[Spinner] FormatText" {
    renderedText = textFormatter(this);
    if(length <= 0) renderedText = $"{renderedText}: Empty";
    else {
      String text!;
      if(editMode) {
        String[] vals! = parts.Map((i, idx) => 
          idx == 0 ? 
            i == -1 ? '-' : '+' :
            i == -1 ? '.' : i
        ).Map((i, idx) => idx == index && editMode ? $"[{i}]" : i);

        if(!negative) 
          vals = vals.Slice(1, vals.Length);

        text = Join(vals, " ");
      } else {
        text = value;
      }
      renderedText = $"{renderedText}: {text}​{unit ? unit : ''}";
    }
  }

  public virtual void OnChange() "[Spinner] OnChange" {
    onChange(value, this);
  }
}