single struct Description {
  public String text;
  public Color color;
  public Boolean visible;
  public Number order;

  public static Description BASE: {
    text: '',
    color: Color.White,
    visible: true,
    order: 0
  };
}

class Component {
  public String id;
  public Color color;
  public String name;
  public String text;
  public String renderedText;
  public Description[] description;
  public Boolean disabled;
  public Component child;
  public Boolean updateEveryFrame;
  
  public ((Component) => String) textFormatter;
  static private ((Component) => String) defaultTextFormatter: (it) => it.text;

// events
  public ((Component) => void) onEnter;
  public ((Component) => void) onLeave;
  public ((Button, Component) => void) onButtonDown;
  public ((Button, Component) => void) onButtonUp;
  public ((Vector, Component) => void) onNavigate;

  public constructor(
    in String text,
    in Component child = null
  ) {
    ComponentConstructor(text, child);
  }

  protected void ComponentConstructor(
    String text!,
    Component child! = null
  ) "[Component] Constructor" {
    this.text = text;
    this.description = [];
    this.textFormatter = defaultTextFormatter;
    this.child = child;
    this.color = Color.White;
  }
  
  public void AddDescription(in String description!, in Color color! = Color.White, in Boolean visible! = true, in Number order! = 0) {
    this.description += {text: description, color: color, visible: visible, order: order};
  }

  public virtual void FormatText() "[Component] FormatText" {
    renderedText = child ? child.renderedText : textFormatter(this);
  }

  // events
  public virtual void OnEnter() "[Component] OnEnter" {
    onEnter(this);
  }

  public virtual void OnLeave() "[Component] OnLeave" {
    onLeave(this);
  }
  
  public virtual void OnButtonDown(Button button!) "[Component] OnButtonDown" {
    onButtonDown(button, this);
    if(child != null)
      child.OnButtonDown(button);
  }

  public virtual void OnButtonUp(Button button!) "[Component] OnButtonUp" {
    onButtonUp(button, this);
    if(child != null)
      child.OnButtonUp(button);
  }

  public virtual void OnNavigate(Vector direction!) "[Component] OnNavigate" {
    onNavigate(direction, this);
    if(child != null)
      child.OnNavigate(direction);
  }
}