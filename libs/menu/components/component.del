import '../../utils/button.buttonsHeld.del';
import '../../utils/string.formatters.del';
import '../../utils/index.del';
import '../helpers.del';
import '../customButtons.del';

playervar Component[] menuComponents = [];

Number AddComponent(in Component component) {
  menuComponents += component;
  return menuComponents.Length - 1;
}

Number[] AddComponents(in Component[] components) {
  Number[] indexes! = components.Map((i, idx) => menuComponents.Length + idx);
  menuComponents += components;

  LogHelper($"added {components.Length} components, {menuComponents.Length} total");

  return indexes;
}

void UnregisterComponent(in Number index) {
  menuComponents.ModRemoveByIndex(index);
}

void UnregisterComponents(in Number[] indexes) {
  menuComponents -= indexes.Map((i) => menuComponents[i]);
  // foreach(Number i! in indexes) {
  //   Log($"removing component {i}");
  //   menuComponents.ModRemoveByIndex(i);
  // }

  LogHelper($"removed {indexes.Length} components, {menuComponents.Length} total");
}

enum ComponentType {
  Component,
  Text,
  Value,
  Link,
  Toggle,
  Checkbox,
  Radio,
  Carousel,
  TextInput,
  NumberInput
}

enum ComponentEvent {
  Render,
  Enter,
  Leave,
  ButtonDown,
  ButtonUp,
  Navigate,
  PrimaryAction,
  SecondaryAction,
  TertiaryAction,
  QuaternaryAction,
  Change
}

struct Component {
  # Type of the component 
  public ComponentType type;
  # Displayed label
  public String label;
  # Name under which the value of the component is stored
  public String name;
  # Value stored in the component
  # 
  # Usable by:
  # - `Value` - stores displayed value
  # - `Link` - stores Page ID that should be opened when interacted
  # - `Toggle`, `Radio`, `Checkbox` - stores Component's current state
  # - `Carousel` - stores currently selected option
  # - `TextInput`, `NumberInput` - stores merged `parts`
  public Any value;
  # Default value of the component
  public Any defaultValue;
  # Formatter that generates nicely formatted String from a `value`
  public ((Any) => String) valueFormatter;
  # Available options
  # 
  # Usable by:
  # - `Carousel`
  public Any[] options;
  # Index of the currently selected option
  # 
  # Usable by:
  # - `Carousel`
  # - `TextInput`, `NumberInput`
  public Number optionIndex;
  # Value split into parts
  # 
  # Usable by:
  # - `TextInput`, `NumberInput` - user's provided value in edit mode
  public Number[] parts;
  # Descriptions assigned to the component
  public Description[] descriptions;
  public String[] actionDescriptions;
  # Color of the displayed text
  public Color color;
  # Whether component is disabled
  public Boolean disabled;
  # Stores settings required for `NumberInput` and `TextInput`
  public InputSettings inputSettings;
  # Whether the component captures all navigation inputs from the menu
  # 
  # Usable by:
  # - `TextInput`, `NumberInput`
  public Boolean captureNavigationInputs;
  # Button which triggers Component's built-in functionality
  # 
  # Usable by:
  # - `Link` - button that opens a page
  # - `Toggle`, `Radio`, `Checkbox` - button that toggles component's state
  # - `TextInput`, `NumberInput` - button that toggles edit mode
  public Button button;
  # Whether the component should rerender during next rendering phase
  public Boolean shouldRerender;
  # Fully rendered text
  public String renderedText;
  # Index of a child component
  public Number childIndex;
  # Whether the component has a child assigned to it.
  public Boolean hasChild: childIndex > -1;
  # Alias for `value`
  public Boolean checked: value;
  # Alias for `defaultValue`
  public (() => Boolean) defaultChecked: defaultValue;
    

  // public static ((Any) => String) VALUE_FORMATTER: (value) => value;

  // # Parent `MenuState`
  // public MenuState menuState;
  // # Unique identifier of the component
  // public Number id;


  
  # List of callbacks that will be called when user interacts with the component. Each index corresponds to a specified event:
  # - Render - component has been rendered
  # - Enter - user has focused the component
  # - Leave - user has unfocused the component
  # - ButtonDown - user has pressed a button
  # - ButtonUp - user has released a button
  # - Navigate - user used navigation inputs
  # - PrimaryAction - user has pressed primary button
  # - SecondaryAction - user has pressed secondary button
  # - TertiaryAction - user has pressed tertiary button
  # - QuaternaryAction - user has pressed quaternary button
  # - Change - component's value has been changed
  public (() => void)[] callbacks;

    
  public (() => void) onRender: 
    callbacks[<Number>ComponentEvent.Render];
  public (() => void) onEnter: 
    callbacks[<Number>ComponentEvent.Enter];
  public (() => void) onLeave: 
    callbacks[<Number>ComponentEvent.Leave];
  public ((Button) => void) onButtonDown: 
    <((Button) => void)>callbacks[<Number>ComponentEvent.ButtonDown];
  public ((Button) => void) onButtonUp: 
    <((Button) => void)>callbacks[<Number>ComponentEvent.ButtonUp];
  public ((Vector) => void) onNavigate: 
    <((Vector) => void)>callbacks[<Number>ComponentEvent.Navigate];
  public ((Vector) => void) onChange: 
    <((Any) => void)>callbacks[<Number>ComponentEvent.Change];



  public static Component New(
    in String label,
    in ComponentType type = ComponentType.Component,
    in String name = null,
    in Any value = null,
    in Any defaultValue = null,
    in ((Any) => String) valueFormatter = null,
    in Any[] options = [],
    in Number optionIndex = 0,
    in Number[] parts = [],
    in Description[] descriptions = [],
    in Color color = COLOR_NEUTRAL,
    in Boolean disabled = false,
    in InputSettings inputSettings = InputSettings.New(),
    in Boolean captureNavigationInputs = false,
    in Button button = BUTTON_PRIMARY,
    in Number childIndex = -1,

    in (() => void) onRender = null,
    in (() => void) onEnter = null,
    in (() => void) onLeave = null,
    in ((Button) => void) onButtonDown = null,
    in ((Button) => void) onButtonUp = null,
    in ((Vector) => void) onNavigate = null,
    in (() => void) onPrimaryAction = null,
    in String onPrimaryActionDescription = null,
    in (() => void) onSecondaryAction = null,
    in String onSecondaryActionDescription = null,
    in (() => void) onTertiaryAction = null,
    in String onTertiaryActionDescription = null,
    in (() => void) onQuaternaryAction = null,
    in String onQuaternaryActionDescription = null,
    in ((Any) => void) onChange = null
  ): {
    type: type,
    label: label, 
    name: name,
    value: value, 
    defaultValue: defaultValue,
    valueFormatter: valueFormatter,
    options: options,
    optionIndex: optionIndex,
    parts: parts,
    descriptions: descriptions,
    actionDescriptions: [
      onPrimaryActionDescription, 
      onSecondaryActionDescription, 
      onTertiaryActionDescription, 
      onQuaternaryActionDescription
    ],
    color: color,
    disabled: disabled,
    inputSettings: inputSettings, 
    captureNavigationInputs: captureNavigationInputs, 
    button: button, 
    shouldRerender: true,
    renderedText: '',
    childIndex: childIndex, 

    // id: null, 
    // menuState: null, 

    // onRender: null,
    // onEnter: null,
    // onLeave: null,
    // onButtonDown: null,
    // onButtonUp: null,
    // onNavigate: null,
    callbacks: [
      onRender,
      onEnter,
      onLeave,
      onButtonDown,
      onButtonUp,
      onNavigate,
      onPrimaryAction,
      onSecondaryAction,
      onTertiaryAction,
      onQuaternaryAction,
      onChange
    ]
  };

  
  
  public ref void AddDescription(in Description description) {
    descriptions += description;
  }

  public ref void MarkToRerender() {
    shouldRerender = true;
  }

  public ref void SetOnEnter(in () => void callback) {
    callbacks[<Number>ComponentEvent.Enter] = callback;
  }

  public ref void SetOnLeave(in () => void callback) {
    callbacks[<Number>ComponentEvent.Leave] = callback;
  }

  public ref void SetOnButtonDown(in (Button) => void callback) {
    callbacks[<Number>ComponentEvent.ButtonDown] = callback;
  }

  public ref void SetOnButtonUp(in (Button) => void callback) {
    callbacks[<Number>ComponentEvent.ButtonUp] = callback;
  }

  public ref void SetOnNavigate(in (Vector) => void callback) {
    callbacks[<Number>ComponentEvent.Navigate] = callback;
  }

  public ref void SetOnPrimaryAction(in String description, in () => void action) {
    callbacks[<Number>ComponentEvent.PrimaryAction] = action;
    AddDescription(Description.New($"Press {ButtonFormatterSingle_Underscores(BUTTON_PRIMARY)}​ to {description}", order: ButtonDescriptionOrder(BUTTON_PRIMARY)));
  }

  public ref void SetOnSecondaryAction(in String description, in () => void action) {
    callbacks[<Number>ComponentEvent.SecondaryAction] = action;
    AddDescription(Description.New($"Press {ButtonFormatterSingle_Underscores(BUTTON_SECONDARY)}​ to {description}", order: ButtonDescriptionOrder(BUTTON_SECONDARY)));
  }

  public ref void SetOnTertiaryAction(in String description, in () => void action) {
    callbacks[<Number>ComponentEvent.TertiaryAction] = action;
    AddDescription(Description.New($"Press {ButtonFormatterSingle_Underscores(BUTTON_TERTIARY)}​ to {description}", order: ButtonDescriptionOrder(BUTTON_TERTIARY)));
  }

  public ref void SetOnQuaternaryAction(in String description, in () => void action) {
    callbacks[<Number>ComponentEvent.QuaternaryAction] = action;
    AddDescription(Description.New($"Press {ButtonFormatterSingle_Underscores(BUTTON_QUATERNARY)}​ to {description}", order: ButtonDescriptionOrder(BUTTON_QUATERNARY)));
  }

  public ref void SetOnChange(in (Any) => void callback) {
    callbacks[<Number>ComponentEvent.Change] = callback;
  }

  public ref void SetValue(in Any newValue) {
    if(value != newValue) {
      value = newValue;
      onChange(newValue);
      MarkToRerender();
    }
  }

  // public virtual void HandleActions() "[Component] Handle Action" {
  //   if(buttonsHeld == [BUTTON_PRIMARY]) onPrimaryAction(this);
  //   else if(buttonsHeld == [BUTTON_SECONDARY]) onSecondaryAction(this);
  //   else if(buttonsHeld == [BUTTON_TERTIARY]) onTertiaryAction(this);
  //   else if(buttonsHeld == [BUTTON_QUATERNARY]) onQuaternaryAction(this);
  // }

  // // idk why OSTW thinks using child's `Render()` method makes it recursive
  // public virtual void Render() "[Component] Render" {
  //   onRender(this);
  //   renderedText = child.renderedText || label;
  // }

  // // events
  // public virtual void OnEnter() "[Component] OnEnter" {
  //   onEnter(this);

  //   if(child)
  //     child.OnEnter();
  // }

  // public virtual void OnLeave() "[Component] OnLeave" {
  //   onLeave(this);

  //   if(child)
  //     child.OnLeave();
  // }
  
  // public virtual void OnButtonDown(Button button!) "[Component] OnButtonDown" {
  //   onButtonDown(button, this);

  //   HandleActions();
    
  //   if(child)
  //     child.OnButtonDown(button);
  // }

  // public virtual void OnButtonUp(Button button!) "[Component] OnButtonUp" {
  //   onButtonUp(button, this);

  //   if(child)
  //     child.OnButtonUp(button);
  // }

  // public virtual void OnNavigate(Vector direction!) "[Component] OnNavigate" {
  //   onNavigate(direction, this);

  //   if(child)
  //     child.OnNavigate(direction);
  // }
}

// playervar Component[] test = [
//   Component.New(ComponentType.Text, 'Test'),
//   Component.New(ComponentType.Text, 'Test'),
//   Component.New(ComponentType.Text, 'Test'),
//   Component.New(ComponentType.Text, 'Test'),
//   Component.New(ComponentType.Text, 'Test'),
//   Component.New(ComponentType.Text, 'Test')
// ];

// rule: 'My Player Rule'
// Event.OngoingPlayer
// Team.All
// Player.All
// {
//   test[0].AddDescription(Description.New("aaaaa", COLOR_ERROR, true, 0));
//   test[0].SetPrimaryAction("bbbbb", () => Kill(HostPlayer()));
//   test[0].SetSecondaryAction("ccccc", () => Teleport(HostPlayer()));

//   test[0].MarkToRerender();
// }

// rule: 'My Player Rule'
// Event.OngoingPlayer
// Team.All
// Player.All
// {
//   Wait(5);
//   (test[0].actions[0])('t');
// }