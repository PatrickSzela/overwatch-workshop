import '../../utils/color.del';
import '../../utils/number.join.del';
import '../../utils/number.split.del';
import '../state.del';
import './component.del';

// TODO: split main logic into shared Input
// TODO: min, max?

globalvar Description[] NUMBER_INPUT_DESCRIPTIONS! = [
  Description.New('Use [↑] or [↓] to increase/decrease current number', visible: false, order: -19),
  Description.New('Use [←] or [→] to change currently edited number', visible: false, order: -18)
];

# NOTE: number passed in `defaultValue` will lose its precision because of Workshop limitations
class NumberInput {
  public static Button BUTTON_EDIT_MODE: BUTTON_QUATERNARY;
  // public String DESCRIPTION: $'Press {ButtonFormatterSingle_Underscores(BUTTON_EDIT_MODE)}​ to {editMode ? "disable" : "enable"}​ Edit Mode';

  public static Component New(
    in String label, 
    in String name = null,
    in Number defaultValue = 0,
    in Description[] descriptions = [],
    in Color color = COLOR_NEUTRAL,
    in Boolean negative = false,
    in Number integralLength = 3,
    in Number fractionalLength = 0,
    in String unit = '',
    in Button button = BUTTON_EDIT_MODE,
    
    in (() => void) onRender = null,
    in (() => void) onEnter = null,
    in (() => void) onLeave = null,
    in ((Button) => void) onButtonDown = null,
    in ((Button) => void) onButtonUp = null,
    in ((Vector) => void) onNavigate = null,
    in (() => void) onPrimaryAction = null,
    in String onPrimaryActionDescription = null,
    in (() => void) onSecondaryAction = null,
    in String onSecondaryActionDescription = null,
    in (() => void) onTertiaryAction = null,
    in String onTertiaryActionDescription = null,
    in (() => void) onQuaternaryAction = null,
    in String onQuaternaryActionDescription = null,
    in ((Any) => void) onChange = null
  ): Component.New(
    type: ComponentType.NumberInput,
    label: label,
    name: name,
    value: defaultValue,
    defaultValue: defaultValue,
    optionIndex: negative ? 0 : 1,
    descriptions: [
      Description.New($'Press {ButtonFormatterSingle_Underscores(button)}​ to toggle Edit Mode', COLOR_SWITCH, order: -20)
    ] + NUMBER_INPUT_DESCRIPTIONS + descriptions,
    color: color,
    inputSettings: InputSettings.New(
      negative: negative,
      integralLength: integralLength,
      fractionalLength: fractionalLength,
      unit: unit
    ),
    button: button,

    onRender: onRender,
    onEnter: onEnter,
    onLeave: onLeave,
    onButtonDown: onButtonDown,
    onButtonUp: onButtonUp,
    onNavigate: onNavigate,
    onPrimaryAction: onPrimaryAction,
    onPrimaryActionDescription: onPrimaryActionDescription,
    onSecondaryAction: onSecondaryAction,
    onSecondaryActionDescription: onSecondaryActionDescription,
    onTertiaryAction: onTertiaryAction,
    onTertiaryActionDescription: onTertiaryActionDescription,
    onQuaternaryAction: onQuaternaryAction,
    onQuaternaryActionDescription: onQuaternaryActionDescription,
    onChange: onChange,
  );

  protected static Number CalculateLength(ref Component component) {
    return 1 + component.inputSettings.integralLength + (component.inputSettings.fractionalLength ? 1 + component.inputSettings.fractionalLength : 0);
  }

  public static String Render(ref Component component) {
    Number length! = CalculateLength(component);
    String finalValue!;

    if(!component.parts) {
      component.parts = SplitNumber(component.value, component.inputSettings.integralLength, component.inputSettings.fractionalLength);
    }

    if(length <= 0) {
      finalValue = "Empty";
    } else {
      Any[] vals! = [];

      for(Number idx! = 0; idx < component.parts.Length; idx++) {
        Any i! = component.parts[idx];

        if(idx == 0) {
          i = i == -1 ? '-' : '+';
        } else if(!menuState.navigationLocked && vals.Length == 1 && i == 0 && (idx != component.parts.Length - 1 && component.parts[idx + 1] != -2)) {
          // TODO: trim leading zeros
          continue;
        } else if(i == -2) {
          i = '.';
        }

        if(menuState.navigationLocked && idx == component.optionIndex) {
          i = $"[{i}]";
        }

        vals += i;
      }

      if(!component.inputSettings.negative && component.parts[0] != -1) 
        vals = vals.Slice(1, NUMBER_MAX);

      finalValue = Join(vals, menuState.navigationLocked ? " " : "");

      finalValue = $"{finalValue}{component.inputSettings.unit}";
    }

    return $"{component.label}: {finalValue}";
  }

  public static void ButtonDown(ref Component component, in Button button) {
    if(buttonsHeld == [component.button]) {
      Boolean editMode! = !menuState.navigationLocked;

      menuState.navigationLocked = editMode;
      component.MarkToRerender();
      
      component.descriptions[0].color = editMode ? COLOR_ERROR : COLOR_SWITCH;
      component.descriptions[1].visible = editMode;
      component.descriptions[2].visible = editMode;
    }
  }

  public static void Navigate(ref Component component, in Vector direction) {
    if(!menuState.navigationLocked) return;

    Number offset! = direction == Right() ? -1 : 1;
    Number index! = component.optionIndex;
    Number[] parts! = component.parts;
    Boolean negative! = component.inputSettings.negative;
    Number length! = CalculateLength(component);

    component.MarkToRerender();

    if(direction == Left() || direction == Right()) {
      index += offset;

      // selected dot
      if(index > 0 && parts[index] == -2)
        index += offset;

      if(index < (negative ? 0 : 1)) index = length - 1;
      else if(index > length - 1) index = (negative ? 0 : 1);

      component.optionIndex = index;
    } else {
      if(index == 0) {
        parts[index] = parts[index] == 1 ? -1 : 1;
      } else {
        if(direction == Up()) parts[index]++;
        else if(direction == Down()) parts[index]--;

        if(parts[index] > 9) parts[index] = 0;
        else if(parts[index] < 0) parts[index] = 9;
      }
      
      component.parts = parts;
      component.SetValue(JoinNumber(parts));
    }
  }
}
  
  // protected void NumberInputConstructor(
  //   MenuState menuState!,
  //   String text!, 
  //   Number defaultValue! = 0,
  //   Boolean negative! = false,
  //   Number integralLength! = 3,
  //   Number fractionalLength! = 0,
  //   String unit! = null
  // ) "[NumberInput] Constructor" {
  //   ComponentWithValueConstructor(text, defaultValue, null);

  //   this._menuState = menuState;
  //   this.editMode = false;
  //   this.parts = SplitNumber(defaultValue, integralLength, fractionalLength);
  //   this.index = negative ? 0 : 1;
  //   this.negative = negative;
  //   this.integralLength = integralLength;
  //   this.fractionalLength = fractionalLength;
  //   this.unit = unit;

  //   CalculateLength();

  //   AddDescription(Description.New(DESCRIPTION, COLOR_SWITCH, order: -20));
  //   AddDescription(Description.New('Use [↑] or [↓] to increase/decrease current number', visible: false, order: -19));
  //   AddDescription(Description.New('Use [←] or [→] to change currently edited number', visible: false, order: -18));
  // }

  // public void CalculateLength() {
  //   length = 1 + integralLength + (fractionalLength ? 1 + fractionalLength : 0);
  // }

  // public override void OnNavigate(Vector direction!) "[NumberInput] OnNavigate" {
  //   onNavigate(direction, this);

  //   if(!editMode) return;

  //   shouldRerender = true;

  //   if(direction == Left() || direction == Right()) {      
  //     Number offset! = direction == Right() ? -1 : 1;
  //     index += offset;

  //     // selected dot
  //     if(index > 0 && parts[index] == -2)
  //       index += offset;

  //     if(index < (negative ? 0 : 1)) index = length - 1;
  //     else if(index > length - 1) index = (negative ? 0 : 1);
  //   } else {
  //     Any oldVal! = value;

  //     if(index == 0) {
  //       parts[index] = parts[index] == 1 ? -1 : 1;
  //     } else {
  //       if(direction == Up()) parts[index]++;
  //       else if(direction == Down()) parts[index]--;

  //       if(parts[index] > 9) parts[index] = 0;
  //       else if(parts[index] < 0) parts[index] = 9;
  //     }

  //     SetValue(JoinNumber(parts));
  //   }
  // }

  // public override void OnButtonDown(Button button!) "[NumberInput] OnButtonDown" {
  //   onButtonDown(button, this);

  //   HandleActions();

  //   if(buttonsHeld == [BUTTON_EDIT_MODE]) {
  //     editMode = !editMode;
      
  //     shouldRerender = true;

  //     _menuState.isLocked = editMode;
  //     this.descriptions[0].color = editMode ? COLOR_ERROR : COLOR_SWITCH;
  //     this.descriptions[0].text = DESCRIPTION;
  //     this.descriptions[1].visible = editMode;
  //     this.descriptions[2].visible = editMode;
  //   }
  // }

  // public override void Render() "[NumberInput] Render" {
  //   onRender(this);

  //   if(length <= 0) {
  //     renderedText = $"{text}: Empty";
  //   } else {
  //     Any[] vals! = [];

  //     for(Number idx! = 0; idx < parts.Length; idx++) {
  //       Any i! = parts[idx];

  //       if(idx == 0) {
  //         i = i == -1 ? '-' : '+';
  //       } else if(!editMode && vals.Length == 1 && i == 0 && (idx != parts.Length - 1 && parts[idx + 1] != -2)) {
  //         // trim leading zeros
  //         continue;
  //       } else if(i == -2) {
  //         i = '.';
  //       }

  //       if(editMode && idx == index) {
  //         i = $"[{i}]";
  //       }

  //       vals += i;
  //     }

  //     if(!negative && parts[0] != -1) 
  //       vals = vals.Slice(1, vals.Length);

  //     String final! = Join(vals, editMode ? " " : '');
  //     renderedText = $"{text}: {final}{unit ? unit : ''}";
  //   }
  // }
