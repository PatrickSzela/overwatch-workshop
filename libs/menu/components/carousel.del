import './component.del';

globalvar Description[] CAROUSEL_DESCRIPTIONS! = [
  Description.New('Use [←] or [→] to select an option', order: -19)
];

class Carousel {
  public static Component New(
    in String label,
    in Any[] options,
    in String name = null,
    in Any defaultValue = null,
    in ((Any) => String) valueFormatter = (value) => value,
    in Description[] descriptions = [],
    in Color color = COLOR_NEUTRAL,

    in (() => void) onRender = null,
    in (() => void) onEnter = null,
    in (() => void) onLeave = null,
    in ((Button) => void) onButtonDown = null,
    in ((Button) => void) onButtonUp = null,
    in ((Vector) => void) onNavigate = null,
    in (() => void) onPrimaryAction = null,
    in String onPrimaryActionDescription = null,
    in (() => void) onSecondaryAction = null,
    in String onSecondaryActionDescription = null,
    in (() => void) onTertiaryAction = null,
    in String onTertiaryActionDescription = null,
    in (() => void) onQuaternaryAction = null,
    in String onQuaternaryActionDescription = null,
    in ((Any) => void) onChange = null
  ): Component.New(
    type: ComponentType.Carousel,
    label: label,
    name: name,
    // TODO: handle that somewhere else?
    value: options.Contains(defaultValue) ? defaultValue : options.First,
    defaultValue: defaultValue,
    valueFormatter: valueFormatter,
    options: options,
    optionIndex: options.Contains(defaultValue) ? options.IndexOf(defaultValue) : 0,
    descriptions: CAROUSEL_DESCRIPTIONS + descriptions,
    color: color,

    onRender: onRender,
    onEnter: onEnter,
    onLeave: onLeave,
    onButtonDown: onButtonDown,
    onButtonUp: onButtonUp,
    onNavigate: onNavigate,
    onPrimaryAction: onPrimaryAction,
    onPrimaryActionDescription: onPrimaryActionDescription,
    onSecondaryAction: onSecondaryAction,
    onSecondaryActionDescription: onSecondaryActionDescription,
    onTertiaryAction: onTertiaryAction,
    onTertiaryActionDescription: onTertiaryActionDescription,
    onQuaternaryAction: onQuaternaryAction,
    onQuaternaryActionDescription: onQuaternaryActionDescription,
    onChange: onChange,
  );

  public static String Render(ref Component component) {
    if(component.options.Length == 0) return $"{component.label}: Empty";
    else return $"{component.label}: ← {component.valueFormatter(component.value)} →";
  }

  public static void Navigate(ref Component component, in Vector direction) {
    Number index! = component.optionIndex;
    Any[] options! = component.options;
    
    if(index == -1) {
      index = 0;
    } else {
      if(direction == Right()) index--;
      else if(direction == Left()) index++;

      if(index < 0) index = options.Length - 1;
      else if(index > options.Length - 1) index = 0;
    }

    component.optionIndex = index;
    component.SetValue(options[index]);
  }

  // protected void CarouselConstructor(
  //   String text!,
  //   Any[] options!,
  //   Any defaultValue! = null
  // ) "[Carousel] Constructor" {
  //   this.options = options;
    
  //   ComponentWithValueConstructor(text, !options.Contains(defaultValue) ? options.First : defaultValue, null);

  //   AddDescription(Description.New('Use [←] or [→] to select an option', order: -19));
  // }

  // public override void OnNavigate(Vector direction!) "[Carousel] OnNavigate" {
  //   onNavigate(direction, this);

  //   Number index! = options.IndexOf(value);

  //   if(index == -1) {
  //     index = 0;
  //   } else {
  //     if(direction == Right()) index--;
  //     else if(direction == Left()) index++;

  //     if(index < 0) index = options.Length - 1;
  //     else if(index > options.Length - 1) index = 0;
  //   }

  //   SetValue(options[index]);
  // }

  // public override void Render() "[Carousel] Render" {
  //   onRender(this);
  //   if(options.Length == 0) renderedText = $"{text}: Empty";
  //   else renderedText = $"{text}: ← {valueFormatter(this)}​ →";
  // }
}
