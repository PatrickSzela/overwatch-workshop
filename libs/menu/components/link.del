import '../window.del';
import './component.del';

class Link {
  public static Component New(
    in String label,
    in String pageId,
    in Description[] descriptions = [],
    in Color color = COLOR_NEUTRAL,
    in Button button = BUTTON_PRIMARY,
    in Number childIndex = -1,

    in (() => void) onRender = null,
    in (() => void) onEnter = null,
    in (() => void) onLeave = null,
    in ((Button) => void) onButtonDown = null,
    in ((Button) => void) onButtonUp = null,
    in ((Vector) => void) onNavigate = null,
    in (() => void) onPrimaryAction = null,
    in String onPrimaryActionDescription = null,
    in (() => void) onSecondaryAction = null,
    in String onSecondaryActionDescription = null,
    in (() => void) onTertiaryAction = null,
    in String onTertiaryActionDescription = null,
    in (() => void) onQuaternaryAction = null,
    in String onQuaternaryActionDescription = null
  ): Component.New(
    type: ComponentType.Link,
    label: label,
    value: pageId,
    descriptions: [
      Description.New(
        description: $"Press {ButtonFormatterSingle_Underscores(button)}​ to open submenu", 
        order: ButtonDescriptionOrder(button)
      )
    ],
    button: button,
    childIndex: childIndex,

    onRender: onRender,
    onEnter: onEnter,
    onLeave: onLeave,
    onButtonDown: onButtonDown,
    onButtonUp: onButtonUp,
    onNavigate: onNavigate,
    onPrimaryAction: onPrimaryAction,
    onPrimaryActionDescription: onPrimaryActionDescription,
    onSecondaryAction: onSecondaryAction,
    onSecondaryActionDescription: onSecondaryActionDescription,
    onTertiaryAction: onTertiaryAction,
    onTertiaryActionDescription: onTertiaryActionDescription,
    onQuaternaryAction: onQuaternaryAction,
    onQuaternaryActionDescription: onQuaternaryActionDescription,
  );

  public static String Render(ref Component component) {
    return $"{menuComponents[component.childIndex].renderedText || component.label} ▶";
  }

  // public override void OnButtonDown(Button button!) "[Link] OnButtonDown" {
  //   onButtonDown(button, this);

  //   HandleActions();

  //   if(buttonsHeld == [openButton])
  //     _menuState.GoTo(submenuID);
  //   else if(child)
  //     child.OnButtonDown(button);
  // }
}
