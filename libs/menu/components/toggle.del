import '../../utils/string.formatters.del';
import '../customButtons.del';
import './component.del';

class Toggle {
  public static Button BUTTON_TOGGLE: BUTTON_PRIMARY;

  public static Component New(
    in String label,
    in String name = null,
    in (() => Boolean) defaultChecked = null,
    in Description[] descriptions = [],
    in Color color = COLOR_NEUTRAL,
    in Button button = BUTTON_TOGGLE,
    in Number childIndex = -1,

    in (() => void) onRender = null,
    in (() => void) onEnter = null,
    in (() => void) onLeave = null,
    in ((Button) => void) onButtonDown = null,
    in ((Button) => void) onButtonUp = null,
    in ((Vector) => void) onNavigate = null,
    in (() => void) onPrimaryAction = null,
    in String onPrimaryActionDescription = null,
    in (() => void) onSecondaryAction = null,
    in String onSecondaryActionDescription = null,
    in (() => void) onTertiaryAction = null,
    in String onTertiaryActionDescription = null,
    in (() => void) onQuaternaryAction = null,
    in String onQuaternaryActionDescription = null,
    in ((Any) => void) onChange = null
  ): Component.New(
    type: ComponentType.Toggle,
    label: label,
    name: name,
    value: defaultChecked(),
    defaultValue: defaultChecked,
    childIndex: childIndex,
    valueFormatter: BooleanFormatterOnOff,
    descriptions: [
      Description.New($"Press {ButtonFormatterSingle_Underscores(BUTTON_TOGGLE)} to toggle", order: ButtonDescriptionOrder(BUTTON_TOGGLE))
    ] + descriptions,
    color: color,
    button: button,

    onRender: onRender,
    onEnter: onEnter,
    onLeave: onLeave,
    onButtonDown: onButtonDown,
    onButtonUp: onButtonUp,
    onNavigate: onNavigate,
    onPrimaryAction: onPrimaryAction,
    onPrimaryActionDescription: onPrimaryActionDescription,
    onSecondaryAction: onSecondaryAction,
    onSecondaryActionDescription: onSecondaryActionDescription,
    onTertiaryAction: onTertiaryAction,
    onTertiaryActionDescription: onTertiaryActionDescription,
    onQuaternaryAction: onQuaternaryAction,
    onQuaternaryActionDescription: onQuaternaryActionDescription,
    onChange: onChange,
  );

  public static void ButtonDown(ref Component component, in Button button) {
    if(buttonsHeld == [component.button])
      component.SetValue(!component.value);
  }
  

  // protected void ToggleConstructor(
  //   String text!,
  //   Boolean defaultChecked! = null,
  //   Component child! = null
  // ) "[Toggle] Constructor" {
  //   ComponentWithValueConstructor(text, defaultChecked, child);

  //   this.valueFormatter = (it) => BooleanFormatterOnOff(it.value);

  //   AddDescription(Description.New($"Press {ButtonFormatterSingle_Underscores(BUTTON_TOGGLE)}â€‹ to toggle", order: ButtonDescriptionOrder(BUTTON_TOGGLE)));
  // }

  // // events
  // public override void OnButtonDown(Button button!) "[Toggle] OnButtonDown" {
  //   onButtonDown(button, this);

  //   HandleActions();

  //   if(buttonsHeld == [BUTTON_TOGGLE])
  //     SetValue(!checked);

  //   if(child)
  //     child.OnButtonDown(button);
  // }
}
