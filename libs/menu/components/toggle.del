import '../../utils/string.formatters.del';
import '../customButtons.del';
import './component.del';

class Toggle {
  public static Button BUTTON_TOGGLE: BUTTON_PRIMARY;

  public static Number New(
    in String label,
    in String name = null,
    in (() => Boolean) defaultChecked = null,
    in Description[] descriptions = [],
    in Color color = COLOR_NEUTRAL,
    in Button button = BUTTON_TOGGLE,
    in Number childIndex = -1
  ): Component.New(
    type: ComponentType.Toggle,
    label: label,
    name: name,
    value: defaultChecked(),
    defaultValue: defaultChecked,
    childIndex: childIndex,
    valueFormatter: BooleanFormatterOnOff,
    descriptions: [
      Description.New($"Press {ButtonFormatterSingle_Underscores(BUTTON_TOGGLE)}​ to toggle", order: ButtonDescriptionOrder(BUTTON_TOGGLE))
    ] + descriptions,
    color: color,
    button: button
  );
  

  // protected void ToggleConstructor(
  //   String text!,
  //   Boolean defaultChecked! = null,
  //   Component child! = null
  // ) "[Toggle] Constructor" {
  //   ComponentWithValueConstructor(text, defaultChecked, child);

  //   this.valueFormatter = (it) => BooleanFormatterOnOff(it.value);

  //   AddDescription(Description.New($"Press {ButtonFormatterSingle_Underscores(BUTTON_TOGGLE)}​ to toggle", order: ButtonDescriptionOrder(BUTTON_TOGGLE)));
  // }

  // // events
  // public override void OnButtonDown(Button button!) "[Toggle] OnButtonDown" {
  //   onButtonDown(button, this);

  //   HandleActions();

  //   if(buttonsHeld == [BUTTON_TOGGLE])
  //     SetValue(!checked);

  //   if(child)
  //     child.OnButtonDown(button);
  // }
}
