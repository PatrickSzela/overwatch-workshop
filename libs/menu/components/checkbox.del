import './toggle.del';

class Checkbox {
  public static Component New(
    in String label, 
    in Boolean defaultChecked = false,
    in String name = null,
    in String value = null,
    in Description[] descriptions = [],
    in Color color = COLOR_NEUTRAL,
    in Button button = Toggle.BUTTON_TOGGLE,
    in Number childIndex = -1,

    in (() => void) onRender = null,
    in (() => void) onEnter = null,
    in (() => void) onLeave = null,
    in ((Button) => void) onButtonDown = null,
    in ((Button) => void) onButtonUp = null,
    in ((Vector) => void) onNavigate = null,
    in (() => void) onPrimaryAction = null,
    in String onPrimaryActionDescription = null,
    in (() => void) onSecondaryAction = null,
    in String onSecondaryActionDescription = null,
    in (() => void) onTertiaryAction = null,
    in String onTertiaryActionDescription = null,
    in (() => void) onQuaternaryAction = null,
    in String onQuaternaryActionDescription = null,
    in ((Any) => void) onChange = null
  ): Component.New(
    type: ComponentType.Checkbox,
    label: label, 
    name: name,
    value: value,
    defaultValue: defaultChecked,
    optionIndex: defaultChecked,
    descriptions: [
      Description.New($"Press {ButtonFormatterSingle_Underscores(button)} to toggle", order: ButtonDescriptionOrder(button))
    ] + descriptions,
    color: color,
    button: button,
    childIndex: childIndex,

    onRender: onRender,
    onEnter: onEnter,
    onLeave: onLeave,
    onButtonDown: onButtonDown,
    onButtonUp: onButtonUp,
    onNavigate: onNavigate,
    onPrimaryAction: onPrimaryAction,
    onPrimaryActionDescription: onPrimaryActionDescription,
    onSecondaryAction: onSecondaryAction,
    onSecondaryActionDescription: onSecondaryActionDescription,
    onTertiaryAction: onTertiaryAction,
    onTertiaryActionDescription: onTertiaryActionDescription,
    onQuaternaryAction: onQuaternaryAction,
    onQuaternaryActionDescription: onQuaternaryActionDescription,
    onChange: onChange,
  );

  public static String Render(ref Component component) {
    return $"{component.optionIndex ? "[âœ“]" : "[    ]"} {menuComponents[component.childIndex].renderedText || component.label}";
  }
}