import './component.del';

class ComponentWithValue: Component 
{
  public Any value;
  public Any defaultValue;
  public ((ComponentWithValue) => String) valueFormatter;
  static public ((ComponentWithValue) => String) defaultValueFormatter = (ComponentWithValue it) => it.value;
  
  // events
  public ((Button, ComponentWithValue) => void) onButtonDown;
  public ((Button, ComponentWithValue) => void) onButtonUp;
  public ((Vector, ComponentWithValue) => void) onNavigate;
  public ((Any, ComponentWithValue) => void) onChange;

  public constructor(
    in String text!,
    in Any defaultValue! = null
  ) {
    ConstructorWithValue([text, defaultValue, null]);
  }

  protected void ConstructorWithValue(Any[] arr!) "[ComponentWithValue] Constructor Helper" {
    String text: arr[0];
    Any defaultValue: arr[1];
    Component child: arr[2];
    
    ConstructorBase([text, child]);

    this.text = text;
    this.defaultValue = defaultValue;
    this.valueFormatter = defaultValueFormatter;
    value = this.defaultValue;
  }

  public override void FormatText() "[ComponentWithValue] FormatText" {
    renderedText = textFormatter(this);
    renderedText = $"{renderedText}: {valueFormatter(this)}";
  }

  // events
  public override void OnButtonDown(Button button!) "[ComponentWithValue] OnButtonDown" {
    onButtonDown(button, this);
    if(child != null)
      child.OnButtonDown(button);
  }

  public override void OnButtonUp(Button button!) "[ComponentWithValue] OnButtonUp" {
    onButtonUp(button, this);
    if(child != null)
      child.OnButtonUp(button);
  }

  public override void OnNavigate(Vector direction!) "[ComponentWithValue] OnNavigate" {
    onNavigate(direction, this);
    if(child != null)
      child.OnNavigate(direction);
  }

  public virtual void OnChange() "[ComponentWithValue] OnChange" {
    onChange(value, this);
  }
}